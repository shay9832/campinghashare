--○ 테이블 강제 삭제(초기에만 사용하고 이후 삭제 필요)
drop table HOT_POST_LOG cascade constraints purge
/

drop table RECOMMEND cascade constraints purge
/

drop table BOOKMARK cascade constraints purge
/

drop table EVENT_ENTRY cascade constraints purge
/

drop table NOTI_CHECK_LOG cascade constraints purge
/

drop table NOTI cascade constraints purge
/

drop table NOTI_TYPE cascade constraints purge
/

drop table STATISTICS cascade constraints purge
/

drop table STAT_TYPE cascade constraints purge
/

drop table STAT_PERIOD cascade constraints purge
/

drop table POST_VIEW_LOG cascade constraints purge
/

drop table POST_REPORT_ACTION cascade constraints purge
/

drop table POST_REPORT cascade constraints purge
/

drop table REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPLY_REPORT cascade constraints purge
/

drop table RENTAL_REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPORT_ACTION_TYPE cascade constraints purge
/

drop table RENTAL_REPLY_REPORT cascade constraints purge
/

drop table REPORT_TYPE cascade constraints purge
/

drop table OWNED_COUPON cascade constraints purge
/

drop table ISSUED_COUPON cascade constraints purge
/

drop table COUPON_TYPE cascade constraints purge
/

drop table POINT_LOG cascade constraints purge
/

drop table POINT_CHANGE_TYPE cascade constraints purge
/

drop table RANK cascade constraints purge
/

drop table ADDRESS_LOG cascade constraints purge
/

drop table WISHLIST cascade constraints purge
/

drop table SATISFACTION_LOG cascade constraints purge
/

drop table NICKNAME_LOG cascade constraints purge
/

drop table USERS cascade constraints purge
/

drop table SIGNUP_TYPE cascade constraints purge
/

drop table SUSPENDED_USER cascade constraints purge
/

drop table ATTACHMENT_POST cascade constraints purge
/

drop table ATTACHMENT_REPLY cascade constraints purge
/

drop table REPLY cascade constraints purge
/

drop table POST cascade constraints purge
/

drop table POST_LABEL cascade constraints purge
/

drop table BOARD cascade constraints purge
/

drop table WRITE_GRADE cascade constraints purge
/

drop table BOARD_CATEGORY cascade constraints purge
/

drop table ATTACHMENT_CAMPING_DIARY cascade constraints purge
/

drop table DIARY cascade constraints purge
/

drop table ATTACHMENT_RENTAL_REPLY cascade constraints purge
/

drop table ATTACHMENT_EVENT cascade constraints purge
/

drop table EVENT cascade constraints purge
/

drop table ATTACHMENT_EQUIP_REG cascade constraints purge
/

drop table EQUIP_CODE cascade constraints purge
/

drop table EQUIPMENT_REGISTRATION cascade constraints purge
/

drop table EQUIP_NAME cascade constraints purge
/

drop table BRAND cascade constraints purge
/

alter table STOREN_MATCHING_REQ
    drop constraint SMR_INSPEC_RESULT_ACTION_ID_FK cascade
/

drop table RENTAL_REPLY cascade constraints purge
/

drop table PAY_CANCEL cascade constraints purge
/

drop table PAY_CANCEL_REASON cascade constraints purge
/

drop table USERS_DELIVERY_RETURN cascade constraints purge
/

drop table USERS_DELIVERY cascade constraints purge
/

drop table STORAGE_LAST_RETURN cascade constraints purge
/

drop table STOREN_LAST_RETURN cascade constraints purge
/

drop table INSPEC_LIST cascade constraints purge
/

drop table ADMINS cascade constraints purge
/

drop table CATE_INSPEC cascade constraints purge
/

drop table CATEGORY cascade constraints purge
/

drop table INSPEC_ITEM cascade constraints purge
/

drop table INSPEC_GRADE cascade constraints purge
/

drop table RENTER_ADD_PAY cascade constraints purge
/

drop table RENTER_PROBLEM cascade constraints purge
/

drop table INSPEC_RESULT_ACTION cascade constraints purge
/

drop table INSPEC_RESULT cascade constraints purge
/

drop table PLATFORM_DELIVERY_RETURN cascade constraints purge
/

drop table PLATFORM_DELIVERY cascade constraints purge
/

drop table PAY cascade constraints purge
/

drop table STOREN cascade constraints purge
/

drop table STORAGE cascade constraints purge
/

drop table EQUIP_SIZE cascade constraints purge
/

drop table STOREN_MATCHING_DONE cascade constraints purge
/

drop table STOREN_MATCHING_REQ cascade constraints purge
/

drop table RENTAL_MATCHING_DONE cascade constraints purge
/

drop table RENTAL_MATCHING_REQ cascade constraints purge
/

drop table USER_CODE cascade constraints purge
/

drop table RENTAL cascade constraints purge
/

drop table PAY_METHOD cascade constraints purge
/

drop table EQUIP_GRADE cascade constraints purge
/

drop table INSPEC_RESULT_ACTION_TYPE cascade constraints purge
/

drop table RENTER_PROBLEM_TYPE cascade constraints purge
/

drop table BOOST_LOG cascade constraints purge
/

drop table EVENT_WIN cascade constraints purge
/

drop table RENTER_PROBLEM_LOST cascade constraints purge
/

---------------------------------------------
--○ 시퀀스 삭제
DROP SEQUENCE SEQ;


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--○ 전체 테이블 수 확인
SELECT *
FROM TAB;

--○ 시퀀스 확인
SELECT SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY, LAST_NUMBER, CACHE_SIZE, CYCLE_FLAG, ORDER_FLAG
FROM USER_SEQUENCES;

--○ 테이블 갯수 확인
SELECT COUNT(*) AS TABLE_COUNT 
FROM USER_TABLES;

--○ 전체 제약조건 확인
SELECT *
FROM ALL_CONTSTRAINTS;

--○ 테이블 구조 확인
DESC WRITE_GRADE;



--○ LOCK 문제 해결 방법
SELECT *
FROM v$access
WHERE object = 'ADMINS';

SELECT *
FROM dba_ddl_locks
WHERE name = 'ADMINS';

SELECT l.session_id AS sid, s.serial#, s.username, s.program
FROM v$locked_object l
JOIN dba_objects o ON l.object_id = o.object_id
JOIN v$session s ON l.session_id = s.sid
WHERE o.object_name = 'ADMINS';

SELECT sid, serial#, username, program, status
FROM v$session
WHERE sid = 114 AND serial# = 73;

ALTER SYSTEM KILL SESSION '114,73' IMMEDIATE;


---------------------------------------------------------------------------------
--○ 제약조건 조회 VIEW (전체 테이블)
SELECT 
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
    , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
    , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
JOIN USER_TAB_COLUMNS UTC
    ON UCC.TABLE_NAME = UTC.TABLE_NAME
    AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 조회 VIEW (개별 테이블)
SELECT 
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
    , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
    , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
JOIN USER_TAB_COLUMNS UTC
    ON UCC.TABLE_NAME = UTC.TABLE_NAME
    AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
WHERE UC.TABLE_NAME = 'STOREN_MATCHING_REQ'
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (전체 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (개별별 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DIARY_OPEN_LOG'
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--■■■ 공통 시퀀스 생성 ■■■--
CREATE SEQUENCE SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-------------------------------------------------------
--■■■ 테이블 생성 ■■■--
--○ '작성_권한' 테이블
CREATE TABLE WRITE_GRADE
( WRITE_GRADE_ID    NUMBER
, WRITE_GRADE_NAME  VARCHAR2(30)  CONSTRAINT  WG_WRITE_GRADE_NAME_NN  NOT NULL
, CONSTRAINT WRITE_GRADE_ID_PK PRIMARY KEY(WRITE_GRADE_ID)
);

--○ '말머리' 테이블
CREATE TABLE POST_LABEL
( POST_LABEL_ID   NUMBER
, BOARD_ID        NUMBER        CONSTRAINT  PL_BOARD_ID_NAME_NN  NOT NULL
, POST_LABEL_NAME VARCHAR2(60)  CONSTRAINT  PL_POST_LABEL_NAME_NN  NOT NULL
, CONSTRAINT POST_LABEL_ID_PK PRIMARY KEY(POST_LABEL_ID)
);

--○ '캠핑일지' 테이블
CREATE TABLE DIARY
( DIARY_ID      NUMBER
, USER_CODE     NUMBER        CONSTRAINT  DIA_USER_CODE_NN  NOT NULL
, DIARY_TITLE   VARCHAR(90)   CONSTRAINT  DIA_DIARY_TITLE_NN  NOT NULL
, CAMPING_DATE  DATE          CONSTRAINT  DIA_CAMPING_DATE_NN NOT NULL
, LATITUDE      NUMBER(9,6)
, LONGITUDE     NUMBER(9,6)
, DIARY_WEATHER VARCHAR2(60)
, CREATED_DATE  DATE          CONSTRAINT  DIA_CREATED_DATE_NN  NOT NULL
, CONSTRAINT DIARY_ID_PK PRIMARY KEY(DIARY_ID)
);

--○ '인기글_지정_로그' 테이블
CREATE TABLE HOT_POST_LOG
( HOT_POST_LOG_ID   NUMBER
, POST_ID           NUMBER  CONSTRAINT HPL_POST_ID_NN NOT NULL
, CREATED_DATE      DATE    CONSTRAINT HPL_CREATED_DATE_NN NOT NULL
, CONSTRAINT HOT_POST_LOG_ID_PK PRIMARY KEY(HOT_POST_LOG_ID)
);

--○ '추천' 테이블
CREATE TABLE RECOMMEND
( RECOMMEND_ID  NUMBER
, USER_CODE     NUMBER  CONSTRAINT REC_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT REC_POST_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT REC_CREATED_DATE_NN NOT NULL
, CONSTRAINT RECOMMEND_ID_PK PRIMARY KEY(RECOMMEND_ID)
);

--○ '댓글' 테이블
CREATE TABLE REPLY
( REPLY_ID      NUMBER
, ROOT_REPLY_ID NUMBER
, USER_CODE     NUMBER  CONSTRAINT REP_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT REP_POST_ID_NN NOT NULL
, REPLY_CONTENT VARCHAR2(600)
, CREATED_DATE  DATE    CONSTRAINT REP_CREATED_DATE_NN NOT NULL
, CONSTRAINT REPLY_ID_PK PRIMARY KEY(REPLY_ID)
);


--○ '북마크' 테이블
CREATE TABLE BOOKMARK
( BOOKMARK_ID   NUMBER
, USER_CODE     NUMBER  CONSTRAINT BOO_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT BOO_POST_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT BOO_CREATED_DATE_NN NOT NULL
, CONSTRAINT BOOKMARK_ID_PK PRIMARY KEY(BOOKMARK_ID)
);

--○ '이벤트' 테이블
CREATE TABLE EVENT
( EVENT_ID          NUMBER
, ADMIN_ID          VARCHAR2(20)    CONSTRAINT EVE_EVENT_ID_NN NOT NULL
, EVENT_TITLE       VARCHAR2(90)    CONSTRAINT EVE_EVENT_TITLE_NN NOT NULL
, EVENT_CONTENT     VARCHAR2(3000)
, EVENT_START_DATE  DATE            CONSTRAINT EVE_EVENT_START_DATE_NN NOT NULL
, EVENT_END_DATE    DATE            CONSTRAINT EVE_EVENT_END_DATE_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT EVE_CREATED_DATE_NN NOT NULL
, CONSTRAINT EVENT_ID_PK PRIMARY KEY(EVENT_ID)
);

--○ '이벤트_응모' 테이블
CREATE TABLE EVENT_ENTRY
( EVENT_ENTRY_ID    NUMBER
, EVENT_ID          NUMBER  CONSTRAINT EE_EVENT_ID_NN NOT NULL
, USER_CODE         NUMBER  CONSTRAINT EE_USER_CODE_NN NOT NULL
, EVENT_ENTRY_POINT NUMBER
, CREATED_DATE      DATE    CONSTRAINT EE_CREATED_DATE_NN NOT NULL
, CONSTRAINT EVENT_ENTRY_ID_PK PRIMARY KEY(EVENT_ENTRY_ID)
);

--○ '이벤트_당첨' 테이블
CREATE TABLE EVENT_WIN
( EVENT_WIN_ID    NUMBER
, EVENT_ENTRY_ID  NUMBER  CONSTRAINT EW_EVENT_ENTRY_ID_NN NOT NULL
, CONSTRAINT EVENT_WIN_ID_PK PRIMARY KEY(EVENT_WIN_ID)
);

--○ '알림_유형' 테이블
CREATE TABLE NOTI_TYPE
( NOTI_TYPE_ID    NUMBER
, NOTI_TYPE_NAME  VARCHAR2(100)  CONSTRAINT NT_NOTI_TYPE_NAME_NN NOT NULL
, NOTI_CONTENT    VARCHAR(300)   CONSTRAINT NT_NOTI_CONTENT_NN NOT NULL
, CONSTRAINT NOTI_TYPE_ID_PK PRIMARY KEY(NOTI_TYPE_ID)
);

--○ '알림' 테이블
CREATE TABLE NOTI
( NOTI_ID       NUMBER
, USER_CODE     NUMBER  CONSTRAINT NOT_USER_CODE_NN NOT NULL
, NOTI_TYPE_ID  NUMBER  CONSTRAINT NOT_NOTI_TYPE_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT NOT_CREATED_DATE_NN NOT NULL
, CONSTRAINT NOTI_ID_PK PRIMARY KEY(NOTI_ID)
);

--○ '알림_확인_로그' 테이블
CREATE TABLE NOTI_CHECK_LOG
( NOTI_CHECK_LOG_ID NUMBER
, NOTI_ID           NUMBER  CONSTRAINT NCL_NOTI_ID_NN NOT NULL
, CHECKED_DATE      DATE    CONSTRAINT NCL_CHECKED_DATE_NN NOT NULL
, CONSTRAINT NOTI_CHECK_LOG_ID_PK PRIMARY KEY(NOTI_CHECK_LOG_ID)
);

--○ '통계항목' 테이블
CREATE TABLE STAT_TYPE
( STAT_TYPE_ID    NUMBER
, STAT_TYPE_NAME   VARCHAR2(90) CONSTRAINT ST_STAT_TYPE_NAME_NN NOT NULL
, CONSTRAINT STAT_TYPE_ID_PK PRIMARY KEY(STAT_TYPE_ID)
);

--○ '통계기간' 테이블
CREATE TABLE STAT_PERIOD
( STAT_PERIOD_ID    NUMBER
, STAT_PERIOD_NAME  VARCHAR2(30) CONSTRAINT SP_STAT_PERIOD_NAME_NN NOT NULL
, CONSTRAINT STAT_PERIOD_ID_PK PRIMARY KEY(STAT_PERIOD_ID)
);

--○ '통계' 테이블
CREATE TABLE STATISTICS
( STATISTICS_ID   NUMBER
, ADMIN_ID        VARCHAR2(20) CONSTRAINT STA_ADMIN_ID_NN NOT NULL
, STAT_TYPE_ID    NUMBER       CONSTRAINT STA_STAT_TYPE_ID_NN NOT NULL
, STAT_PERIOD_ID  NUMBER       CONSTRAINT STA_STAT_PERIOD_ID_NN NOT NULL
, STAT_RESULT     VARCHAR2(3000)
, CREATED_DATE    DATE         CONSTRAINT STA_CREATED_DATE_NN NOT NULL
, CONSTRAINT STATISTICS_ID_PK PRIMARY KEY(STATISTICS_ID)
);

--○ '게시판_카테고리' 테이블
CREATE TABLE BOARD_CATEGORY
( BOARD_CATE_ID     NUMBER
, BOARD_CATE_NAME   VARCHAR2(30)    CONSTRAINT BOARD_CATE_NAME_NN NOT NULL
, BOARD_CATE_DESC   VARCHAR2(90)
, CONSTRAINT BOARD_CATE_ID_PK PRIMARY KEY(BOARD_CATE_ID)
);

--○ '게시판' 테이블
CREATE TABLE BOARD
( BOARD_ID        NUMBER
, BOARD_CATE_ID   NUMBER        CONSTRAINT BOA_BOARD_CATE_ID_NN NOT NULL
, WRITE_GRADE_ID  NUMBER        CONSTRAINT BOA_WRITE_GRADE_ID_NN NOT NULL
, BOARD_NAME      VARCHAR2(60)  CONSTRAINT BOA_BOARD_NAME_ID_NN NOT NULL
, CONSTRAINT BOARD_ID_PK PRIMARY KEY(BOARD_ID)
);

--○ '게시물' 테이블
CREATE TABLE POST
( POST_ID       NUMBER
, USER_CODE     NUMBER          CONSTRAINT POS_USER_CODE_NN NOT NULL
, BOARD_ID      NUMBER          CONSTRAINT POS_BOARD_ID_NN NOT NULL
, POST_LABEL_ID NUMBER          CONSTRAINT POS_POST_LABEL_ID_NN NOT NULL
, POST_TITLE    VARCHAR2(90)    CONSTRAINT POS_POST_TITLE_NN NOT NULL
, POST_CONTENT  VARCHAR2(3000)
, CREATED_DATE  DATE            CONSTRAINT POS_CREATED_DATE_NN NOT NULL
, CONSTRAINT POST_ID_PK PRIMARY KEY(POST_ID)
);

--○ '게시물_조회_로그' 테이블
CREATE TABLE POST_VIEW_LOG
( POST_VIEW_LOG_ID  NUMBER
, USER_CODE         NUMBER  CONSTRAINT PVL_USER_CODE_NN NOT NULL
, POST_ID           NUMBER  CONSTRAINT PVL_POST_ID_NN NOT NULL
, CREATED_DATE      DATE    CONSTRAINT PVL_CREATED_DATE_NN NOT NULL
, CONSTRAINT POST_VIEW_LOG_ID_PK PRIMARY KEY(POST_VIEW_LOG_ID)
);

--○ '신고_유형' 테이블
CREATE TABLE REPORT_TYPE
( REPORT_TYPE_ID  NUMBER
, REPORT_TYPE_NAME  VARCHAR2(60) CONSTRAINT RT_REPORT_TYPE_NAME_NN NOT NULL
, CONSTRAINT REPORT_TYPE_ID_PK PRIMARY KEY(REPORT_TYPE_ID)
);

--○ '신고_처리_유형' 테이블
CREATE TABLE REPORT_ACTION_TYPE
( REPORT_ACTION_TYPE_ID   NUMBER
, REPORT_ACTION_TYPE_NAME VARCHAR2(20) CONSTRAINT RAT_REPORT_ACTION_TYPE_NAME_NN NOT NULL
, CONSTRAINT REPORT_ACTION_TYPE_ID_PK PRIMARY KEY(REPORT_ACTION_TYPE_ID)
);

--○ '게시글_신고_접수' 테이블
CREATE TABLE POST_REPORT
( POST_REPORT_ID    NUMBER
, POST_ID           NUMBER  CONSTRAINT PR_POST_ID_NN NOT NULL
, REPORTER_ID       NUMBER  CONSTRAINT PR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID    NUMBER  CONSTRAINT PR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT    VARCHAR2(600)
, REPORTED_DATE     DATE    CONSTRAINT PR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT POST_REPORT_ID_PK PRIMARY KEY(POST_REPORT_ID)
);

--○ '게시글_신고_처리' 테이블
CREATE TABLE POST_REPORT_ACTION
( POST_REPORT_ACTION_ID NUMBER
, POST_REPORT_ID        NUMBER          CONSTRAINT PRA_POST_REPORT_ID_NN NOT NULL
, ADMIN_ID              VARCHAR2(20)    CONSTRAINT PRA_ADMIN_ID_NN NOT NULL  
, REPORT_ACTION_TYPE_ID NUMBER          CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE        DATE            CONSTRAINT PRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT POST_REPORT_ACTION_ID_PK PRIMARY KEY(POST_REPORT_ACTION_ID)
);

--○ '댓글_신고_접수' 테이블
CREATE TABLE REPLY_REPORT
( REPLY_REPORT_ID   NUMBER
, REPLY_ID          NUMBER  CONSTRAINT RR_REPLY_ID_NN NOT NULL
, REPORTER_ID       NUMBER  CONSTRAINT RR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID    NUMBER  CONSTRAINT RR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT    VARCHAR2(600)
, REPORTED_DATE     DATE    CONSTRAINT RR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT REPLY_REPORT_ID_PK PRIMARY KEY(REPLY_REPORT_ID)
);

--○ '댓글_신고_처리' 테이블
CREATE TABLE REPLY_REPORT_ACTION
( REPLY_REPORT_ACTION_ID  NUMBER
, REPLY_REPORT_ID         NUMBER        CONSTRAINT RRA_REPLY_REPORT_ID_NN NOT NULL
, ADMIN_ID                VARCHAR2(20)  CONSTRAINT RRA_ADMIN_ID_NN NOT NULL
, REPORT_ACTION_TYPE_ID   NUMBER        CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE          DATE          CONSTRAINT RRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT REPLY_REPORT_ACTION_ID_PK PRIMARY KEY(REPLY_REPORT_ACTION_ID)
);

--○ '렌탈_댓글_신고_접수' 테이블
CREATE TABLE RENTAL_REPLY_REPORT
( RENTAL_REPLY_REPORT_ID    NUMBER
, RENTAL_REPLY_ID           NUMBER  CONSTRAINT RRR_RENTAL_REPLY_ID_NN NOT NULL
, REPORTER_ID               NUMBER  CONSTRAINT RRR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID            NUMBER  CONSTRAINT RRR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT            VARCHAR2(600)
, REPORTED_DATE             DATE    CONSTRAINT RRR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_REPLY_REPORT_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ID)
);

--○ '렌탈_댓글_신고_처리' 테이블
CREATE TABLE RENTAL_REPLY_REPORT_ACTION
( RENTAL_REPLY_REPORT_ACTION_ID NUMBER
, RENTAL_REPLY_REPORT_ID        NUMBER        CONSTRAINT RRRA_RENTAL_REPLY_R_ID_NN NOT NULL
, ADMIN_ID                      VARCHAR2(20)  CONSTRAINT RRRA_ADMIN_ID_NN NOT NULL
, REPORT_ACTION_TYPE_ID         NUMBER        CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE                DATE          CONSTRAINT RRRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_REPLY_R_ACTION_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ACTION_ID)
);

--○ '쿠폰_종류' 테이블
CREATE TABLE COUPON_TYPE
( COUPON_TYPE_ID    NUMBER       
, COUPON_TYPE_NAME  VARCHAR2(60) CONSTRAINT CT_COUPON_TYPE_NAME_NN NOT NULL
, CONSTRAINT COUPON_TYPE_ID_PK PRIMARY KEY(COUPON_TYPE_ID)
);

--○ '발행_쿠폰' 테이블
CREATE TABLE ISSUED_COUPON
( ISSUED_COUPON_ID  NUMBER
, ADMIN_ID          VARCHAR2(20)  CONSTRAINT IC_ADMIN_ID_NN NOT NULL 
, COUPON_TYPE_ID    NUMBER        CONSTRAINT IC_COUPON_TYPE_ID_NN NOT NULL
, COUPON_NAME       VARCHAR2(60)  CONSTRAINT IC_COUPON_NAME_NN NOT NULL
, COUPON_DISCOUNT   NUMBER(3,0)   
, COUPON_MONTH      NUMBER(2,0)   CONSTRAINT IC_COUPON_MONTH_NN NOT NULL
, ISSUED_DATE       DATE          CONSTRAINT IC_ISSUED_DATE_NN NOT NULL
, CONSTRAINT ISSUED_COUPON_ID_PK PRIMARY KEY(ISSUED_COUPON_ID)
);

--○ '보유_쿠폰' 테이블
CREATE TABLE OWNED_COUPON
( OWNED_COUPON_ID     NUMBER  
, USER_CODE           NUMBER   CONSTRAINT OC_USER_CODE_NN NOT NULL
, ISSUED_COUPON_ID    NUMBER   CONSTRAINT OC_ISSUED_COUPON_ID_NN NOT NULL
, COMPLETED_DATE      DATE
, CONSTRAINT OWNED_COUPON_ID_PK PRIMARY KEY(OWNED_COUPON_ID)      
);

--○ '포인트_변동_유형' 테이블
CREATE TABLE POINT_CHANGE_TYPE
( POINT_CHANGE_TYPE_ID      NUMBER
, POINT_CHANGE_TYPE_NAME    VARCHAR2(60)   CONSTRAINT PCT_POINT_CHANGE_TYPE_NAME_NN NOT NULL
, CONSTRAINT POINT_CHANGE_TYPE_ID_PK PRIMARY KEY(POINT_CHANGE_TYPE_ID)
);

--○ '포인트_변동_로그' 테이블
CREATE TABLE POINT_LOG
( POINT_LOG_ID          NUMBER
, USER_CODE             NUMBER  CONSTRAINT PL_USER_CODE_NN NOT NULL
, POINT_CHANGE_TYPE_ID  NUMBER  CONSTRAINT PL_POINT_CHANGE_TYPE_ID_NN NOT NULL
, POINT_CHANGE          NUMBER
, CREATED_DATE          DATE    CONSTRAINT PL_CREATED_DATE_NN NOT NULL
, CONSTRAINT POINT_LOG_ID_PK PRIMARY KEY(POINT_LOG_ID)
);

--○ '가입유형' 테이블
CREATE TABLE SIGNUP_TYPE
( SIGNUP_TYPE_ID    NUMBER  
, SIGNUP_TYPE_NAME  VARCHAR2(30)    CONSTRAINT ST_SIGNUP_TYPE_NAME_NN NOT NULL
, CONSTRAINT SIGNUP_TYPE_ID_PK PRIMARY KEY(SIGNUP_TYPE_ID)
);

--○ '회원_등급' 테이블
CREATE TABLE RANK
( RANK_ID               NUMBER
, RANK_NAME             VARCHAR2(30)    CONSTRAINT RAN_RANK_NAME_NN NOT NULL
, MIN_POINT             NUMBER(3,0)     CONSTRAINT RAN_MIN_POINT_NN NOT NULL
, MAX_POINT             NUMBER(3,0)     CONSTRAINT RAN_MAX_POINT_NN NOT NULL
, MIN_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MIN_CREDIT_NN NOT NULL
, MAX_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MAX_CREDIT_NN NOT NULL
, MAX_NICKNAME_CHANGE   NUMBER(1,0)     CONSTRAINT RAN_MAX_NICKNAME_CHANGE_NN NOT NULL
, DISCOUNT_COUPON_QTY   NUMBER(1,0)     CONSTRAINT RAN_DISCOUNT_COUPON_QTY_NN NOT NULL
, BOOST_QTY             NUMBER(1,0)     CONSTRAINT RAN_BOOT_QTY_NN NOT NULL
, CONSTRAINT RANK_ID_PK PRIMARY KEY(RANK_ID)
);

--○ '끌어올리기_로그' 테이블
CREATE TABLE BOOST_LOG
( BOOST_LOG_ID      NUMBER
, STOREN_ID         NUMBER 
, RENTAL_ID         NUMBER
, BOOST_LOG_DATE    DATE    CONSTRAINT BL_BOOST_LOG_DATE_NN NOT NULL
, CONSTRAINT BOOST_LOG_ID_PK PRIMARY KEY(BOOST_LOG_ID)
);

--○ '주소_로그' 테이블
CREATE TABLE ADDRESS_LOG
( ADDRESS_ID            NUMBER
, USER_CODE             NUMBER          CONSTRAINT AL_USER_CODE_NN NOT NULL
, ZIPCODE               VARCHAR2(10)    CONSTRAINT AL_ZIPCODE_NN NOT NULL
, ADDRESS               VARCHAR2(200)   CONSTRAINT AL_ADDRESS_NN NOT NULL
, LAST_UPDATED_DATE     DATE            CONSTRAINT AL_LAST_UPDATED_DATE_NN NOT NULL
, CONSTRAINT ADDRESS_ID_PK PRIMARY KEY(ADDRESS_ID)
);

--○ '찜' 테이블
CREATE TABLE WISHLIST
( WISHLIST_ID       NUMBER
, USER_CODE         NUMBER      CONSTRAINT WIS_USER_CODE_NN NOT NULL
, STOREN_ID         NUMBER      CONSTRAINT WIS_STOREN_ID_NN NOT NULL
, RENTAL_ID         NUMBER      CONSTRAINT WIS_RENTAL_ID_NN NOT NULL
, CREATED_DATE      DATE        CONSTRAINT WIS_CREATE_DATE_NN NOT NULL
, CONSTRAINT WISHLIST_ID_PK PRIMARY KEY(WISHLIST_ID)
);

--○ '만족도_평가_로그' 테이블
CREATE TABLE SATISFACTION_LOG
( SATIS_LOG_ID              NUMBER
, RENTAL_MATCHING_DONE_ID   NUMBER          CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_NN NOT NULL
, REVIEWER_ID               NUMBER          CONSTRAINT SL_REVIEWER_ID_NN NOT NULL
, REVIEWEE_ID               NUMBER          CONSTRAINT SL_REVIEWEE_ID_NN NOT NULL
, SATIS_SCORE               NUMBER(1,0)     CONSTRAINT SL_SATIS_SCORE_NN NOT NULL
, SATIS_COMMENT             VARCHAR2(500)
, CREATED_DATE              DATE            CONSTRAINT SL_CREATED_DATE_NN NOT NULL
, CONSTRAINT SATIS_LOG_ID_PK PRIMARY KEY(SATIS_LOG_ID)            
);

--○ '닉네임_로그' 테이블
CREATE TABLE NICKNAME_LOG
( NICKNAME_LOG_ID       NUMBER
, USER_CODE             NUMBER          CONSTRAINT NL_USER_CODE_NN NOT NULL
, NICKNAME              VARCHAR2(30)    CONSTRAINT NL_NICKNAME_NN NOT NULL
, LAST_UPDATED_DATE     DATE            CONSTRAINT NL_LAST_UPDATED_DATE NOT NULL
, CONSTRAINT NICKNAME_LOG_ID_PK PRIMARY KEY(NICKNAME_LOG_ID)
);

--○ '회원_코드' 테이블
CREATE TABLE USER_CODE
( USER_CODE     NUMBER
, EXIT_DATE     DATE
, CONSTRAINT USER_CODE_PK PRIMARY KEY(USER_CODE)
);

--○ '회원_가입' 테이블
CREATE TABLE USERS
( USER_ID           VARCHAR2(20)
, USER_CODE         NUMBER          CONSTRAINT USE_USER_CODE_NN NOT NULL
, SIGNUP_TYPE_ID   NUMBER          CONSTRAINT USE_SIGNUP_TYPE_ID_NN NOT NULL
, USER_PW          VARCHAR2(128)   CONSTRAINT USE_USER_PW_NN NOT NULL
, USER_NAME          VARCHAR2(30)   CONSTRAINT USE_USER_NAME_NN NOT NULL
, USER_TEL          VARCHAR2(30)   CONSTRAINT USE_USER_TEL_NN NOT NULL
, USER_EMAIL      VARCHAR2(40)   
, EMAIL_CONSENT      NUMBER(1,0)
, CREATED_DATE      DATE          CONSTRAINT USE_CREATED_DATE NOT NULL
, CONSTRAINT USER_ID_PK PRIMARY KEY(USER_ID)   
);

--○ 관리자 등록 테이블
CREATE TABLE ADMINS
( ADMIN_ID          VARCHAR2(20)
, USER_CODE         NUMBER          CONSTRAINT ADM_USER_CODE_NN NOT NULL
, ADMIN_PW          VARCHAR2(128)   CONSTRAINT ADM_ADMIN_PW_NN  NOT NULL
, ADMIN_NICKNAME    VARCHAR2(30)    CONSTRAINT ADM_ADMIN_NICKNAME_NN NOT NULL
, ADMIN_TEL         VARCHAR2(30)    CONSTRAINT ADM_ADMIN_TEL_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT ADM_CREATED_DATE NOT NULL
, CONSTRAINT ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);

--○ '활동정지_회원' 테이블
CREATE TABLE SUSPENDED_USER
( SUSPENDED_USER_ID     NUMBER
, USER_CODE             NUMBER          CONSTRAINT SU_USER_CODE_NN NOT NULL
, ADMIN_ID              VARCHAR2(20)    CONSTRAINT SU_ADMIN_ID_NN NOT NULL
, SUSPENDED_START_DATE  DATE            CONSTRAINT SU_SUSPENDED_START_DATE_NN NOT NULL
, CONSTRAINT SUSPENDED_USER_ID_PK PRIMARY KEY(SUSPENDED_USER_ID)
);

--○ '첨부파일_게시물' 테이블
CREATE TABLE ATTACHMENT_POST
( ATTACHMENT_POST_ID    NUMBER
, POST_ID               NUMBER          CONSTRAINT AP_POST_ID_NN NOT NULL
, ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AP_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AP_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE       NUMBER          CONSTRAINT AP_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AP_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE          DATE            CONSTRAINT AP_CREATED_DATE_NN NOT NULL 
, CONSTRAINT ATTACHMENT_POST_ID_PK PRIMARY KEY(ATTACHMENT_POST_ID)
);

--○ '첨부파일_댓글' 테이블
CREATE TABLE ATTACHMENT_REPLY
( ATTACHMENT_REPLY_ID   NUMBER
, REPLY_ID              NUMBER          CONSTRAINT AR_REPLY_ID_NN NOT NULL
, ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AR_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AR_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE       NUMBER          CONSTRAINT AR_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AR_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE          DATE            CONSTRAINT AR_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_REPLY_ID)
);

--○ '첨부파일_캠핑일지' 테이블
CREATE TABLE ATTACHMENT_CAMPING_DIARY
( ATTACHMENT_CAMPING_DIARY_ID   NUMBER
, DIARY_ID                      NUMBER          CONSTRAINT ACD_DIARY_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ACD_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ACD_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT ACD_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ACD_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT ACD_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_CAMPING_DIARY_ID_PK PRIMARY KEY(ATTACHMENT_CAMPING_DIARY_ID)
);

--○ '첨부파일_렌탈_댓글' 테이블
CREATE TABLE ATTACHMENT_RENTAL_REPLY
( ATTACHMENT_RENTAL_REPLY_ID    NUMBER
, RENTAL_REPLY_ID               NUMBER          CONSTRAINT ARR_RENTAL_REPLY_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ARR_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ARR_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT ARR_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ARR_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT ARR_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_RENTAL_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_RENTAL_REPLY_ID)
);

--○ '첨부파일_이벤트' 테이블
CREATE TABLE ATTACHMENT_EVENT
( ATTACHMENT_EVENT_ID           NUMBER
, EVENT_ID                      NUMBER          CONSTRAINT AE_EVENT_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT AE_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT AE_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT AE_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT AE_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT AE_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_EVENT_ID_PK PRIMARY KEY(ATTACHMENT_EVENT_ID)
);

--○ '첨부파일_장비_등록' 테이블
CREATE TABLE ATTACHMENT_EQUIP_REG
( ATTACHMENT_EQUIP_REG_ID               NUMBER
, EQUIP_CODE                            NUMBER          CONSTRAINT AER_EQUIP_CODE_NN NOT NULL
, ATTACHMENT_NAME                       VARCHAR2(100)   CONSTRAINT AER_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH                       VARCHAR2(300)   CONSTRAINT AER_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE                       NUMBER          CONSTRAINT AER_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER                      NUMBER(2,0)     CONSTRAINT AER_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                          DATE            CONSTRAINT AER_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_EQUIP_REG_ID_PK PRIMARY KEY(ATTACHMENT_EQUIP_REG_ID)
);

--○ '장비_코드' 테이블
CREATE TABLE EQUIP_CODE
( EQUIP_CODE    NUMBER  CONSTRAINT EC_EQUIP_CODE_NN NOT NULL
, OWN_END_DATE  DATE
, CONSTRAINT EQUIP_CODE_PK PRIMARY KEY(EQUIP_CODE)
);

--○ '장비등록' 테이블
CREATE TABLE EQUIPMENT_REGISTRATION
( EQUIP_ID          NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT ER_EQUIP_CODE_NN NOT NULL
, USER_CODE         NUMBER          CONSTRAINT ER_USER_CODE_NN NOT NULL
, CATEGORY_ID       NUMBER          CONSTRAINT ER_CATEGORY_ID_NN NOT NULL
, EQUIP_NAME_ID     NUMBER          CONSTRAINT ER_EQUIP_NAME_ID_NN NOT NULL
, ORIGINAL_PRICE    NUMBER(9,0)     CONSTRAINT ER_ORIGINAL_PRICE_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT ER_CREATED_DATE_NN NOT NULL
, CONSTRAINT EQUIP_ID_PK PRIMARY KEY(EQUIP_ID)
);

--○ '장비명' 테이블
CREATE TABLE EQUIP_NAME
( EQUIP_NAME_ID     NUMBER
, BRAND_ID          NUMBER          CONSTRAINT EN_BRAND_ID_NN NOT NULL
, EQUIP_NAME        VARCHAR2(90)    CONSTRAINT EN_EQUIP_NAME_NN NOT NULL
, CONSTRAINT EQUIP_NAME_ID_PK PRIMARY KEY(EQUIP_NAME_ID)
);

--○ '스토렌_장비등록' 테이블
CREATE TABLE STOREN
( STOREN_ID         NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT STOREN_EQUIP_CODE_NN NOT NULL
, SIZE_ID           NUMBER          CONSTRAINT STOREN_SIZE_ID_NN NOT NULL
, STORE_MONTH       NUMBER(2,0)     CONSTRAINT STOREN_STORE_MONTH_NN NOT NULL
, STOREN_TITLE      VARCHAR2(90)
, RENT_CONTENT      VARCHAR2(1000)
, DAILY_RENT_PRICE  NUMBER(8,0)  
, CREATED_DATE      DATE            CONSTRAINT STOREN_CREATED_DATE_NN NOT NULL
, CONSTRAINT STOREN_ID_PK PRIMARY KEY(STOREN_ID)
);

--○ '보관_장비등록' 테이블
CREATE TABLE STORAGE
( STORAGE_ID        NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT STORAGE_EQUIP_CODE_NN NOT NULL
, SIZE_ID           NUMBER          CONSTRAINT STORAGE_SIZE_ID_NN NOT NULL       
, STORAGE_MONTH     NUMBER(2,0)     CONSTRAINT STORAGE_STORAGE_MONTH_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT STORAGE_CREATED_DATE_NN NOT NULL
, CONSTRAINT STORAGE_ID_PK PRIMARY KEY(STORAGE_ID)
);

--○ '렌탈_장비등록' 테이블
CREATE TABLE RENTAL
( RENTAL_ID             NUMBER
, EQUIP_CODE            NUMBER          CONSTRAINT REN_EQUIP_CODE_NN NOT NULL
, RENTAL_TITLE          VARCHAR2(90)    CONSTRAINT REN_RENTAL_TITLE_NN NOT NULL
, RENT_CONTENT          VARCHAR2(1000)  CONSTRAINT REN_RENT_CONTENT_NN NOT NULL
, RENT_START_WANT_DATE  DATE            CONSTRAINT REN_RENT_START_WANT_DATE_NN NOT NULL
, RENT_END_WANT_DATE    DATE            CONSTRAINT REN_RENT_END_WANT_DATE_NN NOT NULL
, DAILY_RENT_PRICE      NUMBER(8,0)     
, CREATED_DATE          DATE            CONSTRAINT REN_CREATED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_ID_PK PRIMARY KEY(RENTAL_ID)
);

--○ '카테고리' 테이블
CREATE TABLE CATEGORY
( CATEGORY_ID           NUMBER
, PARENT_CATEGORY_ID    NUMBER
, CATEGORY_NAME         VARCHAR2(30)    CONSTRAINT CAT_CATEGORY_NAME_NN NOT NULL
, CONSTRAINT CATEGORY_ID_PK PRIMARY KEY(CATEGORY_ID)
);

--○ '브랜드' 테이블
CREATE TABLE BRAND
( BRAND_ID      NUMBER
, BRAND_NAME    VARCHAR2(60)    CONSTRAINT BRA_BRAND_NAME_NN NOT NULL
, CONSTRAINT BRAND_ID_PK PRIMARY KEY(BRAND_ID)
);

--○ '사이즈' 테이블
CREATE TABLE EQUIP_SIZE
( EQUIP_SIZE_ID    NUMBER
, EQUIP_SIZE_NAME   VARCHAR2(10)    CONSTRAINT ES_EQUIP_SIZE_NAME_NN NOT NULL
, REQUIRED_SPACE    NUMBER(2,0)     CONSTRAINT ES_REQUIRED_SPACE_NN NOT NULL
, DAILY_STORAGE_FEE NUMBER(6,0)     CONSTRAINT ES_DAILY_STORAGE_FEE_NN NOT NULL
, CONSTRAINT EQUIP_SIZE_ID_PK PRIMARY KEY(EQUIP_SIZE_ID)
);

--○ '스토렌_매칭_신청' 테이블
CREATE TABLE STOREN_MATCHING_REQ
(
    STOREN_MATCHING_REQ_ID      NUMBER
,   RENTAL_START_DATE           DATE        CONSTRAINT SMR_RENTAL_START_DATE_NN NOT NULL
,   RENTAL_END_DATE             DATE        CONSTRAINT SMR_RENTAL_END_DATE_NN NOT NULL
,   REQUESTED_DATE              DATE        CONSTRAINT SMR_REQUESTED_DATE_NN NOT NULL
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SMR_INSPEC_RESULT_ACTION_ID_NN NOT NULL
,   STOREN_MATCHING_REQ_USER_ID NUMBER      CONSTRAINT SMR_STOREN_M_R_USER_ID_NN  NOT NULL
,   CONSTRAINT STOREN_MATCHING_REQ_ID_PK PRIMARY KEY(STOREN_MATCHING_REQ_ID)
);

--○ '스토렌_매칭_완료' 테이블
CREATE TABLE STOREN_MATCHING_DONE
(
    STOREN_MATCHING_DONE_ID     NUMBER
,   APPROVED_DATE               DATE        CONSTRAINT SMD_APPROVED_DATE_NN NOT NULL
,   STOREN_MATCHING_REQ_ID      NUMBER      CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_NN   NOT NULL
,   CONSTRAINT STOREN_MATCHING_DONE_ID_PK PRIMARY KEY(STOREN_MATCHING_DONE_ID)
);

--○ '렌탈_매칭_신청' 테이블
CREATE TABLE RENTAL_MATCHING_REQ
(
    RENTAL_MATCHING_REQ_ID          NUMBER
,   RENTAL_START_DATE               DATE        CONSTRAINT RMR_RENTAL_START_DATE_NN NOT NULL
,   RENTAL_END_DATE                 DATE        CONSTRAINT RMR_RENTAL_END_DATE_NN NOT NULL
,   REQUESTED_DATE                  DATE        CONSTRAINT RMR_REQUESTED_DATE_NN NOT NULL
,   RENTAL_ID                       NUMBER      CONSTRAINT RMR_RENTAL_ID_NN NOT NULL
,   RENTAL_MATCHING_REQUESTER_ID    NUMBER      CONSTRAINT RMR_RENTAL_M_R_ID_NN NOT NULL
,   CONSTRAINT RENTAL_MATCHING_REQ_ID_PK PRIMARY KEY(RENTAL_MATCHING_REQ_ID)
);

--○ '렌탈_매칭_완료' 테이블
CREATE TABLE RENTAL_MATCHING_DONE
(
    RENTAL_MATCHING_DONE_ID     NUMBER
,   APPROVED_DATE               DATE        CONSTRAINT RMD_APPROVED_DATE_NN NOT NULL
,   RENTAL_MATCHING_REQ_ID      NUMBER      CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_NN  NOT NULL
,   CONSTRAINT RENTAL_MATCHING_DONE_ID_PK PRIMARY KEY(RENTAL_MATCHING_DONE_ID)
);

--○ '렌탈_댓글' 테이블
CREATE TABLE RENTAL_REPLY
(
    RENTAL_REPLY_ID            NUMBER
,   RENTAL_REPLY_CONTENT       VARCHAR2(600)
,   CREATED_DATE               DATE             CONSTRAINT RRY_CREATED_DATE_NN NOT NULL
,   RENTAL_ROOT_REPLY_ID       NUMBER           CONSTRAINT RRY_RENTAL_ROOT_REPLY_ID_NN NOT NULL
,   RENTAL_ID                  NUMBER           CONSTRAINT RRY_RENTAL_ID_NN NOT NULL
,   USER_CODE                  NUMBER           CONSTRAINT RRY_USER_CODE_NN NOT NULL
,   CONSTRAINT RENTAL_REPLY_ID_PK PRIMARY KEY(RENTAL_REPLY_ID)
);

--○ '결제_방법' 테이블
CREATE TABLE PAY_METHOD
( PAY_METHOD_ID     NUMBER
, PAY_METHOD_NAME   VARCHAR2(30)    CONSTRAINT PAY_PAY_METHOD_NAME_NN NOT NULL
, CONSTRAINT PAY_METHOD_ID_PK PRIMARY KEY (PAY_METHOD_ID)
);

--○ '결제' 테이블
CREATE TABLE PAY
(
    PAY_ID                      NUMBER
,   PAY_METHOD_ID               NUMBER  CONSTRAINT PAY_PAY_METHOD_ID_NN NOT NULL
,   PAY_AMOUNT                  NUMBER  CONSTRAINT PAY_PAY_AMOUNT_NN NOT NULL
,   PAY_DATE                    DATE    CONSTRAINT PAY_PAY_DATE_NN NOT NULL
,   RENTAL_MATCHING_DONE_ID     NUMBER
,   STORAGE_ID                  NUMBER 
,   STOREN_ID                   NUMBER
,   STOREN_MATCHING_DONE_ID     NUMBER
,   CONSTRAINT PAY_ID_PK PRIMARY KEY (PAY_ID)
);

--○ '결제_취소' 테이블
CREATE TABLE PAY_CANCEL
(
    PAY_CANCEL_ID           NUMBER
,   CANCEL_DATE             DATE        CONSTRAINT PC_CANCEL_DATE_NN NOT NULL
,   PAY_ID                  NUMBER      CONSTRAINT PC_PAY_ID_NN NOT NULL
,   PAY_CANCEL_REASON_ID    NUMBER      CONSTRAINT PC_PAY_CANCEL_REASON_ID_NN   NOT NULL
,   CONSTRAINT PAY_CANCEL_ID_PK PRIMARY KEY (PAY_CANCEL_ID)
);

--○ '결제_취소사유' 테이블
CREATE TABLE PAY_CANCEL_REASON
(
    PAY_CANCEL_REASON_ID        NUMBER
,   PAY_CANCEL_REASON_NAME      VARCHAR2(60)    CONSTRAINT PCR_PAY_CANCEL_REASON_NAME_NN NOT NULL
,   CONSTRAINT PAY_CANCEL_REASON_ID_PK  PRIMARY KEY (PAY_CANCEL_REASON_ID)
);

--○ '플랫폼_배송' 테이블
CREATE TABLE PLATFORM_DELIVERY
(
    PLATFORM_DELIVERY_ID        NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT PD_DELIVERY_START_DATE_NN NOT NULL
,   DELIVERY_END_DATE           DATE
,   PAY_ID                      NUMBER
,   CONSTRAINT PLATFORM_DELIVERY_ID_PK  PRIMARY KEY (PLATFORM_DELIVERY_ID)
);

--○ '플랫폼_배송_반환' 테이블
CREATE TABLE PLATFORM_DELIVERY_RETURN
(
    PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   DELIVERY_START_DATE             DATE        CONSTRAINT PDR_DELIVERY_START_DATE_NN NOT NULL
,   DELIVERY_END_DATE               DATE
,   PLATFORM_DELIVERY_ID            NUMBER      CONSTRAINT PDR_PLATFORM_DELIVERY_ID_NN  NOT NULL
,   CONSTRAINT PLATFORM_DELIVERY_RETURN_ID_PK PRIMARY KEY (PLATFORM_DELIVERY_RETURN_ID)
);

--○ '거래자_택배' 테이블
CREATE TABLE USERS_DELIVERY
(
    USERS_DELIVERY_ID       NUMBER
,   CARRIER_NAME            VARCHAR2(60)
,   WAYBILL_NUMBER          NUMBER          CONSTRAINT UD_WAYBILL_NUMBER_NN NOT NULL
,   WAYBILL_ENTRY_DATE      DATE            CONSTRAINT UD_WAYBILL_ENTRY_DATE_NN NOT NULL
,   DELIVERY_END_DATE       DATE
,   PAY_ID                  NUMBER          CONSTRAINT UD_PAY_ID_NN NOT NULL
,   CONSTRAINT USERS_DELIVERY_ID_PK PRIMARY KEY (USERS_DELIVERY_ID)
);

--○ '거래자_택배_반환' 테이블
CREATE TABLE USERS_DELIVERY_RETURN
(
    USERS_DELIVERY_RETURN_ID        NUMBER
,   CARRIER_NAME                    VARCHAR2(60)
,   WAYBILL_NUMBER                  NUMBER          CONSTRAINT UDR_WAYBILL_NUMBER_NN NOT NULL
,   WAYBILL_ENTRY_DATE              DATE            CONSTRAINT UDR_WAYBILL_ENTRY_DATE_NN NOT NULL
,   DELIVERY_END_DATE               DATE
,   USERS_DELIVERY_ID               NUMBER          CONSTRAINT UDR_USERS_DELIVERY_ID_NN NOT NULL
,   CONSTRAINT USERS_DELIVERY_RETURN_ID_PK PRIMARY KEY (USERS_DELIVERY_RETURN_ID)
);

--○ '보관_최종_반환' 테이블
CREATE TABLE STORAGE_LAST_RETURN
(
    STORAGE_LAST_RETURN_ID      NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT SELR_DELI_START_DATE_NN   NOT NULL
,   DELIVERY_END_DATE           DATE
,   STORAGE_ID                  NUMBER
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SELR_INSPEC_R_ACTION_ID_NN NOT NULL
,   CONSTRAINT STORAGE_LAST_RETURN_ID_PK    PRIMARY KEY (STORAGE_LAST_RETURN_ID)
);

--○ '스토렌_최종_반환' 테이블 생성
CREATE TABLE STOREN_LAST_RETURN
(
    STOREN_LAST_RETURN_ID      NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT SNLR_DELI_START_DATE_NN   NOT NULL
,   DELIVERY_END_DATE           DATE
,   STOREN_ID                   NUMBER
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SNLR_INSPEC_R_ACTION_ID_NN   NOT NULL
,   CONSTRAINT STOREN_LAST_RETURN_ID_PK    PRIMARY KEY (STOREN_LAST_RETURN_ID)
);

--○ '검수_리스트' 테이블
CREATE TABLE INSPEC_LIST
(
    INSPEC_LIST_ID                  NUMBER
,   INSPEC_COMMENT                  VARCHAR2(300)
,   INSPECTION_DATE                 DATE            CONSTRAINT IL_INSPECTION_DATE_NN   NOT NULL
,   CATE_INSPEC_ID                  NUMBER
,   PLATFORM_DELIVERY_ID            NUMBER
,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   ADMIN_ID                        VARCHAR2(20)    CONSTRAINT IL_ADMIN_ID_NN   NOT NULL
,   INSPEC_GRADE_ID                 NUMBER          CONSTRAINT IL_INSPEC_GRADE_ID_NN    NOT NULL
,   CONSTRAINT INSPEC_LIST_ID_PK    PRIMARY KEY (INSPEC_LIST_ID)
);

--○ '카테_검수항목' 테이블
CREATE TABLE CATE_INSPEC
(
    CATE_INSPEC_ID      NUMBER
,   CATEGORY_ID         NUMBER      CONSTRAINT CI_CATEGORY_ID_NN    NOT NULL
,   INSPEC_ITEM_ID      NUMBER      CONSTRAINT CI_INSPEC_ITEM_ID_NN NOT NULL
,   CONSTRAINT CATE_INSPEC_ID_PK    PRIMARY KEY (CATE_INSPEC_ID)
);

--○ '검수항목' 테이블 생성
CREATE TABLE INSPEC_ITEM
(
    INSPEC_ITEM_ID      NUMBER
,   INSPEC_ITEM_NAME    VARCHAR2(60)    CONSTRAINT II_INSPEC_ITEM_NAME_NN   NOT NULL
,   INSPEC_ITEM_DESC    VARCHAR2(300)
,   CONSTRAINT INSPEC_ITEM_ID_PK    PRIMARY KEY (INSPEC_ITEM_ID)
);

--○ '검수항목_등급' 테이블
CREATE TABLE INSPEC_GRADE
(
    INSPEC_GRADE_ID         NUMBER
,   INSPEC_GRADE_NAME       CHAR(3)     CONSTRAINT IG_INSPEC_GRADE_NAME_NN  NOT NULL
,   INSPEC_GRADE_DEDUCTION  NUMBER(2,0) CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_NN NOT NULL
,   CONSTRAINT INSPEC_GRADE_ID_PK   PRIMARY KEY (INSPEC_GRADE_ID)
);

--○ '검수_결과' 테이블
CREATE TABLE INSPEC_RESULT
(
    INSPEC_RESULT_ID                NUMBER
,   PLATFORM_DELIVERY_ID            NUMBER
,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   EQUIP_GRADE_ID                  NUMBER      CONSTRAINT IR_EQUIP_GRADE_ID_NN NOT NULL
,   CONSTRAINT INSPEC_RESULT_ID_PK  PRIMARY KEY (INSPEC_RESULT_ID)
);

--○ '장비_등급' 테이블
CREATE TABLE EQUIP_GRADE
(
    EQUIP_GRADE_ID      NUMBER
,   EQUIP_GRADE_NAME    CHAR(1)             CONSTRAINT EG_EQUIP_GRADE_NAME_NN NOT NULL
,   EQUIP_GRADE_DESC    VARCHAR2(90)
,   MIN_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MIN_DEDUCTION_NN NOT NULL
,   MAX_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MAX_DEDUCTION_NN NOT NULL
,   CONSTRAINT EQUIP_GRADE_ID_PK PRIMARY KEY (EQUIP_GRADE_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION
(
    INSPEC_RESULT_ACTION_ID         NUMBER
,   COMPLETED_DATE                  DATE        CONSTRAINT IRA_COMPLETED_DATE_NN NOT NULL
,   INSPEC_RESULT_ID                NUMBER      CONSTRAINT IRA_INSPEC_R_ID_NN  NOT NULL
,   INSPEC_RESULT_ACTION_TYPE_ID    NUMBER      CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_NN  NOT NULL
,   CONSTRAINT  INSPEC_R_ACTION_ID_PK  PRIMARY KEY (INSPEC_RESULT_ACTION_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION_TYPE
(
    INSPEC_RESULT_ACTION_TYPE_ID        NUMBER
,   INSPEC_RESULT_ACTION_TYPE_NAME      VARCHAR2(20)        CONSTRAINT IRAT_INSPEC_R_A_TYPE_NAME_NN   NOT NULL
,   CONSTRAINT INSPEC_R_A_TYPE_ID_PK PRIMARY KEY (INSPEC_RESULT_ACTION_TYPE_ID)
);

--○ '사용자_문제_유형' 테이블
CREATE TABLE RENTER_PROBLEM_TYPE
(
    RENTER_PROBLEM_TYPE_ID      NUMBER
,   RENTER_PROBLEM_TYPE_NAME    VARCHAR2(30)        CONSTRAINT RPT_RENTER_P_TYPE_NAME_NN  NOT NULL
,   CONSTRAINT RENTER_PROBLEM_TYPE_ID_PK   PRIMARY KEY (RENTER_PROBLEM_TYPE_ID)
);

--○ '사용자_문제_발생' 테이블
CREATE TABLE RENTER_PROBLEM
(
    RENTER_PROBLEM_ID       NUMBER
,   PROBLEM_REPORTED_DATE   DATE        CONSTRAINT RP_PROBLEM_R_DATE_NN NOT NULL
,   INSPEC_RESULT_ACTION_ID NUMBER      CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_NN    NOT NULL
,   RENTER_PROBLEM_TYPE_ID  NUMBER      CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_NN     NOT NULL
,   CONSTRAINT RENTER_PROBLEM_ID_PK PRIMARY KEY (RENTER_PROBLEM_ID)
);

--○ '사용자_문제_발생_분실' 테이블
CREATE TABLE RENTER_PROBLEM_LOST
(
    RENTER_PROBLEM_LOST_ID  NUMBER
,   STOREN_MATCHING_DONE_ID NUMBER  CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_NN NOT NULL
,   PROBLEM_REPORTED_DATE   DATE    CONSTRAINT RPL_PROBLEM_REPORTED_DATE_NN   NOT NULL
,   CONSTRAINT RENTER_PROBLEM_LOST_ID_PK PRIMARY KEY (RENTER_PROBLEM_LOST_ID)
);

--○ '사용자_추가_결제' 테이블
CREATE TABLE RENTER_ADD_PAY
(
    RENTER_ADD_PAY_ID       NUMBER
,   RENTER_PROBLEM_ID       NUMBER
,   RENTER_PROBLEM_LOST_ID  NUMBER
,   RENTER_ADD_PAY_AMOUNT   NUMBER(9,0)     CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_NN NOT NULL
,   PAY_DATE                DATE            CONSTRAINT RAP_PAY_DATE_NN NOT NULL
,   CONSTRAINT RENTER_ADD_PAY_ID_PK PRIMARY KEY (RENTER_ADD_PAY_ID)
);






-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--■■■ 제약조건 추가 ■■■--

--○ '말머리' 테이블
ALTER TABLE POST_LABEL
ADD CONSTRAINT PL_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
REFERENCES BOARD(BOARD_ID);



--○ '캠핑일지' 테이블
ALTER TABLE DIARY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE DIARY
ADD CONSTRAINT DIA_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);



--○ '인기글_지정_로그' 테이블
ALTER TABLE HOT_POST_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 인기글 지정 로그 함께 삭제)
ALTER TABLE HOT_POST_LOG
ADD CONSTRAINT HPL_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '추천' 테이블
ALTER TABLE RECOMMEND
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RECOMMEND
ADD CONSTRAINT REC_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (한 게시물당 한개 ID로 1번만 추천 가능)
ALTER TABLE RECOMMEND
ADD CONSTRAINT REC_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '댓글' 테이블
ALTER TABLE REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY
ADD CONSTRAINT REP_ROOT_REPLY_ID_FK FOREIGN KEY(ROOT_REPLY_ID)
REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY
ADD CONSTRAINT REP_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 댓글 함께 삭제)
ALTER TABLE REPLY
ADD CONSTRAINT REP_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '북마크' 테이블
ALTER TABLE BOOKMARK
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID);

-- 연쇄 삭제 (게시글 삭제 시 북마크 함께 삭제)
ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '이벤트' 테이블
ALTER TABLE EVENT
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT
ADD CONSTRAINT EVE_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

-- 일자 CK
ALTER TABLE EVENT
ADD CONSTRAINT EVE_START_DATE_END_DATE_CK
CHECK (EVENT_START_DATE < EVENT_END_DATE);



--○ '이벤트_응모' 테이블
ALTER TABLE EVENT_ENTRY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
REFERENCES EVENT(EVENT_ID);

ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (한 유저가 한 이벤트에 응모 1회만 가능)
ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_USER_CODE_EVENT_ID_UK UNIQUE (USER_CODE, EVENT_ID);

-- CK (이벤트 응모 위한 최소 포인트 0 이상)
ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_EVENT_ENTRY_POINT_CK
CHECK (EVENT_ENTRY_POINT >= 0);




--○ '이벤트_당첨' 테이블
ALTER TABLE EVENT_WIN
ADD CONSTRAINT EW_EVENT_ENTRY_ID_FK FOREIGN KEY(EVENT_ENTRY_ID)
REFERENCES EVENT_ENTRY(EVENT_ENTRY_ID);




--○ '알림' 테이블
ALTER TABLE NOTI
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI
ADD CONSTRAINT NOT_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE NOTI
ADD CONSTRAINT NOT_NOTI_TYPE_ID_FK FOREIGN KEY(NOTI_TYPE_ID)
REFERENCES NOTI_TYPE(NOTI_TYPE_ID);



--○ '알림_확인_로그' 테이블
ALTER TABLE NOTI_CHECK_LOG
MODIFY CHECKED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI_CHECK_LOG
ADD CONSTRAINT NCL_NOTI_ID_FK FOREIGN KEY(NOTI_ID)
REFERENCES NOTI(NOTI_ID);



--○ '통계' 테이블
ALTER TABLE STATISTICS
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_STAT_TYPE_ID_FK FOREIGN KEY(STAT_TYPE_ID)
REFERENCES STAT_TYPE(STAT_TYPE_ID);

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_STAT_PERIOD_ID_FK FOREIGN KEY(STAT_PERIOD_ID)
REFERENCES STAT_PERIOD(STAT_PERIOD_ID);



--○ '게시판' 테이블
ALTER TABLE BOARD
ADD CONSTRAINT BOA_BOARD_CATE_ID_FK FOREIGN KEY(BOARD_CATE_ID)
REFERENCES BOARD_CATEGORY(BOARD_CATE_ID);

ALTER TABLE BOARD
ADD CONSTRAINT BOA_WRITE_GRADE_ID_FK FOREIGN KEY(WRITE_GRADE_ID)
REFERENCES WRITE_GRADE(WRITE_GRADE_ID);



--○ '게시물' 테이블
ALTER TABLE POST
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST
ADD CONSTRAINT POS_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POST
ADD CONSTRAINT POS_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
REFERENCES BOARD(BOARD_ID);

ALTER TABLE POST
ADD CONSTRAINT POS_POST_LABEL_ID_FK FOREIGN KEY(POST_LABEL_ID)
REFERENCES POST_LABEL(POST_LABEL_ID);



--○ '게시물_조회_로그' 테이블
ALTER TABLE POST_VIEW_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_VIEW_LOG
ADD CONSTRAINT PVL_USER_CODE_ID_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 조회수로그 함께 삭제)
ALTER TABLE POST_VIEW_LOG
ADD CONSTRAINT PVL_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '게시글_신고_접수' 테이블
ALTER TABLE POST_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT
ADD CONSTRAINT PR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 게시물에 대해 한명이 1번의 신고만 가능)
ALTER TABLE POST_REPORT
ADD CONSTRAINT PR_REPORTER_ID_POST_ID_UK UNIQUE (REPORTER_ID, POST_ID);



--○ '게시글_신고_처리' 테이블
ALTER TABLE POST_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_POST_REPORT_ID_FK FOREIGN KEY(POST_REPORT_ID)
REFERENCES POST_REPORT(POST_REPORT_ID);

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '댓글_신고_접수' 테이블
ALTER TABLE REPLY_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORTER_ID_REPLY_ID_UK UNIQUE (REPORTER_ID, REPLY_ID);



--○ '댓글_신고_처리' 테이블
ALTER TABLE REPLY_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_REPLY_REPORT_ID_FK FOREIGN KEY(REPLY_REPORT_ID)
REFERENCES REPLY_REPORT(REPLY_REPORT_ID);

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '렌탈_댓글_신고_접수' 테이블
ALTER TABLE RENTAL_REPLY_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 렌탈 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR__REPORTER_ID_RR_ID_UK UNIQUE (REPORTER_ID, RENTAL_REPLY_ID);



--○ '렌탈_댓글_신고_처리' 테이블
ALTER TABLE RENTAL_REPLY_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_RENTAL_REPLY_REPORT_ID_FK FOREIGN KEY(RENTAL_REPLY_REPORT_ID)
REFERENCES RENTAL_REPLY_REPORT(RENTAL_REPLY_REPORT_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '발행_쿠폰' 테이블
ALTER TABLE ISSUED_COUPON
MODIFY ISSUED_DATE DEFAULT SYSDATE;

ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_TYPE_ID_FK FOREIGN KEY(COUPON_TYPE_ID)
REFERENCES COUPON_TYPE(COUPON_TYPE_ID);

-- CK (쿠폰 할인율 1~100% 사이)
ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_DISCOUNT_CK CHECK(COUPON_DISCOUNT BETWEEN 1 AND 100);

-- CK (쿠폰 유효 개월 수 1~12개월 사이)
ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_MONTH_CK CHECK(COUPON_MONTH BETWEEN 1 AND 12);



--○ '보유_쿠폰' 테이블
ALTER TABLE OWNED_COUPON
ADD CONSTRAINT OC_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE OWNED_COUPON
ADD CONSTRAINT OC_ISSUED_COUPON_ID_FK FOREIGN KEY(ISSUED_COUPON_ID)
REFERENCES ISSUED_COUPON(ISSUED_COUPON_ID);



--○ '포인트_변동_로그' 테이블
ALTER TABLE POINT_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POINT_LOG
ADD CONSTRAINT PL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POINT_LOG
ADD CONSTRAINT PL_POINT_CHANGE_TYPE_ID_FK FOREIGN KEY(POINT_CHANGE_TYPE_ID)
REFERENCES POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID);



--○ '회원_등급' 테이블
ALTER TABLE RANK
ADD CONSTRAINT RAN_MIN_POINT_CK CHECK(MIN_POINT >= 0 AND MIN_POINT < MAX_POINT);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_POINT_CK CHECK(MAX_POINT >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MIN_CREDIT_CK CHECK(MIN_CREDIT >= 0 AND MIN_CREDIT < MAX_CREDIT);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_CREDIT_CK CHECK(MAX_CREDIT >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_NICKNAME_CHANGE_CK CHECK(MAX_NICKNAME_CHANGE >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_DISCOUNT_COUPON_QTY_CK CHECK(DISCOUNT_COUPON_QTY >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_BOOST_QTY_CK CHECK(BOOST_QTY >= 0);




--○ '회원_등급' 테이블
ALTER TABLE BOOST_LOG
MODIFY BOOST_LOG_DATE DEFAULT SYSDATE;

ALTER TABLE BOOST_LOG
ADD CONSTRAINT BL_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE BOOST_LOG
ADD CONSTRAINT BL_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID);




--○ '주소_로그' 테이블
ALTER TABLE ADDRESS_LOG
MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE ADDRESS_LOG
ADD CONSTRAINT AL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);



--○ '찜' 테이블
ALTER TABLE WISHLIST
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

-- 연쇄 삭제 (렌탈 글 삭제 시 찜 함께 삭제)
ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

-- UK (한 스토렌 글은 1번만 찜 가능)
ALTER TABLE  WISHLIST
ADD CONSTRAINT WIS_USER_CODE_STOREN_ID_UK UNIQUE(USER_CODE, STOREN_ID);

-- UK (한 렌탈 글은 1번만 찜 가능)
ALTER TABLE  WISHLIST
ADD CONSTRAINT WIS_USER_CODE_RENTAL_ID_UK UNIQUE(USER_CODE, RENTAL_ID);



--○ '만족도_평가_로그' 테이블
ALTER TABLE SATISFACTION_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_REVIEWER_ID_FK FOREIGN KEY(REVIEWER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_REVIEWEE_ID_FK FOREIGN KEY(REVIEWEE_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (만족도 점수는 1~5점 사이)
ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_SATIS_SCORE_CK CHECK(SATIS_SCORE BETWEEN 1 AND 5);



--○ '닉네임_로그' 테이블
ALTER TABLE NICKNAME_LOG
MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE NICKNAME_LOG
ADD CONSTRAINT NL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (유저 닉네임 고유해야함)
ALTER TABLE NICKNAME_LOG
ADD CONSTRAINT NL_NICKNAME_UK UNIQUE(NICKNAME);



--○ '회원_코드' 테이블
ALTER TABLE USERS
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE USERS
ADD CONSTRAINT USE_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE USERS
ADD CONSTRAINT USE_SIGNUP_TYPE_ID_FK FOREIGN KEY(SIGNUP_TYPE_ID)
REFERENCES SIGNUP_TYPE(SIGNUP_TYPE_ID);

-- UK (유저 이메일주소 고유해야함)
ALTER TABLE USERS
ADD CONSTRAINT USE_USER_EMAIL_UK UNIQUE(USER_EMAIL);



--○ 관리자 등록 테이블
ALTER TABLE ADMINS
ADD CONSTRAINT ADM_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE ADMINS
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- UK (유저 닉네임 고유해야함)
ALTER TABLE ADMINS
ADD CONSTRAINT ADM_ADMIN_NICKNAME_UK UNIQUE(ADMIN_NICKNAME);



--○ '활동정지_회원' 테이블
ALTER TABLE SUSPENDED_USER
MODIFY SUSPENDED_START_DATE DEFAULT SYSDATE;

ALTER TABLE SUSPENDED_USER
ADD CONSTRAINT SU_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SUSPENDED_USER
ADD CONSTRAINT SU_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);



--○ '첨부파일_게시물' 테이블
ALTER TABLE ATTACHMENT_POST
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_POST
ADD CONSTRAINT AP_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '첨부파일_댓글' 테이블
ALTER TABLE ATTACHMENT_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_REPLY
ADD CONSTRAINT AR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
REFERENCES REPLY(REPLY_ID)
ON DELETE CASCADE;



--○ '첨부파일_캠핑일지' 테이블
ALTER TABLE ATTACHMENT_CAMPING_DIARY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (캠핑일지 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_CAMPING_DIARY
ADD CONSTRAINT ACD_DIARY_ID_FK FOREIGN KEY(DIARY_ID)
REFERENCES DIARY(DIARY_ID)
ON DELETE CASCADE;



--○ '첨부파일_렌탈_댓글' 테이블
ALTER TABLE ATTACHMENT_RENTAL_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈_댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_RENTAL_REPLY
ADD CONSTRAINT ARR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID)
ON DELETE CASCADE;



--○ '첨부파일_이벤트' 테이블
ALTER TABLE ATTACHMENT_EVENT
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (이벤트 글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EVENT
ADD CONSTRAINT AE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
REFERENCES EVENT(EVENT_ID)
ON DELETE CASCADE;



--○ '첨부파일_장비_등록' 테이블
ALTER TABLE ATTACHMENT_EQUIP_REG
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (내 장비 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EQUIP_REG
ADD CONSTRAINT AER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE)
ON DELETE CASCADE;




--○ '장비등록' 테이블
ALTER TABLE EQUIPMENT_REGISTRATION
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_EQUIP_NAME_ID_FK FOREIGN KEY(EQUIP_NAME_ID)
REFERENCES EQUIP_NAME(EQUIP_NAME_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (신품가격 >= 0)
ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_ORIGINAL_PRICE_CK CHECK(ORIGINAL_PRICE >= 0);



--○ '장비명' 테이블
ALTER TABLE EQUIP_NAME
ADD CONSTRAINT EN_BRAND_ID_FK FOREIGN KEY(BRAND_ID)
REFERENCES BRAND(BRAND_ID);

-- 동일 브랜드 + 동일 장비명 설정 불가
ALTER TABLE EQUIP_NAME
ADD CONSTRAINT EN_EQUIP_NAME_BRAND_ID_UK UNIQUE(EQUIP_NAME, BRAND_ID);



--○ '스토렌_장비등록' 테이블
ALTER TABLE STOREN
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN
ADD CONSTRAINT STOREN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STOREN
ADD CONSTRAINT STOREN_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
ADD CONSTRAINT STOREN_STORE_MONTH_CK CHECK(STORE_MONTH BETWEEN 1 AND 12);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
ADD CONSTRAINT STOREN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);



--○ '보관_장비등록' 테이블
ALTER TABLE STORAGE
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이이)
ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_STORAGE_MONTH_CK CHECK(STORAGE_MONTH BETWEEN 1 AND 12);



--○ '렌탈_장비등록' 테이블
ALTER TABLE RENTAL
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL
ADD CONSTRAINT REN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (시작일자가 종료일보다 빨라야 함)
ALTER TABLE RENTAL
ADD CONSTRAINT REN_RENT_END_WANT_DATE_CK CHECK(RENT_END_WANT_DATE > RENT_START_WANT_DATE);

-- CK (1일 렌탈가격은 0 이상)
ALTER TABLE RENTAL
ADD CONSTRAINT REN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);



--○ '카테고리' 테이블
ALTER TABLE CATEGORY
ADD CONSTRAINT CAT_PARENT_CATEGORY_ID_FK FOREIGN KEY(PARENT_CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

-- UK (카테고리명명 고유해야함)
ALTER TABLE CATEGORY
ADD CONSTRAINT CAT_CATEGORY_NAME_UK UNIQUE(CATEGORY_NAME);



--○ '브랜드' 테이블
-- UK (브랜드명 고유해야함)
ALTER TABLE BRAND
ADD CONSTRAINT BRA_BRAND_NAME_UK UNIQUE(BRAND_NAME);



--○ '스토렌_매칭_신청' 테이블
ALTER TABLE STOREN_MATCHING_REQ
MODIFY REQUESTED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY (INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_STN_M_REQ_USER_ID_FK FOREIGN KEY (STOREN_MATCHING_REQ_USER_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '스토렌_매칭_완료' 테이블
ALTER TABLE STOREN_MATCHING_DONE
MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_DONE
ADD CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_FK FOREIGN KEY(STOREN_MATCHING_REQ_ID)
REFERENCES STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID);



--○ '렌탈_매칭_신청' 테이블
ALTER TABLE RENTAL_MATCHING_REQ
MODIFY REQUESTED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 매칭 신청 함께 삭제)
ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_RENTAL_M_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQUESTER_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '렌탈_매칭_완료' 테이블
ALTER TABLE RENTAL_MATCHING_DONE
MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_MATCHING_DONE
ADD CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQ_ID)
REFERENCES RENTAL_MATCHING_REQ(RENTAL_MATCHING_REQ_ID);



--○ '렌탈_댓글' 테이블
ALTER TABLE RENTAL_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 댓글 함께 삭제)
ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_RENTAL_ID_FK FOREIGN KEY (RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_RENTAL_ROOT_REPLY_ID_FK FOREIGN KEY(RENTAL_ROOT_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);



--○ '결제' 테이블
ALTER TABLE PAY
MODIFY PAY_DATE DEFAULT SYSDATE;

ALTER TABLE PAY
ADD CONSTRAINT PAY_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_PAY_METHOD_ID_FK FOREIGN KEY(PAY_METHOD_ID)
REFERENCES PAY_METHOD(PAY_METHOD_ID);

-- CK (결제금액은 0 이상)
ALTER TABLE PAY
ADD CONSTRAINT PAY_AMOUNT_CK CHECK(PAY_AMOUNT >= 0);



--○ '결제_취소' 테이블
ALTER TABLE PAY_CANCEL
MODIFY CANCEL_DATE DEFAULT SYSDATE;

ALTER TABLE PAY_CANCEL
ADD CONSTRAINT PC_PAY_ID_FK FOREIGN KEY(PAY_ID)
REFERENCES PAY(PAY_ID);

ALTER TABLE PAY_CANCEL
ADD CONSTRAINT PC_PAY_CANCEL_REASON_ID_FK FOREIGN KEY(PAY_CANCEL_REASON_ID)
REFERENCES PAY_CANCEL_REASON(PAY_CANCEL_REASON_ID);



--○ '플랫폼_배송' 테이블
ALTER TABLE PLATFORM_DELIVERY
ADD CONSTRAINT PD_PAY_ID_FK FOREIGN KEY(PAY_ID)
REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY
ADD CONSTRAINT PD_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '플랫폼_배송_반환' 테이블
ALTER TABLE PLATFORM_DELIVERY_RETURN
ADD CONSTRAINT PDR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY_RETURN
ADD CONSTRAINT PDR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '거래자_택배' 테이블
ALTER TABLE USERS_DELIVERY
ADD CONSTRAINT UD_PAY_ID_FK FOREIGN KEY (PAY_ID)
REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY
ADD CONSTRAINT UD_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '거래자_택배_반환' 테이블
ALTER TABLE USERS_DELIVERY_RETURN
ADD CONSTRAINT UDR_USERS_DELIVERY_ID_FK FOREIGN KEY(USERS_DELIVERY_ID)
REFERENCES USERS_DELIVERY(USERS_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY_RETURN
ADD CONSTRAINT UDR_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '보관_최종_반환' 테이블
ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '스토렌_최종_반환' 테이블 생성
ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT SLR_STOREN_ID_FK FOREIGN KEY (STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT STNLR_INSPEC_R_ACTION_ID_FK FOREIGN KEY
(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT STNLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);




--○ '검수_리스트' 테이블
ALTER TABLE INSPEC_LIST
MODIFY INSPECTION_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_CATE_INSPEC_ID_FK FOREIGN KEY(CATE_INSPEC_ID)
REFERENCES CATE_INSPEC(CATE_INSPEC_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_ADMIN_ID_FK FOREIGN KEY (ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_INSPEC_GRADE_ID_FK FOREIGN KEY (INSPEC_GRADE_ID)
REFERENCES INSPEC_GRADE(INSPEC_GRADE_ID);




--○ '카테_검수항목' 테이블
ALTER TABLE CATE_INSPEC
ADD CONSTRAINT CI_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE CATE_INSPEC
ADD CONSTRAINT CI_INSPEC_ITEM_ID_FK FOREIGN KEY (INSPEC_ITEM_ID)
REFERENCES INSPEC_ITEM(INSPEC_ITEM_ID);



--○ '검수항목_등급' 테이블 생성
-- CK(감점 >= 0)
ALTER TABLE INSPEC_GRADE
ADD CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_CK CHECK(INSPEC_GRADE_DEDUCTION >= 0);




--○ '검수_결과' 테이블
ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_EQUIP_GRADE_ID_FK FOREIGN KEY(EQUIP_GRADE_ID)
REFERENCES EQUIP_GRADE(EQUIP_GRADE_ID);



--○ '검수_결과_처리_유형' 테이블
ALTER TABLE INSPEC_RESULT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_RESULT_ACTION
ADD CONSTRAINT IRA_INSPEC_RESULT_ID_FK FOREIGN KEY(INSPEC_RESULT_ID)
REFERENCES INSPEC_RESULT(INSPEC_RESULT_ID);

ALTER TABLE INSPEC_RESULT_ACTION
ADD CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_TYPE_ID)
REFERENCES INSPEC_RESULT_ACTION_TYPE(INSPEC_RESULT_ACTION_TYPE_ID);



--○ '사용자_문제_발생' 테이블
ALTER TABLE RENTER_PROBLEM
MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM
ADD CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

ALTER TABLE RENTER_PROBLEM
ADD CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_FK FOREIGN KEY(RENTER_PROBLEM_TYPE_ID)
REFERENCES RENTER_PROBLEM_TYPE(RENTER_PROBLEM_TYPE_ID);



--○ '사용자_문제_발생_분실' 테이블
ALTER TABLE RENTER_PROBLEM_LOST
MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM_LOST
ADD CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);



--○ '사용자_추가_결제' 테이블
ALTER TABLE RENTER_ADD_PAY
MODIFY PAY_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_PROBLEM_ID_FK FOREIGN KEY (RENTER_PROBLEM_ID)
REFERENCES RENTER_PROBLEM(RENTER_PROBLEM_ID);

ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_PROBLEM_LOST_ID_FK FOREIGN KEY (RENTER_PROBLEM_LOST_ID)
REFERENCES RENTER_PROBLEM_LOST(RENTER_PROBLEM_LOST_ID);

-- CK (추가결제금액 >= 0)
ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_CK CHECK (RENTER_ADD_PAY_AMOUNT >= 0);






제훈작업 0328 (주요통계뷰,회원 상세정보 뷰)
=====================================================================================================

/*
      ████████
     ██▓▓▓▓▓▓██    Lv.0 박제훈
     █▓▓▓██▓▓▓█
     █▓▓▓██▓▓▓█
     █▓██████▓█
      █▓▓▓▓▓▓█
    ██▒▒▒▒▒▒▒▒██
   █▒▒██▒▒▒▒██▒▒█
   █▒▒▒▒████▒▒▒▒█
   █▒▒▒▒▒▒▒▒▒▒▒▒█
   █▒▒████████▒▒█
    ███▓▓██▓▓███
    █▓▓▓▓██▓▓▓▓█
    ███████████
    ███████████
     █▓▓█  █▓▓█
    ██▓▓██ ██▓▓██
   ██▓▓███ ███▓▓██
  ██▓▓██     ██▓▓██
  █████       █████

 */




--○ 주요 통계 뷰
CREATE OR REPLACE VIEW V_ALL_USER_VIEW
AS
SELECT VTW.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID, 검수_결과_처리일, 게시글_신고접수_ID, 게시글_신고일, 댓글_신고_접수_ID, 댓글_신고일, 렌탈_댓글_신고_접수_ID, 렌탈_댓글_신고일
        , U.USER_ID AS 회원_ID
FROM V_TODAY_USER_WARRING VTW JOIN USERS U
ON VTW.회원_코드 = U.USER_CODE;
-- 일일 신규 사용자 수,(USER_COUNT)
-- 일일 거래(결제) 건수 및 금액(TODAY_RICE_ALL)
-- 일일 검수 건수(IR_STOREN), 진행 중인 배송현황(스토렌,보관)(PDR_STOREN)
-- 신규 신고 건수 (V_TODAY_WARRING)
-- , 활성 사용자 수, 회원 수(USER_CODE) , 사유별 탈퇴 회원 수(USER_CODE)


------------------------------------------------------------------------------------------------------------------------
-- 단계별 뷰문 작성


DROP VIEW USER_COUNT;
-- 회원_가입 = 회원_코드
CREATE OR REPLACE VIEW USER_COUNT
AS
SELECT UC.USER_CODE AS 회원_코드,US.CREATED_DATE,US.USER_ID AS 회원_ID
FROM USERS US JOIN USER_CODE UC
ON US.USER_CODE = UC.USER_CODE;



--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액
CREATE OR REPLACE VIEW TODAY_USER_SUM
AS
SELECT TPA.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자
        ,UC.CREATED_DATE AS 회원가입일
FROM USER_COUNT UC JOIN TODAY_PRICE_ALL TPA
ON UC.회원_코드 = TPA.회원_코드;


DROP VIEW V_TODAY_USER_RESTORE;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수
CREATE OR REPLACE VIEW V_TODAY_USER_RESTORE
AS
SELECT TUS.회원_코드, TUS.스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일
        ,IST.검수_결과_ID, IST.검수_결과_처리일
FROM IRA_STOREN IST JOIN TODAY_USER_SUM TUS
ON IST.회원_코드 = TUS.회원_코드;


DROP VIEW V_TODAY_USER_RESOTR_DELIVERY;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수 + 진행중인 배송 현황
CREATE OR REPLACE VIEW V_TODAY_USER_RESOTR_DELIVERY
AS
SELECT VT.회원_코드, VT.스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID,검수_결과_처리일
        ,PS.배송_시작일,PS.배송_종료일
FROM V_TODAY_USER_RESTORE VT JOIN PDR_STOREN PS
ON VT.회원_코드 = PS.회원_코드;


DROP VIEW V_TODAY_USER_RESTORE;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수 + 신규 신고건수
CREATE OR REPLACE VIEW V_TODAY_USER_WARRING
AS
SELECT VT.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID, 검수_결과_처리일
        ,VTW.게시글_신고접수_ID, VTW.게시글_신고일,VTW.댓글_신고_접수_ID,VTW.댓글_신고일,VTW.렌탈_댓글_신고_접수_ID,VTW.렌탈_댓글_신고일
FROM V_TODAY_USER_RESTORE VT JOIN V_TODAY_WARRING VTW
ON VT.회원_코드 = VTW.회원코드;




-- 일일 신규 사용자 수 + 장비_코드
CREATE OR REPLACE VIEW T_PRICE
AS
SELECT UC.회원_코드, ER.EQUIP_CODE AS 장비등록_장비코드
FROM USER_COUNT UC JOIN EQUIPMENT_REGISTRATION ER
                        ON UC.회원_코드 = ER.USER_CODE;

-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록
CREATE OR REPLACE VIEW USER_STOREN
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, ST.STOREN_ID AS 스토렌_ID
FROM T_PRICE TP JOIN STOREN ST
                     ON TP.장비등록_장비코드 = ST.EQUIP_CODE;


-- 일일 신규 사용자 수 + 장비_코드 + 보관_장비등록
CREATE OR REPLACE VIEW USER_STORAGE
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, SR.STORAGE_ID AS 보관_ID
FROM T_PRICE TP JOIN STORAGE SR
                     ON TP.장비등록_장비코드 = SR.EQUIP_CODE;


-- 일일 신규 사용자 수 + 장비_코드 + 렌탈_장비등록
CREATE OR REPLACE VIEW USER_RENTAL
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, RT.RENTAL_ID AS 렌탈_ID
FROM T_PRICE TP JOIN RENTAL RT
                     ON TP.장비등록_장비코드 = RT.EQUIP_CODE;







-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 (스토렌 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_STOREN
AS
SELECT US.회원_코드,US.장비등록_장비코드,US.스토렌_ID,PAY_AMOUNT AS 결제_금액, PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_STOREN US JOIN PAY P
                         ON US.스토렌_ID = P.STOREN_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 보관_장비등록 + 결제 (보관 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_STORAGE
AS
SELECT US.보관_ID, US.장비등록_장비코드, US.회원_코드, P.PAY_AMOUNT AS 결제_금액, P.PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_STORAGE US JOIN PAY P
                          ON US.보관_ID = P.PAY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 렌탈_장비등록 + 결제 (렌탈 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_RENTAL
AS
SELECT UR.회원_코드, UR.장비등록_장비코드, UR.렌탈_ID, P.PAY_AMOUNT AS 결제_금액, P.PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_RENTAL UR JOIN PAY P
ON UR.렌탈_ID = P.PAY_ID;




-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송
CREATE OR REPLACE VIEW PD_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, PLATFORM_DELIVERY_ID AS 플랫폼_배송_ID
     ,DELIVERY_START_DATE AS 배송_시작일, DELIVERY_END_DATE AS 배송_종료일
FROM PAY_STOREN PS JOIN PLATFORM_DELIVERY PD
                        ON PS.결제_ID = PD.PAY_ID;


-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환
CREATE OR REPLACE VIEW PDR_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일
     ,PLATFORM_DELIVERY_RETURN_ID AS 플랫폼_배송_반환_ID, DELIVERY_START_DATE AS PS_배송_시작일, DELIVERY_END_DATE AS PS_배송_종료일
FROM PD_STOREN PS JOIN PLATFORM_DELIVERY_RETURN PDR
ON PS.플랫폼_배송_ID = PDR.PLATFORM_DELIVERY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트
CREATE OR REPLACE VIEW IL_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일
     ,IL.INSPEC_LIST_ID AS 검수리스트_ID
FROM PDR_STOREN PS JOIN INSPEC_LIST IL
                        ON PS.플랫폼_배송_ID = IL.PLATFORM_DELIVERY_ID;




-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과(일일 검사 견수)
CREATE OR REPLACE VIEW IR_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID
     ,IR.INSPEC_RESULT_ID AS 검수_결과_ID
FROM IL_STOREN IST JOIN INSPEC_RESULT IR
ON IST.플랫폼_배송_ID = IR.PLATFORM_DELIVERY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과 + 검수_결과_처리
CREATE OR REPLACE VIEW IRA_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID
        ,INSPEC_RESULT_ACTION_ID AS 검수_결과_처리_ID, COMPLETED_DATE AS 검수_결과_처리일
FROM IR_STOREN IST JOIN INSPEC_RESULT_ACTION IRA
ON IST.검수_결과_ID = IRA.INSPEC_RESULT_ID;


-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과 + 검수_결과_처리 + 스토렌_매칭_신청
CREATE OR REPLACE VIEW SMR_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID, 검수_결과_처리_ID
        ,STOREN_MATCHING_REQ_ID AS 스토렌_매칭_신청_ID,RENTAL_START_DATE AS 렌탈_시작일,RENTAL_END_DATE AS 렌탈_종료일,REQUESTED_DATE AS 신청일
FROM IRA_STOREN IST JOIN STOREN_MATCHING_REQ SMR
ON IST.검수_결과_처리_ID = SMR.INSPEC_RESULT_ACTION_ID;












-- 일일 거래(결제) 건수 및 금액(스토렌)
CREATE OR REPLACE VIEW STOREN_PAY
AS
SELECT SS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID, 검수_결과_처리_ID, 스토렌_매칭_신청_ID, 렌탈_시작일, 렌탈_종료일, 신청일
        , STOREN_MATCHING_DONE_ID AS 스토렌_매칭_완료_ID,APPROVED_DATE AS 승인_일자
FROM SMR_STOREN SS JOIN STOREN_MATCHING_DONE SMD
ON SS.스토렌_매칭_신청_ID = SMD.STOREN_MATCHING_REQ_ID;





-- 렌탈 일일 결제 건수 + 렌탈_매칭_신청
CREATE OR REPLACE VIEW P_RENTAL
AS
SELECT PR.회원_코드, PR.장비등록_장비코드, PR.렌탈_ID, PR.결제_금액, PR.결제_일자, PR.결제_ID
        ,RMR.RENTAL_MATCHING_REQ_ID AS 렌탈_매칭_신청_ID,RMR.RENTAL_START_DATE AS 매칭_렌탈_시작일,RMR.RENTAL_END_DATE AS 매칭_렌탈_종료일,RMR.REQUESTED_DATE AS 렌탈_매칭_신청일
FROM PAY_RENTAL PR JOIN RENTAL_MATCHING_REQ RMR
ON PR.렌탈_ID = RMR.RENTAL_ID;





-- 렌탈 일일 결제 건수 + 렌탈_매칭_신청 +. 렌탈_매칭_완료
CREATE OR REPLACE VIEW RENTAL_MATCHING
AS
SELECT PR.회원_코드, 장비등록_장비코드, 렌탈_ID, 결제_금액, 결제_일자, 결제_ID, 렌탈_매칭_신청_ID, 매칭_렌탈_시작일, 매칭_렌탈_종료일, 렌탈_매칭_신청일
     ,RENTAL_MATCHING_DONE_ID AS 렌탈_매칭_완료_ID,APPROVED_DATE AS 승인_일자
FROM P_RENTAL PR JOIN RENTAL_MATCHING_DONE RMD
ON PR.렌탈_매칭_신청_ID = RMD.RENTAL_MATCHING_REQ_ID;








--회원_가입 + 회원_코드
CREATE OR REPLACE VIEW USER_CODE_SUM
AS
SELECT U.USER_CODE AS 회원코드
FROM USERS U JOIN USER_CODE UC
ON U.USER_CODE = UC.USER_CODE;

--회원_가입 + 회원_코드 + 관리자_등록
CREATE OR REPLACE VIEW ADMIN_CODE_SUM
AS
SELECT U.회원코드, A.ADMIN_ID AS 관리자_ID
FROM USER_CODE_SUM U JOIN ADMINS A
ON U.회원코드 = A.USER_CODE;






-- 일일 신고 건수 확인
CREATE OR REPLACE VIEW V_TODAY_WARRING
AS
SELECT PRS.회원코드,PRS.게시글_신고접수_ID, PRS.게시글_신고일,RRS.댓글_신고_접수_ID,RRS.신고일 AS 댓글_신고일,RRSS.렌탈_댓글_신고_접수_ID,RRSS.렌탈_댓글_신고일
FROM POST_REPORT_SUM PRS JOIN REPLY_REPORT_SUM RRS
ON PRS.회원코드 = RRS.회원코드
JOIN RENTAL_REPLY_SUM RRSS
ON RRSS.회원코드 = RRS.회원코드;









--회원_가입 + 회원_코드 + 관리자_등록 + 게시글_신고_접수
CREATE OR REPLACE VIEW POST_REPORT_SUM
AS
SELECT ACS.회원코드, 관리자_ID, PR.POST_REPORT_ID AS 게시글_신고접수_ID,PR.REPORTER_ID AS 게시글_신고접수자_ID,PR.POST_ID AS 게시물_ID,PR.REPORT_TYPE_ID AS 게시글_신고유형_ID,PR.REPORT_CONTENT AS 게시글_신고_내용_ID,PR.REPORTED_DATE AS 게시글_신고일
FROM ADMIN_CODE_SUM ACS JOIN POST_REPORT PR
ON ACS.회원코드 = PR.REPORTER_ID;


--회원_가입 + 회원_코드 + 관리자_등록 + 게시글_신고_접수 + 게시글_신고_처리
CREATE OR REPLACE VIEW POST_REPORT_SUM2
AS
SELECT PRS.회원코드, 관리자_ID, 게시글_신고접수_ID, 게시글_신고접수자_ID, 게시물_ID, 게시글_신고유형_ID, 게시글_신고_내용_ID, 게시글_신고일
        ,PRA.POST_REPORT_ACTION_ID AS 신고_처리_ID,PRA.ADMIN_ID AS 처리_관리자_ID,PRA.POST_REPORT_ID AS 게시글_신고_접수_ID,PRA.REPORT_ACTION_TYPE_ID AS 신고_처리_유형_ID,PRA.COMPLETED_DATE AS 처리일
FROM POST_REPORT_SUM PRS JOIN POST_REPORT_ACTION PRA
ON PRS.관리자_ID = PRA.ADMIN_ID;


DROP VIEW REPLY_REPORT_SUM;
--회원_가입 + 회원_코드 + 댓글_신고_접수
CREATE OR REPLACE VIEW REPLY_REPORT_SUM
AS
SELECT UCS.회원코드, RR.REPORTER_ID AS 댓글_신고접수자_ID, REPLY_ID AS 댓글_ID,REPORT_TYPE_ID AS 신고_유형_ID
        ,RR.REPORT_CONTENT AS 댓글_신고_내용,RR.REPORTED_DATE AS 신고일,RR.REPLY_REPORT_ID AS 댓글_신고_접수_ID
FROM USER_CODE_SUM UCS JOIN REPLY_REPORT RR
ON UCS.회원코드 = RR.REPORTER_ID;



--회원_가입 + 회원_코드 + 댓글_신고_접수 + 댓글_신고_처리
CREATE OR REPLACE VIEW REPLY_REPORT_ACTION_SUM
AS
SELECT RRS.회원코드, 댓글_신고접수자_ID, 댓글_ID, 신고_유형_ID, 댓글_신고_내용, 신고일, 댓글_신고_접수_ID
        ,RRA.REPLY_REPORT_ACTION_ID AS 댓글_신고처리_ID,RRA.REPORT_ACTION_TYPE_ID AS 댓글_신고_처리_유형_ID,RRA.COMPLETED_DATE AS 댓글_신고_처리일
        ,RRA.ADMIN_ID AS 댓글_처리_관리자_ID
FROM REPLY_REPORT_SUM RRS JOIN REPLY_REPORT_ACTION RRA
ON RRS.댓글_신고_접수_ID = RRA.REPLY_REPORT_ID;


DROP VIEW RENTAL_REPLY_SUM;
--회원_가입 + 회원_코드 + 렌탈_댓글_신고_접수
CREATE OR REPLACE VIEW RENTAL_REPLY_SUM
AS
SELECT UCS.회원코드,RRR.REPORTER_ID AS 렌탈_신고접수자_ID,RRR.RENTAL_REPLY_ID AS 렌탈_댓글_ID,RRR.REPORT_TYPE_ID AS 렌탈_댓글_신고_유형_ID
       ,RRR.REPORT_CONTENT AS 렌탈_댓글_신고_내용,RRR.REPORTED_DATE AS 렌탈_댓글_신고일, RENTAL_REPLY_REPORT_ID AS 렌탈_댓글_신고_접수_ID
FROM USER_CODE_SUM UCS JOIN RENTAL_REPLY_REPORT RRR
ON UCS.회원코드 = RRR.REPORTER_ID;



--회원_가입 + 회원_코드 + 렌탈_댓글_신고_접수 + 렌탈_신고_처리
CREATE OR REPLACE VIEW RENTAL_REPLY_ACTION_SUM
AS
SELECT RRS.회원코드, 렌탈_신고접수자_ID, 렌탈_댓글_ID, 렌탈_댓글_신고_유형_ID, 렌탈_댓글_신고_내용, 렌탈_댓글_신고일, 렌탈_댓글_신고_접수_ID
        ,RRRA.ADMIN_ID AS 렌탈_처리_관리자_ID,RRRA.REPORT_ACTION_TYPE_ID AS 렌탈_댓글_처리_유형_ID,RRRA.COMPLETED_DATE AS 렌탈_댓글_신고_처리일
FROM RENTAL_REPLY_SUM RRS JOIN RENTAL_REPLY_REPORT_ACTION RRRA
ON RRS.렌탈_댓글_신고_접수_ID = RRRA.RENTAL_REPLY_REPORT_ID;













--○ 회원 상세 정보 뷰
-- 개인 정보,활동 내역 (게시물, 댓글, 결제 이력),포인트 내역 (POINT_LOG),만족도 평가 내역 (SATISFACTION_LOG)


CREATE OR REPLACE VIEW USER_INFO
AS
SELECT UC.USER_CODE AS 회원코드,U.USER_ID AS 회원_ID,U.USER_NAME AS 회원_이름
    ,U.USER_TEL AS 회원_전화번호,U.USER_EMAIL AS 회원_이메일,U.CREATED_DATE AS 회원가입일
    ,P.POST_ID AS 게시물_ID,P.USER_CODE AS 게시물_회원_코드,P.BOARD_ID AS 게시판_ID,P.POST_LABEL_ID AS 말머리_ID,P.POST_TITLE AS 게시물_제목,P.POST_CONTENT AS 게시물_내용,P.CREATED_DATE AS 게시물_생성일
    ,R.REPLY_ID AS 댓글_ID,R.ROOT_REPLY_ID AS 상윗댓글_ID,R.USER_CODE AS 댓글_회원_코드,R.POST_ID AS 댓글_게시물_ID,REPLY_CONTENT AS 댓글_내용,R.CREATED_DATE AS 댓글_생성일
    ,PL.POINT_LOG_ID AS 포인트_로그_ID,PL.USER_CODE AS 포인트_변동_회원_코드,PL.POINT_CHANGE_TYPE_ID AS 포인트_변동_유형_ID,PL.POINT_CHANGE AS 변동_포인트,PL.CREATED_DATE AS 포인트_변동_생성일
    ,SL.SATIS_LOG_ID AS 만족도_평가_로그_ID,SL.RENTAL_MATCHING_DONE_ID AS 만족도_평가_렌탈_완료,SL.REVIEWEE_ID AS 피평가자_ID,SL.REVIEWER_ID AS 평가자_ID
    ,SL.SATIS_SCORE AS 만족도_점수,SL.SATIS_COMMENT AS 만족도_코멘트,SL.CREATED_DATE AS 만족도_평가_생성일
FROM USER_CODE UC JOIN USERS U
ON UC.USER_CODE = U.USER_CODE
JOIN POST P
ON U.USER_CODE = P.USER_CODE
JOIN REPLY R
ON P.USER_CODE = R.USER_CODE
JOIN POINT_LOG PL
ON R.USER_CODE = PL.USER_CODE
JOIN SATISFACTION_LOG SL
ON PL.USER_CODE = SL.REVIEWEE_ID;









CREATE OR REPLACE VIEW USER_INFO AS
SELECT
    UC.USER_CODE AS "회원코드",
    U.USER_ID AS "회원_ID",
    U.USER_NAME AS "회원_이름",
    U.USER_TEL AS "회원_전화번호",
    U.USER_EMAIL AS "회원_이메일",
    ST.SIGNUP_TYPE_NAME AS "가입유형",
    U.CREATED_DATE AS "회원가입일",
    (SELECT NICKNAME
     FROM NICKNAME_LOG NL
     WHERE NL.USER_CODE = UC.USER_CODE
     AND NL.LAST_UPDATED_DATE = (SELECT MAX(LAST_UPDATED_DATE)
                                FROM NICKNAME_LOG
                                WHERE USER_CODE = UC.USER_CODE)) AS "현재_닉네임",
    (SELECT MAX(RANK_NAME)
     FROM RANK R
     WHERE (SELECT NVL(SUM(POINT_CHANGE),0)
            FROM POINT_LOG
            WHERE USER_CODE = UC.USER_CODE) BETWEEN R.MIN_POINT AND R.MAX_POINT) AS "현재_등급",
    (SELECT NVL(SUM(POINT_CHANGE),0)
     FROM POINT_LOG
     WHERE USER_CODE = UC.USER_CODE) AS "총_보유_포인트",
    (SELECT COUNT(*)
     FROM POST
     WHERE USER_CODE = UC.USER_CODE) AS "게시물_수",
    (SELECT COUNT(*)
     FROM REPLY
     WHERE USER_CODE = UC.USER_CODE) AS "댓글_수",
    (SELECT COUNT(*)
     FROM BOOKMARK
     WHERE USER_CODE = UC.USER_CODE) AS "북마크_수",
    (SELECT COUNT(*)
     FROM RECOMMEND
     WHERE USER_CODE = UC.USER_CODE) AS "추천_수",
    (SELECT COUNT(*)
     FROM EQUIPMENT_REGISTRATION
     WHERE USER_CODE = UC.USER_CODE) AS "장비등록_수",
    (SELECT COUNT(*)
     FROM RENTAL
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                         FROM EQUIPMENT_REGISTRATION
                         WHERE USER_CODE = UC.USER_CODE)) AS "렌탈_등록_수",
    (SELECT COUNT(*)
     FROM STOREN
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                          FROM EQUIPMENT_REGISTRATION
                          WHERE USER_CODE = UC.USER_CODE)) AS "스토렌_등록_수",
    (SELECT COUNT(*)
     FROM STORAGE
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                          FROM EQUIPMENT_REGISTRATION
                          WHERE USER_CODE = UC.USER_CODE)) AS "보관_등록_수",
    (SELECT AVG(SATIS_SCORE)
     FROM SATISFACTION_LOG
     WHERE REVIEWEE_ID = UC.USER_CODE) AS "평균_만족도_점수",
    (SELECT COUNT(*)
     FROM OWNED_COUPON
     WHERE USER_CODE = UC.USER_CODE AND COMPLETED_DATE IS NULL) AS "보유_쿠폰_수",
    (SELECT ADDRESS
     FROM ADDRESS_LOG
     WHERE USER_CODE = UC.USER_CODE
     AND LAST_UPDATED_DATE = (SELECT MAX(LAST_UPDATED_DATE)
                              FROM ADDRESS_LOG
                              WHERE USER_CODE = UC.USER_CODE)) AS "현재_주소",
    CASE
        WHEN EXISTS (SELECT 1 FROM SUSPENDED_USER SU WHERE SU.USER_CODE = UC.USER_CODE AND SU.SUSPENDED_START_DATE <= SYSDATE)
        THEN '활동정지'
        WHEN UC.EXIT_DATE IS NOT NULL
        THEN '탈퇴'
        ELSE '활동중'
    END AS "회원_상태",
    UC.EXIT_DATE AS "탈퇴일자"
FROM
    USER_CODE UC
    LEFT JOIN USERS U ON UC.USER_CODE = U.USER_CODE
    LEFT JOIN SIGNUP_TYPE ST ON U.SIGNUP_TYPE_ID = ST.SIGNUP_TYPE_ID
ORDER BY
    UC.USER_CODE;





--○ 회원 제제 관리 뷰
-- 활동 정지 관리 (SUSPENDED_USER), 제재 이력 조회

SELECT *
FROM USER_CODE UC JOIN ADMINS A
ON UC.USER_CODE = A.USER_CODE
JOIN POST_REPORT_ACTION PRA
ON A.ADMIN_ID = PRA.ADMIN_ID
JOIN REPLY_REPORT_ACTION RRA
ON PRA.ADMIN_ID = RRA.ADMIN_ID
JOIN RENTAL_REPLY_REPORT_ACTION RRRA
ON RRA.ADMIN_ID = RRRA.ADMIN_ID;








--○ 회원 등급 조회

--○ 자유게시판 인기글 조회 뷰

--○ 자유게시판 전체 조회 뷰

--○ 전체 BEST 게시글 조회 뷰(최신순)(일부만)

--○ 렌탈 요청 시 기존 예약과 날짜 중복 없도록 관리

--○ 브랜드&장비명 목록 조회



=====================================================================================================


-- 영식 view

--○ 댓글 뷰
CREATE OR REPLACE VIEW VW_REPLY
AS
SELECT REP.REPLY_ID AS "댓글 ID"
     , REP.ROOT_REPLY_ID AS "상위댓글 ID"
     , UC.USER_CODE AS "회원코드"
     , NL.NICKNAME AS "회원닉네임"
     , REP.POST_ID AS "게시물 ID"
     , REP.REPLY_CONTENT AS "댓글내용"
     , REP.CREATED_DATE AS "작성일"
     , CASE WHEN REP.ROOT_REPLY_ID IS NULL 
            THEN 0 ELSE 1 
            END AS "대댓글여부"
FROM REPLY REP 
JOIN USER_CODE UC
ON REP.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                          FROM NICKNAME_LOG
                          WHERE USER_CODE = UC.USER_CODE)
ORDER BY CASE WHEN REP.ROOT_REPLY_ID IS NULL 
              THEN REP.REPLY_ID ELSE REP.ROOT_REPLY_ID 
              END ASC, REP.CREATED_DATE ASC;



--○ 게시판 관리 뷰(게시판, 말머리)
CREATE OR REPLACE VIEW VW_BOARD
AS
SELECT BOA.BOARD_ID AS "게시판 ID"
     , BC.BOARD_CATE_NAME AS "카테고리명"
     , WG.WRITE_GRADE_NAME AS "관리등급"
     , BOA.BOARD_NAME AS "게시판"
     , PL.POST_LABEL_NAME AS "말머리"
FROM POST_LABEL PL 
JOIN BOARD BOA
ON PL.BOARD_ID = BOA.BOARD_ID
JOIN BOARD_CATEGORY BC
ON BOA.BOARD_CATE_ID = BC.BOARD_CATE_ID
JOIN WRITE_GRADE WG
ON BOA.WRITE_GRADE_ID = WG.WRITE_GRADE_ID;



--○ 고독한 캠핑방 게시글 뷰
CREATE OR REPLACE VIEW VW_LONELY_CAMPING_POST
AS
SELECT POS.POST_ID AS "게시글 ID"
     , UC.USER_CODE AS "회원코드"
     , PL.POST_LABEL_NAME AS "말머리"
     , POS.POST_TITLE AS "제목"
     , AP.ATTACHMENT_PATH AS "첨부파일 경로"
     , POS.CREATED_DATE AS "작성일"
     , NL.NICKNAME AS "작성자"
     , (SELECT COUNT(*) 
        FROM POST_VIEW_LOG PVL 
        WHERE PVL.POST_ID = POS.POST_ID) AS "조회수"
     , (SELECT COUNT(*)
        FROM RECOMMEND REC
        WHERE REC.POST_ID = POS.POST_ID) AS "추천"
FROM POST POS
JOIN USER_CODE UC
ON POS.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
JOIN BOARD BOA
ON POS.BOARD_ID = BOA.BOARD_ID
JOIN POST_LABEL PL
ON POS.POST_LABEL_ID = PL.POST_LABEL_ID
JOIN ATTACHMENT_POST AP
ON POS.POST_ID = AP.POST_ID;



--○ 신고 관리 뷰(통합)
CREATE OR REPLACE VIEW VW_REPORT_MANAGEMENT
AS
SELECT PR.POST_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , POS.POST_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , PR.REPORT_CONTENT AS "신고내용"
     , PR.REPORTED_DATE AS "신고일"
     , PRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN PRA.POST_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , PRA.COMPLETED_DATE AS "처리일"     
FROM POST_REPORT PR
JOIN USER_CODE UC_REPORTER
ON PR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN POST POS
ON PR.POST_ID = POS.POST_ID
JOIN USER_CODE UC_REPORTED
ON POS.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON PR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN POST_REPORT_ACTION PRA
ON PR.POST_REPORT_ID = PRA.POST_REPORT_ID

UNION ALL

SELECT RR.REPLY_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , RR.REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RR.REPORT_CONTENT AS "신고내용"
     , RR.REPORTED_DATE AS "신고일"
     , RRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN RRA.REPLY_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , RRA.COMPLETED_DATE AS "처리일" 
FROM REPLY_REPORT RR
JOIN USER_CODE UC_REPORTER
ON RR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN REPLY REP
ON RR.REPLY_ID = REP.REPLY_ID
JOIN USER_CODE UC_REPORTED
ON REP.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON RR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN REPLY_REPORT_ACTION RRA
ON RR.REPLY_REPORT_ID = RRA.REPLY_REPORT_ID

UNION ALL

SELECT RRR.RENTAL_REPLY_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , RRR.RENTAL_REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RRR.REPORT_CONTENT AS "신고내용"
     , RRR.REPORTED_DATE AS "신고일"
     , RRRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN RRRA.RENTAL_REPLY_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , RRRA.COMPLETED_DATE AS "처리일"
FROM RENTAL_REPLY_REPORT RRR
JOIN USER_CODE UC_REPORTER
ON RRR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN RENTAL_REPLY RR
ON RRR.RENTAL_REPLY_ID = RR.RENTAL_REPLY_ID
JOIN USER_CODE UC_REPORTED
ON RR.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON RRR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN RENTAL_REPLY_REPORT_ACTION RRRA
ON RRR.RENTAL_REPLY_REPORT_ID = RRRA.RENTAL_REPLY_REPORT_ID;



--○ 장비명병 평균 렌탈가 조회 뷰
CREATE OR REPLACE VIEW VW_RENTAL_PRICE
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(PRICE.PAY_ID) AS "렌탈건수"
     , ROUND(AVG(PRICE.PAY_AMOUNT), 0) AS "평균 렌탈가"
FROM 
    CATEGORY CAT
JOIN EQUIPMENT_REGISTRATION ER 
ON CAT.CATEGORY_ID = ER.CATEGORY_ID
JOIN EQUIP_NAME EN 
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA 
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN EQUIP_CODE EC 
ON ER.EQUIP_CODE = EC.EQUIP_CODE
LEFT JOIN (SELECT REN.EQUIP_CODE, PAY.PAY_ID, PAY.PAY_AMOUNT
      FROM RENTAL REN
      JOIN RENTAL_MATCHING_REQ RMR 
      ON REN.RENTAL_ID = RMR.RENTAL_ID
      JOIN RENTAL_MATCHING_DONE RMD 
      ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
      JOIN PAY PAY 
      ON RMD.RENTAL_MATCHING_DONE_ID = PAY.RENTAL_MATCHING_DONE_ID
      LEFT JOIN PAY_CANCEL PC 
      ON PAY.PAY_ID = PC.PAY_ID
      WHERE PC.PAY_CANCEL_ID IS NULL 
           
      UNION ALL
    
      SELECT STOREN.EQUIP_CODE, PAY.PAY_ID, PAY.PAY_AMOUNT
      FROM STOREN STOREN
      JOIN PAY PAY_STOREN_FEE
      ON STOREN.STOREN_ID = PAY_STOREN_FEE.STOREN_ID
      JOIN PLATFORM_DELIVERY PL
      ON PAY_STOREN_FEE.PAY_ID = PL.PAY_ID
      JOIN INSPEC_LIST IL
      ON PL.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT IR
      ON PL.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT_ACTION IRA
      ON IR.INSPEC_RESULT_ID = IRA.INSPEC_RESULT_ID
      JOIN STOREN_MATCHING_REQ SMR 
      ON IRA.INSPEC_RESULT_ACTION_ID = SMR.INSPEC_RESULT_ACTION_ID 
      JOIN STOREN_MATCHING_DONE SMD 
      ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
      JOIN PAY PAY 
      ON SMD.STOREN_MATCHING_DONE_ID = PAY.STOREN_MATCHING_DONE_ID
      LEFT JOIN PAY_CANCEL PC 
      ON PAY.PAY_ID = PC.PAY_ID
      WHERE PC.PAY_CANCEL_ID IS NULL 
) PRICE 
ON EC.EQUIP_CODE = PRICE.EQUIP_CODE
WHERE PRICE.PAY_ID IS NOT NULL
GROUP BY BRA.BRAND_NAME, EN.EQUIP_NAME, CAT.CATEGORY_NAME
ORDER BY CAT.CATEGORY_NAME, "평균 렌탈가";



--○ 장비명별 평균 신품가 조회 뷰
CREATE OR REPLACE VIEW VW_EQUIP_ORIGINAL_PRICE
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(ER.EQUIP_ID) AS "장비 등록건수"
     , ROUND(AVG(ER.ORIGINAL_PRICE), 0) AS "평균 신품가"
FROM EQUIPMENT_REGISTRATION ER
JOIN EQUIP_NAME EN
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN CATEGORY CAT
ON ER.CATEGORY_ID = CAT.CATEGORY_ID
JOIN EQUIP_CODE EC
ON ER.EQUIP_CODE = EC.EQUIP_CODE
WHERE EC.OWN_END_DATE IS NULL
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME;



--○ 게시판 활성도 뷰
CREATE OR REPLACE VIEW VW_BOARD_ACTIVITY
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "게시글수"
     , COUNT(REP.REPLY_ID) AS "댓글수"
     , COUNT(PVL.POST_VIEW_LOG_ID) AS "조회수"
FROM BOARD BOA
LEFT JOIN POST POS
ON POS.BOARD_ID = BOA.BOARD_ID
LEFT JOIN REPLY REP
ON POS.POST_ID = REP.POST_ID
LEFT JOIN POST_VIEW_LOG PVL
ON POS.POST_ID = PVL.POST_ID
GROUP BY BOA.BOARD_NAME;



--○ 신고유형 분석 뷰
CREATE OR REPLACE VIEW VW_REPORT_TYPE_ANALYSIS
AS 
SELECT RT.REPORT_TYPE_NAME AS "신고유형"
     , COUNT(PR.POST_REPORT_ID) AS "게시글 신고수"
     , COUNT(RR.REPLY_REPORT_ID) AS "댓글 신고수"
     , (COUNT(PR.POST_REPORT_ID) + COUNT(RR.REPLY_REPORT_ID)) AS "총 신고수"
FROM REPORT_TYPE RT
LEFT JOIN POST_REPORT PR
ON RT.REPORT_TYPE_ID = PR.REPORT_TYPE_ID
LEFT JOIN REPLY_REPORT RR
ON RT.REPORT_TYPE_ID = RR.REPORT_TYPE_ID
GROUP BY RT.REPORT_TYPE_NAME;



--○ 게시판별 신규게시글수
CREATE OR REPLACE VIEW VW_NEW_POST_DATA
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "신규 게시글수"
FROM POST POS
LEFT JOIN BOARD BOA
ON POS.BOARD_ID = BOA.BOARD_ID
WHERE TRUNC(POS.CREATED_DATE) = TRUNC(SYSDATE)
GROUP BY BOA.BOARD_NAME;



--○ 카테고리별 인기 장비 통계 뷰
CREATE OR REPLACE VIEW VW_POPULAR_EQUIP
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(RENTAL_MATCHING.RENTAL_MATCHING_ID) AS "일반 렌탈건수"
     , COUNT(STOREN_MATCHING.STOREN_MATCHING_ID) AS "스토렌 렌탈건수"
     , COUNT(RENTAL_MATCHING.RENTAL_MATCHING_ID) + COUNT(STOREN_MATCHING.STOREN_MATCHING_ID) AS "총 렌탈수"
FROM CATEGORY CAT
JOIN EQUIPMENT_REGISTRATION ER
ON CAT.CATEGORY_ID = ER.CATEGORY_ID
JOIN EQUIP_NAME EN
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN EQUIP_CODE EC
ON ER.EQUIP_CODE = EC.EQUIP_CODE
LEFT JOIN (SELECT REN.EQUIP_CODE, RMD.RENTAL_MATCHING_DONE_ID AS RENTAL_MATCHING_ID
      FROM RENTAL REN 
      JOIN RENTAL_MATCHING_REQ RMR 
      ON REN.RENTAL_ID = RMR.RENTAL_ID
      JOIN RENTAL_MATCHING_DONE RMD 
      ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
) RENTAL_MATCHING 
ON EC.EQUIP_CODE = RENTAL_MATCHING.EQUIP_CODE

LEFT JOIN (SELECT STOREN.EQUIP_CODE, SMD.STOREN_MATCHING_DONE_ID AS STOREN_MATCHING_ID
      FROM STOREN STOREN
      JOIN PAY PAY_STOREN_FEE
      ON STOREN.STOREN_ID = PAY_STOREN_FEE.STOREN_ID
      JOIN PLATFORM_DELIVERY PD
      ON PAY_STOREN_FEE.PAY_ID = PD.PAY_ID
      JOIN INSPEC_LIST IL
      ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT IR
      ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT_ACTION IRA
      ON IR.INSPEC_RESULT_ID = IRA.INSPEC_RESULT_ID
      JOIN STOREN_MATCHING_REQ SMR 
      ON IRA.INSPEC_RESULT_ACTION_ID = SMR.INSPEC_RESULT_ACTION_ID 
      JOIN STOREN_MATCHING_DONE SMD 
      ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
) STOREN_MATCHING 
ON EC.EQUIP_CODE = STOREN_MATCHING.EQUIP_CODE
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME
ORDER BY "총 렌탈수" DESC, CAT.CATEGORY_NAME;



--○ 등급별 장비 분포 통계 뷰
CREATE OR REPLACE VIEW VW_EQUIP_GRADE_DISTRIBUTION
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , EG.EQUIP_GRADE_NAME AS "장비등급"
     , COUNT(EC.EQUIP_CODE) AS "장비수"
FROM EQUIP_CODE EC
JOIN EQUIPMENT_REGISTRATION ER
ON EC.EQUIP_CODE = ER.EQUIP_CODE
JOIN CATEGORY CAT
ON ER.CATEGORY_ID = CAT.CATEGORY_ID
LEFT JOIN (SELECT STOREN.EQUIP_CODE, IR.EQUIP_GRADE_ID
      FROM STOREN STOREN
      JOIN PAY PAY
      ON STOREN.STOREN_ID = PAY.STOREN_ID
      JOIN PLATFORM_DELIVERY PD
      ON PAY.PAY_ID = PD.PAY_ID
      JOIN INSPEC_LIST IL
      ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT IR
      ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID

      UNION

      SELECT STORAGE.EQUIP_CODE, IR.EQUIP_GRADE_ID
      FROM STORAGE STORAGE
      JOIN PAY PAY
      ON STORAGE.STORAGE_ID = PAY.STORAGE_ID
      JOIN PLATFORM_DELIVERY PD
      ON PAY.PAY_ID = PD.PAY_ID
      JOIN INSPEC_LIST IL
      ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
      JOIN INSPEC_RESULT IR
      ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
) IRG ON EC.EQUIP_CODE = IRG.EQUIP_CODE
JOIN EQUIP_GRADE EG
ON IRG.EQUIP_GRADE_ID = EG.EQUIP_GRADE_ID
GROUP BY CAT.CATEGORY_NAME, EG.EQUIP_GRADE_NAME
ORDER BY CAT.CATEGORY_NAME, EG.EQUIP_GRADE_NAME;



--○ 전체 인기글 조회 뷰
CREATE OR REPLACE VIEW VW_HOT_POST
AS
SELECT HPL.HOT_POST_LOG_ID AS "인기 게시글 ID"
     , BOA.BOARD_NAME AS "게시판명"
     , PL.POST_LABEL_NAME AS "말머리"
     , POS.POST_TITLE AS "게시글 제목"
     , POS.POST_CONTENT AS "게시글 내용"
     , AP.ATTACHMENT_PATH AS "첨부파일 경로"
     , NL.NICKNAME AS "작성자"
     , POS.CREATED_DATE AS "작성일"
     , (SELECT COUNT(*) 
        FROM POST_VIEW_LOG PVL 
        WHERE PVL.POST_ID = POS.POST_ID) AS "조회수"
     , (SELECT COUNT(*)
        FROM RECOMMEND REC
        WHERE REC.POST_ID = POS.POST_ID) AS "추천"
FROM HOT_POST_LOG HPL
JOIN POST POS
ON HPL.POST_ID = POS.POST_ID
JOIN USER_CODE UC
ON POS.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                          FROM NICKNAME_LOG
                          WHERE USER_CODE = UC.USER_CODE)
JOIN POST_LABEL PL
ON POS.POST_LABEL_ID = PL.POST_LABEL_ID
JOIN BOARD BOA
ON PL.BOARD_ID = BOA.BOARD_ID
JOIN ATTACHMENT_POST AP
ON POS.POST_ID = AP.POST_ID;



--○ 브랜드 & 장비명 목록 조회
CREATE OR REPLACE VIEW VW_BRAND_EQUIP_NAME
AS 
SELECT BRA.BRAND_ID AS "브랜드 ID"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME_ID AS "장비명 ID"
     , EN.EQUIP_NAME AS "장비명"
FROM EQUIP_NAME EN
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
ORDER BY BRA.BRAND_NAME;



--○ 이벤트 관리 뷰(이벤트 응모 현황)
CREATE OR REPLACE VIEW VW_EVENT
AS
SELECT EVE.EVENT_ID AS "이벤트 ID"
     , ADM.ADMIN_ID AS "관리자 ID"
     , EVE.EVENT_TITLE AS "이벤트명"
     , EVE.EVENT_START_DATE AS "이벤트 시작일"
     , EVE.EVENT_END_DATE AS "이벤트 종료일"
     , EE.USER_CODE AS "응모한 회원코드"
     , NL.NICKNAME AS "응모한 회원닉네임"
     , EE.EVENT_ENTRY_POINT AS "이벤트 응모 포인트"
     , EE.CREATED_DATE AS "응모일"
FROM EVENT_ENTRY EE
JOIN EVENT EVE
ON EE.EVENT_ID = EVE.EVENT_ID   
JOIN ADMINS ADM
ON EVE.ADMIN_ID = ADM.ADMIN_ID
JOIN USER_CODE UC
ON EE.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                          FROM NICKNAME_LOG
                          WHERE USER_CODE = UC.USER_CODE);



--○ 이벤트 관리 뷰(당첨자 조회)
CREATE OR REPLACE VIEW VW_EVENT_WIN
AS
SELECT EVE.EVENT_ID AS "이벤트 ID"
     , ADM.ADMIN_ID AS "관리자 ID"
     , EVE.EVENT_TITLE AS "이벤트명"
     , EVE.EVENT_START_DATE AS "이벤트 시작일"
     , EVE.EVENT_END_DATE AS "이벤트 종료일"
     , EW.EVENT_ENTRY_ID AS "당첨된 응모ID"
     , EE.USER_CODE AS "당첨된 회원코드"
     , NL.NICKNAME AS "당첨된 회원닉네임"
FROM EVENT_WIN EW
JOIN EVENT_ENTRY EE
ON EW.EVENT_ENTRY_ID = EE.EVENT_ENTRY_ID
JOIN USER_CODE UC
ON EE.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                          FROM NICKNAME_LOG
                          WHERE USER_CODE = UC.USER_CODE)
JOIN EVENT EVE
ON EE.EVENT_ID = EVE.EVENT_ID
JOIN ADMINS ADM
ON EVE.ADMIN_ID = ADM.ADMIN_ID;



---------------------------------------------------------------------------------------
-------------------------■■■ 뷰 조회 ■■■-------------------------


-------------------------※ 커뮤니티 관련 뷰 ※-------------------------

--○ 댓글 뷰
SELECT *
FROM VW_REPLY;

--○ 게시판 뷰(게시판, 말머리)
SELECT *
FROM VW_BOARD;

--○ 고독한 캠핑방 게시글 뷰
SELECT *
FROM VW_LONELY_CAMPING_POST;

--○ 전체 인기글 조회 뷰
SELECT *
FROM VW_HOT_POST;

--○ 게시판별 활성도 조회 뷰
SELECT *
FROM VW_BOARD_ACTIVITY;

--○ 신규 게시글수
SELECT *
FROM VW_NEW_POST_DATA;


-------------------------※ 신고 관련 뷰 ※-------------------------

--○ 통합 신고 관리 뷰
SELECT *
FROM VW_REPORT_MANAGEMENT;

--○ 신고 유형별 분석 뷰
SELECT *
FROM VW_REPORT_TYPE_ANALYSIS;



-------------------------※ 장비 관련 뷰 ※-------------------------

--○ 장비명별 평균 렌탈가 조회 
SELECT *
FROM VW_RENTAL_PRICE;

--○ 장비명별 평균 신품가 조회 
SELECT *
FROM VW_EQUIP_ORIGINAL_PRICE;

--○ 카테고리별 인기 장비 조회 뷰
SELECT *
FROM VW_POPULAR_EQUIP;

--○ 장비등급별 분포 통계 뷰
SELECT *
FROM VW_EQUIP_GRADE_DISTRIBUTION;

--○ 브랜드 & 장비명 목록 조회
SELECT *
FROM VW_BRAND_EQUIP_NAME;



-------------------------※ 이벤트 관련 뷰 ※-------------------------

--○ 이벤트 관리 뷰(이벤트 응모 현황)
SELECT *
FROM VW_EVENT;

--○ 이벤트 관리 뷰(당첨자 조회)
SELECT *
FROM VW_EVENT_WIN;

-------------------------------------------------------------------------------------------------------------------------------------------------





-- 유진 view
--○ PAY_ID를 알면 장비코드를 알 수 있는 뷰
CREATE OR REPLACE VIEW VW_PAY_ID_TO_EQUIP_CODE
AS
SELECT 
     p.PAY_ID,
     -- 결제종류 컬럼
     CASE
          -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 '렌탈_렌탈비결제'
          WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL
          THEN '렌탈_렌탈비결제'
          -- STORAGE_ID가 NULL이 아니면 '보관관_보관비결제'
          WHEN p.STORAGE_ID IS NOT NULL
          THEN '보관_보관비결제'
          -- STOREN_ID가 NULL이 아니면 '스토렌_보관비결제'
          WHEN p.STOREN_ID IS NOT NULL
          THEN '스토렌_보관비결제'
          -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 '스토렌_렌탈비결제'
          WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL
          THEN '스토렌_렌탈비결제'
          -- 위의 모든 조건이 만족되지 않으면 NULL 반환
          ELSE NULL
     END AS 결제종류,
     
     -- 장비코드 컬럼럼
     CASE
          -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 RENTAL 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL THEN 
          (  
               SELECT r.EQUIP_CODE
               FROM RENTAL_MATCHING_REQ rmq
               JOIN RENTAL r ON rmq.RENTAL_ID = r.RENTAL_ID
               WHERE rmq.RENTAL_MATCHING_REQ_ID = p.RENTAL_MATCHING_DONE_ID
          )
          -- STORAGE_ID가 NULL이 아니면 STORAGE 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.STORAGE_ID IS NOT NULL THEN
          (  
               SELECT s.EQUIP_CODE
               FROM STORAGE s
               WHERE s.STORAGE_ID = p.STORAGE_ID
          )
          -- STOREN_ID가 NULL이 아니면 STOREN 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.STOREN_ID IS NOT NULL THEN
          (  
               SELECT st.EQUIP_CODE
               FROM STOREN st
               WHERE st.STOREN_ID = p.STOREN_ID
          )
          -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 INSPEC_RESULT_ACTION을 거쳐 EQUIP_CODE를 찾는다
          WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL THEN
          (  
               SELECT st.EQUIP_CODE
               FROM STOREN_MATCHING_REQ smr
               JOIN INSPEC_RESULT_ACTION ira ON smr.INSPEC_RESULT_ACTION_ID = ira.INSPEC_RESULT_ACTION_ID
               JOIN INSPEC_RESULT ir ON ira.INSPEC_RESULT_ID = ir.INSPEC_RESULT_ID
               LEFT JOIN PLATFORM_DELIVERY pd ON ir.PLATFORM_DELIVERY_ID = pd.PLATFORM_DELIVERY_ID
               LEFT JOIN PLATFORM_DELIVERY_RETURN pdr ON ir.PLATFORM_DELIVERY_RETURN_ID = pdr.PLATFORM_DELIVERY_RETURN_ID
               LEFT JOIN PAY p2 ON pd.PAY_ID = p2.PAY_ID OR pdr.PLATFORM_DELIVERY_ID = p2.PAY_ID
               LEFT JOIN STOREN st ON p2.STOREN_ID = st.STOREN_ID
               WHERE smr.STOREN_MATCHING_REQ_ID = p.STOREN_MATCHING_DONE_ID
          )
          -- 위의 모든 조건이 만족되지 않으면 NULL 반환
          ELSE NULL
     END AS 장비코드
FROM 
     PAY p;


--○ 거래상품과 만족도 묶기
CREATE OR REPLACE VIEW VW_RENTAL_AND_SAT
AS
SELECT SL.REVIEWER_ID "평가자_ID"
     , SL.REVIEWEE_ID "피평가자_ID"
     , SL.SATIS_SCORE "만족도_점수"
     , SL.SATIS_COMMENT "만족도_코멘트"
     , SL.CREATED_DATE "만족도_생성일"
     , RMD.RENTAL_MATCHING_DONE_ID "렌탈매칭완료_ID", R.RENTAL_TITLE "렌탈제목", R.RENTAL_ID "렌탈ID", EC.EQUIP_CODE "장비코드"
FROM SATISFACTION_LOG SL
LEFT JOIN RENTAL_MATCHING_DONE RMD
     ON SL.RENTAL_MATCHING_DONE_ID = RMD.RENTAL_MATCHING_DONE_ID
LEFT JOIN RENTAL_MATCHING_REQ RMR
     ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
LEFT JOIN RENTAL R
     ON RMR.RENTAL_ID = R.RENTAL_ID
LEFT JOIN EQUIP_CODE EC
     ON R.EQUIP_CODE = EC.EQUIP_CODE;



SELECT *
FROM VW_RENTAL_AND_SAT;



--○ 관리자 계정 관리 SELECT쿼리문
SELECT ADMIN_ID "관리자_ID", USER_CODE "회원_코드", ADMIN_PW "관리자_PW"
     , ADMIN_NICKNAME "관리자_닉네임", ADMIN_TEL "관리자_전화번호"
     , CREATED_DATE "생성일"
FROM ADMINS;



--○ 관리자 작업 이력 조회 뷰(신고처리) --> 뷰 생성 안 함(중복 뷰)
SELECT 
     A.ADMIN_ID AS "관리자ID",
     '게시물' AS "신고유형",  -- 게시물 신고
     PR.POST_ID AS "신고대상ID",  -- 게시물ID
     PR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     P.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
     PRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     PRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN POST_REPORT_ACTION PRA
     ON A.ADMIN_ID = PRA.ADMIN_ID
JOIN POST_REPORT PR
     ON PRA.POST_REPORT_ID = PR.POST_REPORT_ID
JOIN POST P
     ON PR.POST_ID = P.POST_ID

UNION ALL

SELECT 
     A.ADMIN_ID AS "관리자ID",
     '댓글' AS "신고유형",  -- 댓글 신고
     R.REPLY_ID AS "신고대상ID",  -- 댓글ID
     RR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     R.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
RRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     RRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN REPLY_REPORT_ACTION RRA
     ON A.ADMIN_ID = RRA.ADMIN_ID
JOIN REPLY_REPORT RR
     ON RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
JOIN REPLY R
     ON RR.REPLY_ID = R.REPLY_ID

UNION ALL  

SELECT 
     A.ADMIN_ID AS "관리자ID",
     '렌탈댓글' AS "신고유형",  -- 렌탈댓글 신고
     RRR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     REN.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
     REN.RENTAL_REPLY_ID AS "신고대상ID",  -- 렌탈댓글ID
     RRRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     RRRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN RENTAL_REPLY_REPORT_ACTION RRRA
     ON A.ADMIN_ID = RRRA.ADMIN_ID
JOIN RENTAL_REPLY_REPORT RRR
     ON RRRA.RENTAL_REPLY_REPORT_ID = RRR.RENTAL_REPLY_REPORT_ID
JOIN RENTAL_REPLY REN
     ON RRR.RENTAL_REPLY_ID = REN.RENTAL_REPLY_ID;



--○ 관리자 작업 이력 조회 뷰(활동정지회원)
CREATE OR REPLACE VIEW VW_SUSPENDED_USER_AND_ADMINS
AS
SELECT T.*, CASE WHEN T."활동정지시작일" - SYSDATE >= 30 THEN '정지해제'
               ELSE '정지 중' END "활동정지상태"
FROM
(
     SELECT A.USER_CODE "관리자회원코드", A.ADMIN_ID "관리자ID"
     , SU.USER_CODE "활동정지유저코드", SU.SUSPENDED_START_DATE "활동정지시작일"
     FROM SUSPENDED_USER SU
     JOIN ADMINS A
     ON SU.ADMIN_ID = A.ADMIN_ID
) T; 

SELECT *
FROM VW_SUSPENDED_USER_AND_ADMINS;



--○ 매칭 관리 뷰(렌탈)
CREATE OR REPLACE VIEW VW_RENTAL_AND_MATCHING
AS
SELECT R.RENTAL_ID "렌탈ID"
     , R.EQUIP_CODE "장비_코드"
     , R.RENTAL_TITLE "렌탈_제목"
     , RMR.RENTAL_MATCHING_REQUESTER_ID "렌탈매칭신청자코드"
     , RMR.RENTAL_START_DATE "렌탈_시작일"
     , RMR.RENTAL_END_DATE "렌탈_종료일"
     , RMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(RMD.RENTAL_MATCHING_REQ_ID) > 0 THEN '승인'
          ELSE '미승인'
          END "승인여부"
     , RMD.APPROVED_DATE "승인_일자"
FROM RENTAL_MATCHING_REQ RMR
LEFT JOIN RENTAL_MATCHING_DONE RMD
     ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
LEFT JOIN RENTAL R
     ON RMR.RENTAL_ID = R.RENTAL_ID
GROUP BY R.RENTAL_ID
     , R.EQUIP_CODE
     , R.RENTAL_TITLE
     , RMR.RENTAL_MATCHING_REQUESTER_ID
     , RMR.RENTAL_START_DATE
     , RMR.RENTAL_END_DATE
     , RMR.REQUESTED_DATE
     , RMD.APPROVED_DATE;


SELECT *
FROM VW_RENTAL_AND_MATCHING;




--○ 매칭 관리 뷰(스토렌)
CREATE OR REPLACE VIEW VW_STOREN_AND_MATCHING
AS
SELECT S.STOREN_ID "스토렌ID"
     , S.EQUIP_CODE "장비_코드"
     , S.STOREN_TITLE "스토렌_제목"
     , SMR.STOREN_MATCHING_REQ_USER_ID "스토렌매칭신청자코드"
     , SMR.RENTAL_START_DATE "렌탈_시작일"
     , SMR.RENTAL_END_DATE "렌탈_종료일"
     , SMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(SMD.STOREN_MATCHING_REQ_ID) > 0 THEN '승인'
          ELSE '미승인'
          END "승인여부"
     , SMD.APPROVED_DATE "승인_일자"
FROM STOREN_MATCHING_REQ SMR
LEFT JOIN STOREN_MATCHING_DONE SMD
     ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
LEFT JOIN INSPEC_RESULT_ACTION IRA
     ON SMR.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
LEFT JOIN INSPEC_RESULT IR
     ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
LEFT JOIN PLATFORM_DELIVERY PD
     ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
LEFT JOIN PAY P
     ON PD.PAY_ID = P.PAY_ID
LEFT JOIN STOREN S
     ON P.STOREN_ID = S.STOREN_ID
GROUP BY SMR.STOREN_MATCHING_REQ_USER_ID
     , SMR.RENTAL_START_DATE
     , SMR.RENTAL_END_DATE
     , SMR.REQUESTED_DATE
     , SMD.APPROVED_DATE
     , S.STOREN_ID
     , S.EQUIP_CODE
     , S.STOREN_TITLE;


SELECT *
FROM VW_STOREN_AND_MATCHING;




--○ 수익 조회(렌탈)
--○ 수익 조회(스토렌)
--○ 검수 관련 뷰들...은 주말에 만들어오겠습니다.
----------------------------------------------------------------------------------------------------------------------------------------------------


