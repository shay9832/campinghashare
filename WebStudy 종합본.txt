■■■ AJAX ■■■

○ 개요
  AJAX 는 MXL에 기반한 종합 기술로
  비동기 자바스크립트 XML(Asynchronous Javascript And Xml)을 줄인 말로
  자바스크립트로 HTTP 요청을 보내서 XML 응답을 받아 사용하는 기술이다.

  AJAX는 하나의 독립된 기술이... 아니다.
  화면은 HTML + CSS 로 구성 및 작성하고,
  화면에 대한 조작과 상호 작용은 문객체모델(Document Object Model, DOM)로 처리하고
  데이터 교환은 XML 형식으로 처리하며,
  데이터 변환과 검색은 XML 기술인 XSL 과 Xpath 등을 사용하며,
  비동기 통신에는 웹 브라우저 안에 내장되어 있는 
  XMLHttpRequest 객체를 사용하고,
  이 모~~~든 것을 하나로 묶어주는 개념으로 
  Javascript 또는 jQuery 를 사용하는 것.
  이것을 AJAX 라고 한다.


○ 특징

   - 비동기 자바 스크립트 XML
   - 자바스크립트로 HTTP 요청을 보내서 XML 응답을 받아 사용
   - 처리 과정
     ① HTTP 요청을 보냄
	→ ② XML 문서를 응답으로 받음
	   → ③ 자동으로 XML 객체가 생성
 	     → ④ 자바스크립트는 XML 객체에 접근하여 다양한 작업을 수행


	==> HTML+CSS, DOM, XML, XSLT, XPath, XMLHttpRequest, Javascript를 합쳐서 사용


○ 장점
  - 비동기 통신을 사용함으로써 데이터를 보내고 나서도
    사용자는 다른 작업을 수행할 수 있다.
  - 데이터만 들어가 있는 형식으로 응답을 받기 때문에
    전통적인 웹 어플리케이션 방식에 비해 서버측 처리 속도가 빠르고
    전송 데이터 양도 훨씬 적다.
  - 응답으로 받은 XML 문서를 검색하거나 XSL 을 사용하여 변환을 할 수 있다.
    따라서 실행 속도가 빠르다.
  - 불필요한 데이터 요청을 최소화 할 수 있고
    많은 일이 클라이언트인 웹 브라우저에서 처리될 수 있다.

○ 단점
  - 외부 검색 엔진이 웹 페이지를 검색할 수 없는 문제가 있다.
  - AJAX 는 클라이언트 폴링 방식으로 실시간 서비스를 제공할 수 없다.
  - AJAX 가 포함된 HTML 페이지가 속한 서버가 아닌 다른 서버로 요청을 보낼 수 없고,
    클라이언트 PC의 파일에 접근할 수도 없다.

○ 기존 웹 사이트에서 AJAX 를 활용하면 효과가 있는 경우
 또는, AJAX 어플리케이션으로 개발할 필요가 있는 경우
  - 웹 페이지를 전환하지 않고 현재 페이지에서 다른 동작을 수행하고자 할 때
  - 불필요한 팝업을 사용하여 처리하는 작업을 다른 방법을 통해 대체하고자 할 때
  - 여러 번 불필요한 홤녀을 다시 출력할 때
  - 특정한 데이터를 반복 사용하면서 다양한 작업을 수행할 때

○ 주의사항
  - 뒤로가기 버튼 사용의 어려움
    AJAX 는 Javascript 를 사용하여 동작하기 때문ㄴ에
    페이지 단위의 브라우저에서 사용자 경험(UX)과 다르게 작동하는 경우가 있다.
    특히, 뒤로가기 버튼의 기능 상실로 AJAX 를 유해한 기술로 매도하기도 했다.
    (뒤로가기 버튼은 웹 서핑을 수행하는 사용자들이
    일반 클릭 다음으로 많이 사용하는 기술이므로...)
    하지만, 이미 iframe 을 사용한 해결책이 제시된 바 있으며
    AJAX를 활용한 서비스 사용 경험이 증대될수록 이와 같은 문제는
    줄어들 것으로 전망하고 있다.
  - 진행상황 파악의 어려움
    XMLHttpRequest 를 통해 통신하는 경우
    웹 페이지 로딩과는 달리 사용자에게 아무론 진행 정보가 주어지지 않는다.
    그래서 아직 요청이 완료되지 않았는데 사용자가 페이지를 떠나거나
    기다림을 참지 못한 사용자가 다른 기능을 수행함으로써 오작동을 일으킬 우려가 발생하게 된다.
    이 경우 사용자의 요청이 처리중에 있다는 표시를 화면에 보여주도록 처리할 수 있다.
    중간 중간 "loading" 상태 표시를 통해 사용자의 요청이 처리중임을 알려주는
    방법을 예로 들 수 있다
    이러한 상태는 XMLHttpRequest.readyState 의 상태를 통해 판단할 수 있다.
    또한, 이 때 사용할 수 있는 이미지를 활용할 수도 있다.


○ 참고 사이트
   - http://www.w3.org
   - http://www.w3schools.com

○ AJAX의 필요성
   기존의 웹 브라우저는 서버로부터 페이지 단위로만 데이터를 수신하여 받을 수 있었다.
   때문에 간단한 상호작용을 하려고 해도 페이지 전체를 로딩해야 했고
   이것은 대역폭 낭비를 초래하게 되었다.
   하지만, AJAX 를 사용하면 XML 파일 조각 단위로 데이터를 받아올 수 있기 땜누에
   전체 페이지를 다시 로드하지 않아도 페이지 일부를 동적으로 갱신할 수 있다.

○ AJAX 객체의 사용
   AJAX를 사용하려면 먼저 AJAX 객체 생성 함수를 사용하여 AJAX 객체를 만들어야 한다.
   인터넷 익스플로러의 경우 『new ActiveXObject("Microsoft.XMLHTTP")』를 실행하며
   모질라 웹 브라우저의 경우 『new XMLHttpRequest()』를 실행하여 AJAX 객체를 생성한다.
   인터넷 익스플로러 7.0 이후부터는 모질라 웹 브라우저처럼
   『new XMLHttpRequest()』를 통해 객체를 생성할 수 있다.
    






■■■ CSS 선택자(selector) 및 선언 방법 ■■■

○ CSS 선택자(selector)구성 및 설정
   - 『*』 공용 선택자, 전체 선택자
     모든 엘리먼트를 선택한다./

   - 『E』 엘리먼트 선택자, 태그 선택자, 타입 선택자 → h1 p div ...
      E 엘리먼트를 선택한다.

   - 『.』 클래스 선택자
      html 에서만 사용할 수 있으며, 예를 들어, 『div.warning』은
      warnung 이라는 클래스를 가지고 있는 div 앨리먼트를 선택하게 된다.

   - 『#』아이디 선택자
      예를 들어, 『#myId』는 myId를 아이디 속성의 값으로 사용하는 엘리먼트를 선택하게 된다.

   - 『E>F』자식 선택자
      E 엘리먼트의 자식 엘리먼트인 F 엘리먼트를 선택하게 된다.


   - 『E F』 자손 선택자, 후손 선택자, 하위 선택자
      E 엘리먼트의 하위에 있는 F 엘리먼트를 선택하게 된다.
      이 경우 특이한 점은 E 와 F 사이에 다른 엘리먼트가 포함되어 있더라도
      선택 대상에 해당한다는 것이다.

   - 『E+F』 인접 선택자, 형제자매 선택자
      E 엘리먼트와 F 엘리먼트가 상하위 관계가 아닌,
      인접해 있는 형제자매 관계인 경우 선택하게 된다.


   - 『E:action』동적 선택자, 가상 선택자, 상태 선택자
     사용자 액션이 적용되는 상황에 따라 선택 여부가 결정된다.
     예를 들어, 『button:hover』는 버튼 위에 마우스 커서가 머물게 되는
     특정 상황에서만 선택이 이루어지게 된다.


○ CSS 선언 방법
   
   - 외부 선언(External Linked Style)
     HTML Document 외부에 별도의 CSS 파일을 생성하여 내용을 구성한다.
     『확장자 : *.css』
     이 CSS를 적용할 문서에는 『<link rel="stylesheet" href="css경로포함파일명"』
     를 활용하여 외부의 CSS 를 해당 문서에 적용할 수 있도록 처리한다.


   - 문서 안에 포함하여 선언(Embedded Style)
     HTML Document 내부에
     『<style type="text/css">
	   선택자 {적용할 스타일 내용}
       </style>』
     과 같이 기술하여 스타일을 적용시키도록 처리한다.


   - 엘리멘트에 직접 선언(direct, Inline Style)
     스타일을 적용할 태그(엘리먼트)에 직접
     『style="적용할 스타일 내용"』
     형식으로 기술하여 처리한다.
     대상에 직접 적용하는 방식이기 때문에 선택자는 ■■■ DBCP(DataBase Connection pool)■■■

○ 커넥션 풀(Connection Pool) 기법이란,
  데이터베이스와 연결된 커넥션을 미리 만들어 풀(pool) 속에 저장해 두고 있다가.
  필요할 때에 커넥션을 풀에서 꺼내어 가져다 쓰고
  사용이 끝나면 다시 풀에 반환하는 기법을 말한다.

○ 데이터베이스를 연결하기 위한 커넥션(Connection)은 객체이다.
   이 객체는 새롭게 만들어지는 과정에서 많은 시스템을 자원을 요구하게 된다.
   객체가 메모리에 할당되고, 객체에 사용할 여러 자원들에 대한 초기화 작업
   그리고 객체가 더 이상 필요하지 않게 되었을 때 메모리를 회수하는 과정
   등에서 많은 비용이 발생하고 요구되는 것이다.

○ JSP 페이지를 생성할 때 마다 커넥션을 생성해서 사용하게 되면
  커넥션을 생성하고 회수하는데 많은 시스템 자원을 요구하게 되기 때문에
  동시 접속자 수가 많은 웹 어플리케이션의 경우 전체 성능을 떨어뜨리는 원인이 될 수 있다.
 이러한 성능 저하 문제를 해결하기 위해 사용하는 일반적인 방식이
  커넥션 풀(Connection Pool) 기법인것이다.

○ DBCP 를 사용하기 위해서는 기본적으로 세 개의 패키지가 필요하다.
  - Jakarta-Commons DBCP 1.2.1 (commons-dbcp-1.2.1 jar)
  - Jakarta-Commons Collections 3.1 (commons-collections-3.1.jar)
  - Jakarta-Commons Pool 1.2 (commons-pool-1.2.jar)

  ※ 하지만, 톰캣 6.x 부터 톰캣 서버 내부에 기본적으로 제공되기 때문에
    (경로 : Tomcat Root\lib 또는 Tomcat Root\common\lib)
    (파일 : tomcat-dbcp.jar) 
    다른 파일을 추가하거나 변경하지 않아도 무방하다.

○ 실습 환경 설정

 1. Eclips > Project Explorer > Server > Tomcat ... > context.xml
    파일 접근 및 열기

 2. 해당 파일의 맨 아래에... 즉, 『</Context>』 직전에 
    (Context 엘리먼트가 닫히기 전에...)
    -----------------------------------------------------------------------
    <Resource name="jdbc/myOracle" auth="Container"
			type="javax.sql.DataSource"
			driverClassName="oracle.jdbc.driver.OracleDriver"
			url="jdbc:oracle:thin:@localhost:1521:xe"
			username="scott" password="tiger"
			maxActive="20" maxIdle="10" maxWait="-1">
    </Resource>
    -----------------------------------------------------------------------
    내용을 추가한다.

    - name
      :리소스 식별을 위한 이름
    - auth
      :해당 리소스를 사용하게 되는 주체
    - type
      :리소스의 타입(패키지 경로 포함)
    - driverClassName
      :사용할 JDBC Driver 의 클래스 이름
    - url
      :JDBC Driver 에 의해 연결할 Connection 에 대한 URL
    - username
      : Connection 을 연결할 사용자 이름(오라클 사용자)
    - password
      : Connection 을 연결할 사용자 이름에 따른 비밀번호(오라클 암호)
    - maxActive
      : Connection Pool 이 제공할 최대 Connection 의 갯수
        (사이트 최대 커넥션 사용량을 기준으로 지정
         동시 접속자 수에 따라 지정)
    - maxIdle
      :사용되지 않고 풀(pool)에 저장될 수 있는 최대 Connection 의 갯수
    - maxWait
      :대기시간.(단위는 1/1000초)
       0보다 작게 설정할 경우 무한히 대기.■■■ EL(Expression Language) 과 JSTL(Jsp Standard Tag Library) ■■■

○ EL(Expression Language : 표현언어)

  EL 은 JSTL 1.0 스펙에서 잠깐 소개되었다가
  JSP 2.0 부터 공식적으로 포함되었으며
  JSP 페이지에서 사용되는 자바 코드를 대신해서
  액션 태그 엘리먼트의 속성에 값을 지정하는 역할을 한다.

  예를 들어
  <someTag:aTag> 액션 태그 엘리먼트 속성은 attribute 이고
  속상값은 <% pageContent.getAttribute("aName")%> 인 경우

  <someTag:aTag attribute="<% pageContent.getAttribute("aName")%>">
  의 방식으로 표현해야 하지만

  표현 언어(EL)에서는 다음과 같이 표현한다.
  <someTag:aTag attribute="${aName}">

  ==> - 표현 언어(EL)은 표현식(<%= %>)을 대신하는 효과를 갖는다.
      - null 을 가지는 변수(데이터)에 대해 좀 더 관대한 특징을 갖는다.
      - 데이터 형 변환을 자동으로 처리해준다.
      - setAttribute() 로 넘긴 데이터를 getAttribute() 로 받는 대신
        『${}』로 받는다.



○ JSTL(Jsp Standard Tag Library)

  JSP 에서는 XML 처럼 사용자가 태그를 정의해서 사용하는 것이 가능하며
  이와 같은 사용자 정의 태그를 커스텀 태그라고 하는데
  이들 중 자주 사용하는 것을 표준으로 만들어 놓은 것이 JSTL 이다.

  JSP Standard Tag Library(JSTL)는 일반적인 웹 어플리케이션 기능인
  반복(iteration)과 조건, 데이터 관리, 포맷, XML 조작, 데이터베이스 액세스를
  구현하는 커스텀 태그 라이브러리 모음이다.

  JSP 의 스크립트와 HTML 코드를 같이 혼용하여 사용하면
  개발의 편의성을 제공하긴 하지만 코드의 복잡성을 증대시키는 문제가 있다.
  이와 같은 문제를 해결하기 위해 로직 부분의 JSP 코드를 태그로 대치시켜
  HTML 과 같은 태그로 이루어진 코딩 방법이 제시되었다.

  JSTL 은 JSP 로직을 담당하는 부분인 if, for, while, DB처리 등과 관련된
  표준 커스텀 태그를 제공함으로써
  코드를 간결하고 가독성이 좋도록 하며
  데이터 포맷, 반복 콘텐트 또는 조건 콘텐트와 같은
  전형적인 표현 레이어를 위한 표준 구현을 제공하기 때문에
  JSP 작성자들이 어플리케이션 개발에 집중하는데 도움이 된다. 

  JSP(JSTL) 작성 시 주의할 사항은
  액션 태그도 그렇지만 JSTL 커스텀 태그도 XML 기반에서 작성되었기 때문에
  모든 태그는 시작 태그와 종료 태그의 쌍으로 이루어져야 한다는 것이다.

  기존의 컨텍스트에서 JSTL 을 사용하기 위해서는
  웹 어플리케이션 WEB-INF/lib 디렉터리에
  필요한 라이브러리를 복사하여 붙여넣으면 된다.
  JSTL 의 주된 라비르러리 파일은 jstl.jar,standard jar 파일이고,
  jaxen-full.jar, sxpath.jar, jsxp-api.jar 파일 등이 필요하다.
  이 파일들을 적재하고 컨텍스트를 리로드한다.

  - JSTL 을 사용하기 위한 환경 설정

   『http://jakarta.apache.org』에 접속한 후
    왼편에 구성된 메뉴 목록들 중...
   『Taglibs』클릭
    왼편에 구성된 메뉴 목록들 중...
   『Standard』 클릭 → 『https://tomcat.apache.org/taglibs/standard/』로 페이지 이동
    본문의 내용 중...
    『Standard 1.1』 항목의 download 클릭
    → 『https://archive.apache.org/dist/jakarta/taglibs/standard/』로 페이지 이동
    『binaries/』클릭
    『https://archive.apache.org/dist/jakarta/taglibs/standard/binaries/』로 페이지 이동
     본문의 목록들 중... 『jakarta-taglibs-standard-1.1.2.zip 2004-10-25 20:57  933K』 클릭
    → 다운로드 대화창 오픈
    → jakarta-taglibs-standard-1.1.2.zip 파일 다운로드
    → 다운로드 완료 후 압축 해제

    이후... (다운로드 및 압축 해제 후)...
    『jakarta-taglibs-standard-1.1.2\lib』 디렉터리 안에 있는
    『jstl.jar』 파일과 『standard.jar』 파일...
    이렇게 두 개의 jar 파일을
    현재 작업할(작업중인) 프로젝트의
    『WebContent > WEB-INF > lib』경로에 복사&붙여넣기 한다.

     다음으로...
     이클립스 환경 설정(메뉴 > windows > preferences) 클릭
     → Web 항목 > JSP Files > Editor > Templates 접근

     리스트의 항목들 중(체크 박스는 건드리지 말고...)
     『NEW JSP File(html 5)』항목 선택 후 수정(Edit... 버튼 클릭)

     버튼 클릭에 의해 열리는 대화창에서
     최초 디렉티브(page) 아래에 다음과 같은 내용 추가

    『<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>』


  - JSTL 사용
    
    JSTL 은 태생이 커스텀 태그이기 떄문에 JSP 와 밀접한 관계가 있다.
    application, session, request, response, pageContext 등의
    내장 객체에 쉽게 접근하며, 그 외에도 파라미터, 쿠키, 해더 등을
    복잡한 코드를 사용하지 않고 쉽게 직관저긍로 사용할 수 있다.
    또한, 기본적인 연산이나 객체 비교 등을 『.equals()』 메소드 등을
    사용하는 대신 『==』 『!=』와 같이 쉽게 구현하였으며,
    조건, 반복, 이동에 따른 태그를 지원하기 때문에
    태그만으로도 이들 기능을 구현할 수 있다.
   
    JSTL 의 처리 영역은 크게 4가지로 나누어진다.
    core, 		format, 	xml, 		sql
    (기본핵심기능)	(형식화)	(xml처리)	(sql처리)

※ 주요 분류 및 종류

  ○ Core
    - 기능 : 변수지원, 흐름제어, URL 처리 등
    - 접두어(prefix) : c
    - URI : http://java.sun.com/jsp/jstl.core

  ○ XML
    - 기능 : XML코어, 흐름제어, XML변환 등
    - 접두어(prefix) : x
    - URI : http://java.sun.com/hsp/jstl/xml

  ○ 국제화(형식화)
    - 기능 : 지역, 메세지 형식, 숫자 및 날짜 형식
    - 접두어(prefix) : fmt
    - URI : http://java.sun.com/jsp/jstl/fmt

  ○ 데이터베이스(sql)
    - 기능 : SQL지원
    - 접두어(prefix) : sql
    - URI : http://java.sun.com/jsp/jstl/sql

  ○ Functions
    - 기능 : 컬렉션 처리, string 처리 등
    - 접두어(prefix) : fn
    - URI : http://java.sun.com/jsp/jstl/functions


※ JSTL 에 taglib 추가 형식


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>■■■ Emmet(에밋) ■■■
(생산성 향상 도구)


○ 개요

   - 기존에는 Zen Coding(젠코딩) 이라는 이름으로 사용되었다.
   - 이후... Google 에서 이 도구를 수용하면서 emmet 이라는 이름으로 변경되었다.
   - HTML 생산성 향상 도구(HTML 코딩을 빠르게 하기 위한 플러그인)
   - CSS 선택자 사용(CSS3 지원)
     → HTML 을 CSS 선택자를 통해 검색하는 방법 대신
        CSS 선택자를 통해 HTML 을 생성하도록 하는 개념.

○ 환경 설정

   - 대부분의 툴에서 지원하고 있음
     (※ 그리고 대부분의 편집기 내에서의 액션 키 : Ctrl + E)


   - http://emmet.io/
     ① 메인 페이지 좌측에 있는 Download 메뉴 클릭
        → https://emmet.io/download/ 페이지로 이동

     ② Download 리스트들 중 본인이 사용할 편집툴(IDE)의 메뉴 클릭
     ③ Installation 항목에서 제시한 순서대로 진행
        (Go to Help > Install New Software… in your Eclipse IDE)


(Ctrl+d : 에밋 옵션과 충돌)

※ 특이사항
   
   Emmet 플러그인 설치 이후 이클립스 기본 단축키와 중복되는 항목이 존재함.
                            --------------------
                                  Ctrl + D



   ==> 단축키 재설정
       (이클립스 > Window(윈도우) > Preperences(설정) > General > Keys)■■■ GET 방식과 POST 방식 ■■■
	  (데이터 전송 / 페이지 요청)

○ GET 방식

  - GET 방식은 엽서를 보내는 방식과 유사한 전송 / 요청 방식
  - 주소 + 데이터 (모두 노출)
  - 전송할 데이터를 문자열 형태(Query String)로 URL 뒤에 인수로 붙여서
    전송을 수행하는 방법(방식)이다.
  - URL 뒤에 인수로 붙어있는 내용을 누구나 볼 수 있고
    이로 인해 보안성이 취약하다고 할 수 있다.
  - 또한, GET 방식은 보낼 수 있는 데이터 량에 한계가 있기 때문에(과거)
    많은 데이터를 보내는 경우 일정 크기 이상에서 잘림 현상이 발생한다.
    (길이 제한을 가진다는 의미이다. URL 최대 길이 2048char)
  - 특히나 <form> 태그에서의 GET 방식은
    서버로 데이터를 전송하는 과정에서 서버 처리가 지연될 경우
    중복해서 요청이 이루어지는 문제가 발생할 수 있다는 단점을 가지고 있다.
  - 형식 및 구조
    『URL주소?속성1=데이터1&속성2=데이터2&...』
    『URL주소?name=value&tel=value2&...』
  - GET 방식은 select 적인 성격(성향)을 가지고 있다.
    서버에서 데이터를 가지고 와서 보여준다거나 하는 용도로 주로 사용한다.
    서버의 값이나 상태를 바꾸는 용도로는 사용하지 않는다.
    즉, 단순 페이지 요청에 많이 사용된다는 것이다.
  - GET 방식의 장점은 여러 형태를 통해 간편한 데이터 전송이 가능하다는 것이다.
    POST 방식처럼 form 태그를 사용하여 전송도 하고,
    링크에 직접 걸어 사용해도 되고, 주소창에 직접 입력해도 된다.
    ex)
    <a href="http://url?키1=값1&키2=값2&...">
    <form action="http://url?키1=값1&키2=값2&...">
    window.open(href="http://url?키1=값1&키2=값2&...");
    window.location.hrf="http://url?키1=값1&키2=값2&...";
    window.location.replace("http://url?키1=값1&키2=값2&...");
		:
		:


○ POST 방식


  - 주소만 노출 / 데이터는 숨김
  - <form> 태그에서 method 속성의 값을 "post"로 설정해서 요청
  - 파일의 형태로 전송되기 때문에 URL 상에서는 내용이 나타나지 않는다.
    이로 인해 GET 방식에 비해 보안성이 높다고 할 수 있다.
  - POST 방식은 전송하는 데이터의 내용이 HTTP body 안에 숨겨져서 전송된다.
  - GET 방식처럼 URL 뒷부분에 추가해서 보내는 것이 아니라
    HTTP body 안에 넣어서 보내기 때문에 GET 방식에서 발생할 수 있는
    보안성 문제를 어느정도 해결할 수 있다.
  - GET 방식에 비해 대용량의 데이터를 전송할 떄 사용한다.
  - <form> 태그를 이용하여 submit 하는 일반적인 형태가 POST 방식이다.
  - POST 방식은 서버의 값이나 상태를 바꾸기 위해 주로 사용한다.
    글쓰기를 하게 되면 글의 내용이 데이터베이스에 저장되고
    수정을 하게 되면 데이터베이스에 수정된 값이 적용될 수 있도록
    처리하는 구성인 것이다.







■■■ HTML ■■■

○ HTML 개요

  HTML 이란 Hyper Text Markup Language 의 약어로,
  웹 페이지를 기술하기 위한 언어이다.
  마크업 언어(Markup Language)는 텍스트에 태그(ex <title>)를 붙여서
  텍스트가 문서의 어디에 해당하는지를 기술한 것이다.
  기본적으로 시작 태그가 있으면 종료 태그가 있는 것이 일반적인 형태이다.
  (ex <title>)문서의 제목</title>

○ HTML 의 변천사(축약)

  최초의 HTML은 팀 버너스리 라는 CERN(유럽 원자핵 공동 연구소)의
  물리학자가 만들었다.
  이후 W3C(World Wide Web Consortium)이 창립되어
  팀 버너스리의 주도 아래 HTML 에 대한 표준을 관장하고 있다.

 - 1999년
   HTML의 시작은 CERN의 팀 버너스리가 인콰이어를 제안하며 시작되었다.
   인콰이어는 CERN의 연구원들이 문자를 이용/공유하기 위한 체계였다.

 - 1991년
   비공식적인 CERN의 문서를 보면 1991년 말 팀 버너스리가 HTML 태그를 대중에 언급했다고 한다.
   HTML 기본서에서 제일 먼저 언급되는 HTML 태그가 1991년 처음 공개된 것이다.
   이 때 만들어진 태그 중 일부가 HTML 4 버전에도 여전히 존재한다.

 - 1992년
   1992년 7월 HTML DTD* 1.0 의 첫 번째 비공식 초안이 나왔으며
   11월 HTML DTD 1.1 비공식 초안이 발표되었다.

   ※ DTD(Document Type Declaration)
     DOCTYPE 이라고 불린다.
     DTD는 HTML이나 XML 문서에서 사용이 허가되는 요소나 속성을 정리한 것.
     즉, HTML 이나 XML 문서가 특정 형식 정의를 따르고 있다는 것을
     이를 수신하는 웹 브라우저에 알려주는 것을 말한다.
     간단히 말하자면 "이러이러한 형식으로 문서가 작성되었다."
     라고 선언하는 것이다.

  ※ XML(eXtensible Markup Language)
    W3C 에서 마크업 언어를 만드는 용도에서 권장되는 다목적 마크업 언어.
    XML 은 주로 다른 시스템, 특히 인터넷이 연결된 시스템끼리
    데이터를 쉽게 주고받을 수 있게 하여 HTML의 한계를 극복할 목적으로 만들어졌다.

  - (중략...)

  - 1999년 ~ 2000년
    1999년 12월 HTML 4.01 이 발표

  - 2001년 
    2001년 5월 W3C 에서 XHTML 1.1 권고안 발표.
    XHTML 1.1 은 모듈 기반은 XHTML.

  - 2002년 ~ 2006년
    2002년 8월부터 2006년 7월까지 총 8번의 XHTML 2.0 초안을 W3C에서 발표.
    하지만, 하위 호환성 문제와 HTML5에 의해 XHTML 2.0은 2009년에 개발 중단.


  - 2007년 ~ 2014년
    2007년 Web Application 1.0이 XHTML 2.0을 앞서면서(호환성 문제)
    W3C는 Web Application 1.0을 기초로 HTML Working Group 을 출범시키고,
    이 표준안으리 명칭을 HTML5로 변경


○ HTML 과 웹 브라우저
  우리가 보는 웹 페이지는 사실 HTML 문서이다.
  텍스트 기반으로 작성된 문서를 웹 브라우저가 시각적으로 향상된 형태로
  해석해서 우리에게 보여주게 되는 것이다.
  웹 브라우저마다 여러가지 장단점이 있다.
  우리나라 같은 경우는 윈도우 운영체제 및 ActiveX로 인해
  인터넷 익스플로러를 많이 사용하게 되었지만,
  HTML5 를 가장 잘지원하는 브라우저는 크롬이다. (2022년 3월 30일 기준)

  ※ HTML5 호환 정보 확인
    → http://html5test.com


○ HTML5 표준 기술과 API

  1. 웹 페이지의 내용은 HTML로 작성한다.			(구조)
  2. 웹 페이지의 스타일은 CSS로 작성한다.			(표현)
  3. 웹 페이지의 상호작용(동작,행위)은 Javascript로 작성한다.	(기능)

  ※ 구조와 표현과 기능을 분리한다. Check!!

 오래전부터 이와 같은 개발 방식을 사용하고는 있지만
 HTML5부터 웹 표준 기술로 확립되었다.
 이와 같이 작업함녀 웹 프로그래머와 웹 디자이너라는 업무 영역을
 나눌 수 있기 때문에 효율적인 개발이 가능하다.

 ※ 가장 오래 사용되었던 HTML 4.01에서 HTML5 로 넘어오면서 바뀐 점은
  『https://ko.wikipedia.org/wiki/HTML5』
  문서를 참조해서 확인할 수 있도록 한다.

  위의 해당 URL Document 에서 빠진 항목을 보충하자면
  - 오프라인으로 웹 애플리케이션 실행 가능
  - 드래그 앤 드롭
  - 웹 스토리지
  - 위치 정보 제공
  - 웹 SQL 데이터베이스
  - 파일 업로드와 관리 기능 제공
  - 웹 소켓 API
  등이 있다.■■■ JAVA Bean(자바 빈) ■■■

○ 개요
  - 자바로 작성되어진 컴포넌트(객체)들을 일반적으로 일컫는 말

○ 사용 목적
  - JSP 페이지에서 로직 부분을 분리하여 코드를 재사용함으로써
    프로그램의 구성 효율을 높이기 위함

○ JAVA Bean 만들기
  - 자바 빈은 자바 클래스이므로 자바 클래스를 설계하는 것과 기본 규칙이 같다
  - 자바 빈에서 멤버 변수를 프로퍼티(Probperty)라고 부른다.
  - 클래스 선언은 『public』, 프로퍼티 선언은 『private』으로 한다.
  - 프로퍼티 당 하나의 getter 와 setter 를 갖는다.
  - (매개변수가 없는) 기본 생성자를 포함한다.
  - 직렬화할 수 있어야 한다.
  - POJO(Plain old Java Object)■■■ Javascript 개요 및 기본 문법 ■■■

○ 개요

  컴파일 과정이 필요없거나 처리 과정이 적은 프로그램에 유리한 스크립트 언어로
  다른 언어에 비해 소스 코드의 수정 및 유지보수가 간편한 편이다.
  HTML 코딩에서 자바스크립트 소스의 명시만으로 웹 브라우저가 자동 실행된다.

  자바스크립트는 웹 페이지에서 가장 많이 사용되는 스키립팅(Scripting) 언어로
  스크립팅(Scripting) 언어는 크게 나누면
  자바스크립트나 DHTML, Visual Basic 등과 같은 브라우저 스크립팅(Browsesr Scripting),
  JSP,ASP,PHP 와 같은 서버 스키립팅(Sever Scripting) 언어로 구별할 수 있다.

  특히 자바스크립트는 서버 스크립팅(Sever Scripting) 언어로 연동되어
  입력란에 입력한 값이 제대로 된 값인지의 여부 등을 체크하는
  상호작용(Interactive)적 요소와 웹 페이지에 동적(Dynamic)인 효과 등을
  적용하는 부분에 사용되며, 그 밖에도 다양한 기능을 사용자가 추가하여
  사용하는 매우 중요한 요소라고 할 수 있다.


  ※ Javascript 는 HTML Document 에
    상호작용(Interactive)하는 요소와 동적(Dynamic)인 요소를
    추가하기 위해 사용하는 언어라고 할 수 있다.


○ HTML 문서에 Javascript 추가
  
  1. Inline Javascript(HTML Tag 속에 지정하여 사용)
    <a href="javascript:location.href='http://naver.com'">네이버</a>

  2. Embeded JAvascript 와 Script Block(Script Block 속에 일괄 지정하여 사용)
     <script type="text/javascript">
	document.write("어쩌구 저쩌구");
     </script>

     ※ 여기서 document 는 HTML 문서 Object 를 의미하며
       write() 함수는 document Object 에 출력하는 것을 의미한다.

  3. Linked Javascript(외부 파일을 링크하여 여러 개의 파일에 일괄 지정하여 사용)
     <script type="text/javascript" src="url경로지정"></script>

○ Javascript 의 기초 구문과 주요 데이터 타입

  1. Javascript 의 주석문(comment)
     라인 단위 주석문의 경우 2개의 slash(『//』)를 주석문 앞에 붙여 사용하고
     블럭 단위 주석문의 경우 『/* 여러줄 주석*/』과 같은 혀앹로 사용한다.

  2. Javascript의 명령 line 처리
     2개 이상의 script 명령을 사용할 경우 『;』(세미클론)으로 구분할 수 있도록 한다.
    (개행 역시 구분자의 역할을 수행하지만 가급적 『;』를 붙여서 사용할 수 있도록 한다.)

  3. Javascript 에 사용되는 주요 데이터타입
    - 정수
      : 0 ~ 9 사이의 가 자릿수에 해당하는 음수인 양수
        따옴표 속에 넣지 않는다.
    - 실수
      : 0 ~ 9 사이의 각 자릿수에 해당하는 음수와 양수를 포함한 부동 소수
        따옴표 속에 넣지 않는다.
    - Boolean(true or false)
      : true 와 false 의 논리형
    - String(문자열)
      : 사용할 수 있는 모든 문자를 의미하며
        따옴표(『""』 or 『''』)속에 넣어서 사용한다.


○ Javascript 배열
   
  1. 1차원 배열 선언 - 크기 지정 없이 선언 가능

     var 변수명 = new Array();
     변수명[0] = 값1;
     변수명[1] = 값2;
     변수명[2] = 값3;
	:
	:
     var 변수명 = new Array(값1, 값2, 값3, ...);

     var 변수명 = [값1, 값2, 값3 ...];

   2. 2차원 배열 선언 = 크기 지정 없이 선언 가능

     var 변수명 = new Array();
     변수명[0] = new Array();
     변수명[1] = new Array();
     변수명[2] = new Array();
	:
     변수명[0][0] = 값1;
     변수명[0][1] = 값2;
     변수명[0][2] = 값3;
	:

     var 변수명 = new Array(new Array(), new Array(), new Array(), ...);
     변수명[0][0] = 값1;
     변수명[0][1] = 값2;
     변수명[0][2] = 값3;
	:

     var 변수명 = [[값1, 값2, 값3, ...], [], [], ...];

   3. 문자열.split(구분자)
  
     var str = "1 2 3 4 5";
     var arr = str.split(" "); //-- 1차열 배열 반환
     for (var n=0; n<arr.length; n++)
	{
	   document.getElementById("result").value += arr[n] + "";
	}
     //--==>> 1 2 3 4 5

■■■ JDBC 연동 게시판 작성 실습 ■■■

○ 프로젝트 : WebApp20

○ 물리적 파일 구성

  00. WebApp20_scott_sql

  01. DBConn.java
  02. BoardDTO.java
  03. BoardDAO.java
  04. MyUtil.java

  05. List.jsp
  06. Created.jsp
  07. Created_ok.jsp
  08. Article.jsp
  09. Updated.jsp
  10. Updated_ok.jsp
  09. Delete_ok.jsp


■■■ jQuery(제이쿼리) ■■■

○ 개요

   - jQuery 는 빠르고 간결한 Javascript Library
   - HTML Document traversing, 이벤트 처리, 애니메이션,
     AJAX 를 단순화하여 빠른 웹 개발을 가능하게 한다.
   - CSS 규격 지원 : CSS 1 ~ 3 와 기본 XPath 지원.
   - 다양한 브라우저 지원
   - 경량 파일(약 90kb 수준의 파일 크기)
   - John Resig 에 의해 개발

○ jQuery 를 사용함으로써 얻을 수 있는 장점

   - HTML 과 DOM, CSS 의 변경이 간편하다.
   - 이벤트 처리가 간편하다.
   - 애니메이션과 같은 각종 효과를 적용하기 쉽다.
   - AJAX, JSON과 같은 처리가 간편하다.
   - 브라우저 호환성을 해결할 수 있다.


○ jQuery 다운로드 및 라이브러리 포함

   - jQuery 다운로드
     http://jquery.com/

   - jQuery 를 사용하기 위한 라이브러리 포함
     1. 로컬 PC 저장소에 물리적으로 존재할 때
     (즉, 제이쿼리 파일을 다운로드 받은 경우,
      특정 디렉터리 안에 들어있을 때 그 경로까지 지정해 주어야 한다.)
	<script type="text/javascript" src="jquery-x.x.x.js"></script>
     2. CDM 으로 직접 경로 지정
	<script type="text/javascript" src="http://code.jquery.com/jquery.x.x.x.js"></script>
   - jquery UI 를 사용하기 위한 라이브러리 포함
     <link rel="stylesheet" href="jquery-ui.css"></link>
     <script type="text/javascript" src="jquery-x.x.x.js"></script>
     <script type="text/javascript" src="jquery-ui.x.x.x.custom.min.js"></script>
     또는
     <link rel="stylesheet" href="http://code.jquery.com/ui/...css"></link>
     <script type="text/javascript" src="http://code.jquery.com/ui/...js"></script>
     <script type="text/javascript" src="http://code.jquery.com/ui/...-ui.js"></script>



○ jQuery 의 사용 방법(2가지)

  1. http://jquery.com/ 에서 파일을 다운로드하여 사용하는 방법
     ※ 다운로드 받을 수 있는 종류
       - 『production』버전
         : 소스를 압축(불필요한 공백 및 개행 제거) 해서
	   웹 서버에서 빠르게 실행할 수 있도록 경량화/최소화 한 버전.
       - 『development』버전
         : 테스트나 디버깅 또는 코드에 대한 분석을 위해
	   압축을 하지 않고 가독성을 높여놓은 버전.
  	   (공백 및 개행 처리가 되어있음.)

   2. COM(Content Delivery Network)를  통해 사용하는 방법
      별도의 파일을 다운로드 할 필요 없이
      『<script type="text/javascript" src="http://code.jquery.com.jquery-x.x.x.js"></script>』
      와 같은 구문을 통해 참조하여 포함시킬 수 있도록 한다.

○ jQuery 참조 및 학습 사이트
   - http://try.jquery.com/
   - http://learn.jquery.com/
   - http://www.w3schools.com/jquery/

■■■ JSON(JavaScript Object Notation)■■■

○ JSON(JavaScript Object Notation) 이란?
  - JavaScript Object Notation, RFC 4627
  - JavaScript 구문 형식을 따르며, 언제나 플랫폼에 독립적
  - 미디어타입 : 'application/json'
  - 표현 가능한 자료형
    : object,array,string,number,boolean,null


○ 개요
  JSON(JavaScript Object Notation)은
  네트워크 상에서(대표적으로 인터넷 상에서) 데이터를 주고 받을때,
  그 데이터를 표현하는 방법이다.
  자료의 종류에 큰 제한은 없으며
  특히 프로그램의 변수값을 표현하는데 적합하다.

  JSON(JavaScript Object Notation)은 경량 데이터 교환 방식으로
  사람이 읽고 쓰기에 용이하며,
  기계가 분석하고 생성하는 과정도 비교적 단순하고 용이하다.
  Javascript Programming Language, Standard ECMA-262 3rd Edition
  의 일부에 토대를 두고 있으며,
  JSON 은 완벽하게 언어로부터 독립적이지만
  C 계열 언어, 자바, 자바스크립트 등 다수 개발자들에게
  매우 친숙한 관습을 사용할 수 있도록 지원하는 텍스트 형식이다.
  이와 같은 특성들로 인해 JSON 은 이상적인 데이터 교환 언어로 사용되고 있다.

※ JSON 은 문자열 형식이기 떄문에 네트워크 전송 시 유리하다.(유용하다.)
  데이터에 접근하기 위해서는 Native JSON 객체로 변환해야 한다.
  (Javascript 는 JSON 전역 객체를 통해 문자열과 JSON 객체의 상호 변환을 지원한다.)

※ 문자열에서 Native Object 로 변환하는 것을 파싱(Parsing)이라 한다.
  네트워크를 통해 전달할 수 있게 객체를 문자열로 변환하는 과정은
  문자열화(Stringfication)라고 한다.

○ 특징
  ① 경량 데이터 교환 방식
  ② 데이터 표현이 단순하고 직관적
  ③ Javascript 에서 eval() 을 통해 parsing 가능
     - 라이브러리 필요 없음(예외의 경우도 존재함)
     - 크로스 브라우저 호환 문제 없음

○ 구조
  JSON 은 두 개의 구졸르 기본으로 두고 있다.
  - name / value 형태의 쌍으로 collection 타입
    다양한 언어에서 object, record, struct(구조체), hashtable,
    키가 존재하는 list, 연상 배열 등으로 실현되었다.
  - 값들의 순서화된 리스트
    대부분의 언어들에서 array, vector, list, sequence 등으로 실현되었다.


○ 참조
  JSON 공식 홈페이지
   -http://www.json.org

○ JSON의 기본 문법
  ※ http://www.json.org/json-ko.html → 설명문서 참조
  ① 표현하고자 하는 데이터는 『{}』로 감싼다.
  ② 데이터는 『name:value』형식으로 표현한다.
  ③ 각각의 값들은 『,』로 구분한다.
  ④ name 은 『""』로 감싸거나 그냥 사용해도 무방하다.
    - 『"name":"곽유진"』또는 『name:"곽유진"』
  ⑤ value 는 String, number, 배열, true, false, null 등
    - String 은 『""』로 감싼다.
    - 배열은 『[]』로 값들을 감싼다.

   1) 프로퍼티 ↔ 값
      var obj = 
      {
	 "프로퍼티명" : "값"
      } 

   2) 메소드
      var obj = 
      {
	 "메소드명" : function() {...}
      } 

   3) 메소드(인수)
      var obj = 
      {
	 "메소드명" : function(인수) {...}
      } 


○ JSON 의 데이터 타입(자료형)
  - string
  - number
  - boolean
  - null
  - array
  - object 

  ※ JSON Obejct 의 각 프로퍼티 자료형은
    『typeof』를 통해 확인이 가능하다.

  - string
    ·string 은 큰 따옴표 안에 둘러싸인 zero 이상의 유니코드 문자들의 조합이며,
     backslash excape 가 적용된다.
    ·하나의 문자(character)도 하나의 문자열(charcater string)로 표현된다.
    ·문자열은 반드시 이중인용부호 『""』로 감싸준다.    
    ·모든 문자를 \uxxxx (\u에 이어 4자리의 16진수로 표현한 unicode)로 표현 가능.
     "가나다" 			→ 단순 문자열
     "\uAC00\uB098\uB2E4"	→ escape 표기한 "가나다" 문자열
     "foo\\bar\n"		→ backslash(\\) 와 개행(\n)

  - number
    ·number 는 8진수나 16진수 형식을 사용하지 않는다.
    ·정수, 실수 모두 처리가 가능하다.
    ·정수와 부동소수점 포함 10진 표기로 한정한다.
     10				→ 정수 값
    -100			→ 음의 정수 값
    30.1			→ 실수 값
    1.0e-10			→ 지수 표현 값

  - boolean
    ·boolean 은 true / false 데이터를 사용한다.
    ·true, false 모두 소문자로 기술한다.
    ·C 나 JAVA 에서 사용하는 boolean 형과 비슷하다.

  - null
    ·null 은 어떤 특정 형태를 담기 이전의 상태로... object 로 취급받게 되며,
     데이터가 할당되면(담기면), 할당된 데이터에 따라 다시 구분된다.
    ·반드시 『null』이라고 소문자로 기술한다.

  - array
    ·array 는 데이터들이 순서화된 collection 이다 (순서를 가진 값의 집합)
    ·array 는 『[』로 시작해서 『]』로 끝내어 표현한다.(『[]』로 감싸서 표현)
    ·『,』(컴마)로 데이터들을 구분한다.
    · 1차원 형태, 2차원 형태 모두 존재한다.
     ["foo","bar","baz"]				→ 문자열의 배열
     [{"foo":"bar"},{"key":"value"}]			→ 오브젝트 배열
     [[10,20],[40,50]]					→ 배열의 배열
     []							→ 빈 배열
     [{"foo":"bar"}, "baz", 100, true, null]		→ 복잡한 배열(→ 가능)

  - object
    · object 는 name 과 vlaue 쌍들의 비순서화된 SET 이다.
    · object 는 『{』 시작하고 『}』로 끝내어 표현한다.(『{}』로 감싸서 표현)
    · 각 name 뒤에 『:』(클론)을 붙인다. (이름과 값을 『:』로 구분)
    · 『,』(컴마)로 쌍들 간을 구분한다. (『,』로 각 멤버 구분)
    · 이름과 값의 집합, 이름은 항상 문자열, 값은 JSON의 자료형 가능
    {
	"name":{"first":"John", "last":"Doe"}
	, "blog":"http://blog.example.com"
	, "age"L52
	, "interests":["Web","XML","REST"]
    }

○  일시(날자)
   - JSON 에서 기본적으로 제공하는 자료형에 일시(날짜)는 없음.
   - 개발자 스스로 규칙을 정해서 사용
   - 가장 단순한 방법으로는 UNIX 시간을 수치로 표현
     (1234567890 → 2009년 2월 14일 8시 31분 30초)
   - UNIX 는 타임존을 다루지 못함
     타임존이 필요할 시 Javascript 의 Date 객체 toString() 메소드 이용.
     ("Mon Nov 01 2023 05:43:35 GMT+0900" → Firfox 3.6)
     ("Mon Nov 01 2023 05:43:35 GMT+0900" → IE 8)
   - Javascript 는 브라우저 별로 출력 내용이 달라지기 때문에
     표준적인 ISO-8601 사용 권장


○ 링크
   - 단순히 URL 를 문자열로 표현
      {
	  "href":"http://example.com/foo/bar"
      }
   - URL 는 상대 URL 가 아닌 절대 URL 로 표현 권장
   - 멤버 이름을 링크를 나타내는 값으로 지정하여 표현 권장

※ 크로스 도메인 통신
   - 불특정 다수의 서버에 엑세스 하는 것을 『크로스 도메인 통신』이라함.
   -  AJAX 에서 사용하는 XMLHttpRequest 라는 Javascript 모듈은
     보안사 제한으로 하나의 서버와 통신 가능
   - <script>요소를 이용해 크로스 도메인 통신 가능.
   - JSONP(JSON with Padding)은 브라우저의 <script>요소를 이용해
     크로스 도메인 통신 구현
   - 클라이언트가 지정한 콜백 함수명을 래핑하여 크로스 도메인 통신 구현




     ■■■ JSP 데이터 송수신 실습 ■■■

ex) Aaa.html → Bbb.jsp
    Aaa.html → Bbb.java(Servlet)
    Aaa.jsp  → Bbb.jsp
    Aaa.jsp  → Bbb.java(Servlet)


Aaa 페이지에서는 <form> 태그 및 action, method 속성 필요
    <input> 이나 <button> 의 type="submit" 속성 필요
Bbb 페이지에서는 request 객체의 getParameter() 메소드 필요

1. request 내부 객체

   request 내부 객체는 웹 브라우저에서 JSP(또는 Servlet) 페이지로 전달되는 정보의 모임으로
   HTTP 헤더와 HTTP 바디로 구성되며, 웹 컨테이너는 요청된 HTTP 메세지를 통해
   HttpServletRequest 객체 타입인 request 객체로 사용된다.
   즉, request 객체는 웹 브라우저가 JSP(또는 Servlet) 페이지로 보낸 내용에 대한
   정보를 갖고 있는 내부 객체인 것이다.


2. String getParameter(name)

   이름이 name 인 파라미터에 할당된 값을 반환하며,  
   지정된 파라미터 값이 없으면 null 을 반환하다.


3. String[] getParameterValues(name)

   이름이 name 인 파라미터의 모든 값을 String 배열로 반환한다.
   주로 checkbox 등 동일한 이름을 사용하는 form 태그의 값을 반환받기 위해 사용한다.


4. void setCharacterEncoding(encode)

  전송된 데이터의 문자 인코딩 방식을 지정한다.
■■■ JSP 액션 태그(Action Tag) ■■■

○ 개요

  JSP 액션 태그는 클라이언트 혹은 서버에
  어떤 동작을 수행하도록 명령을 내리는 태그로
  JSP 페이지 안에서 자바 빈즈를 사용할 수 있도록 하는 액션 태그와
  페이지를 활용할 수 있도록 하는 액션 태그로 나눌 수 있다.


  - JSP 빈과 관련된 액션 태그
    <jsp:useBean>, <jsp:setProperty>, <jsp:getProperty>

  - JSP 페이지 모듈과 요청흐름 처리를 위한 액션 태그
    <jsp:include>, <jsp:forward>, <jsp:param> 등


○ 형식 및 구조
  
  『<jsp:액셔냍그 속성="값">태그에 들어있는 내용</jsp:액션태그>』
  『<jsp:액셔냍그 속성="값/>"』← 태그에 들어있는 내용이 없을 경우



※ 스코프(Scope)

  JSP 액션 태그를 통해 생성된 객체는
 그 객체가 사용될 수 있는 스코프 혹은 라이프사이클(Life Cycle : 생명주기)
  속성을 갖는데, 이것은 생성된 객체의 레퍼런스가 어디에서 사용될 수 있고,
  언제 삭제될 것인지를 기술한다.



  - page
  생성된 객체는 단일 클라이언트의 요청에 의해 생성된 페이지 내에서 접근하여 사용될 수 있다.
  생성된 객체는 실질적으로는 pageContext 에 저장된다.

  - request
   생성된 객체는 단일 클라이언트의 요청이 처리되는 동안에 접근하여 사용될 수 있다.
   request 가 page 와 다른 점은
   request 에서는 forward 나 include 를 사용해서 다른 페이지로 제어가 이동되는 경우에도
   객체에 접근하여 사용할 수 있다.
   생성된 객체는 실질적으로는 HttpServletRequest 에 저장된다.

  - session
   생성된 객체는 사용자의 세션이 유지되는 어느 곳에서나 접근하여 사용될 수 있다.
   생성된 객체는 실질적으로 HttpSession 에 저장된다.

  - application
    생성된 객체는 웹 응용프로그램의 라이프 사이클 도안에
    웹 응용프로그램에 소속된 임의의 Servlet 과 JSP에서 접근하여 사용될 수 있다.
    생성된 객체는 실질적으로 ServletContext 에 저장된다.

○ <jsp:param>

  <jsp:param> 태그는 요청한 페이지로 정보를 전달할 때 사용하는 태그로
  현재 페이지에서 요청한 페이지로 인자(parameter)와 인자값(value) 형태로 넘겨준다.

  <jsp:param name="pageName" value="var />

  ※ 이 태그는 단독으로 사용하지 못하고
   <jsp:include> 나 <jsp:forward> 태그의 내부에 기술하여 사용한다.

 - name 속성
   포함되는 JSP 페이지에 전달할 파라미터의 이름을 표시

 - value 속성
    전달할 파라미터 값을 표시
    이 때, value 속성값으로 표현식을 사용하는 것도 가능하다.


○ <jsp:forward>

  <jsp:forward> 태그는 현재 머물고 있는 JSP 페이지에서
  URL로 지정한 특정한 페이지로 넘어갈 때 사용하는 태그로
  현재 페이지에서 조건에 따라 서로 다른 페이지를 호출할 경우 사용된다.
  이 태그의 특이한 점은, 현재 페이지에 대한 URL 만 나타날 뿐
   제어가 넘어간 특정 페이지의 URL이 전혀 나타나지 않는다는 점이다.
  클라이언트의 웹 브라우저 주소란에 보이는 URL 과
  실제 브라우저에서 읽어들이고 있는 문서가 서로 다르기 때문에
  사용자는 이러한 상황이 벌어지고 있는지를 감지할 수 없다.
  그리고 제어가 넘어갈 때 request 내부 객체도 같이 전달된다.

  <jsp:forward page="이동할페이지이름" />

  - page 속성
    이동할 페이지의 이름을 기술하며
    page 속성의 값인 이동할 페이지의 이름은
    웹 어플리케이션 상대 경로나, 웹 어플리케이션 절대 경로로 지정할 수 있고,
    표현식을 사용할 수도 있다.

  - <jsp:forward> 액션 태그에서
    <jsp:param> 태그로 프로그램의 제어가 이동할 페이지에 파라미터 값을 전달할 수 있으며
    전달받은 값은 『request.getParameter("파라미터이름")』으로 넘겨받는다.

    <jsp:forward page="이동할페이지이름">
       <jsp:param name="paramName1" value="var1" />
       <jsp:param name="paramName2" value="var2" />
    </jsp:forward>

  - 단순히 page 속성에 지정된 페이지로 이동하는데 그치는 것이 아니라
    이동할 페이지에 자신의 정보를 파라미터 형식으로 전달할 수 있는 것이다.

    <jsp:forward page="/View.jsp" .>
    <%
   	String url = "/to.jsp";
    %>
    <jsp:forward page="<%=url%> />

○ <jsp:include>

  <jsp:include> 태그는 웹 페이지에서 공통된 페이지를 모듈화하여
  레이아웃을 구성(작성) 할 수 있도록 지원하는 태그이다.
  include 디렉티브(<%@ inlclude%>)와 함께
  다른 페이지를 현재 페이지에 포함시킬 수 있는 기능을 가진 태그이다.
  단, include 디렉티브는 단순하게 소스의 내용이 텍스트로 포함되지만
  <jsp:include> 액션 태그는 포함시킬 페이지의 처리 결과를
  포함시킨다는 점에서 차이를 갖는다.
  포함되는 페이지는 html, jsp, sServlet 페이지 모두 가능하며
  include 디렉티브는 주로 조각 코드를 삽입할 때 사용되고
  <jsp:include> 액션 태그는 페이지를 모듈화 할 때 사용된다.
  즉, 템플릿 페이지를 작성할 때 주로 사용된다는 것이다.
   또한, <jsp:include> 액션 태그는 같은 request 기본 객체를 공유한다.

  <jsp:include page="url" flush="false" />

  - page 속성
    현재 페이지에 결과가 포함될 대상 페이지의 이름

  - flush 속성
    출력 버퍼의 플러시 유무
    포함될 페이지로 이동할 때 현재 페이지가 지금까지
    출력 버퍼에 저장한 결과를 어떻게 처리할지를 결정한다.
    flush 속성의 값은 false 로 설정하는 것이 일반적이다.
    flush 속성의 값을 true 로 지정할 경우
    일단 출력 버퍼의 내용을 웹 브라우저로 전송하게 되는데
    이 때, 헤더 정보도 함께 전송된다.
    헤더 정보가 일단 웹 브라우저(클라이언트)로 전송되고 나면
    이후 헤더 정보를 추가하거나 수정하더라도 결과가 반영되지 않는다.

    <jsp:include page="url" flush"false">
         <jsp:param name="paramName1" value="var1" />
         <jsp:param name="paramName2" value="var1" />
    </jsp:include>


※ 자바 빈즈(Java bean)

  JSP 페이지에 화면 출력 부분과 로직들이 섞여있는 형태로 코드를 작성할 경우
  JSP 페이지를 이해하기 어렵고 디자이너와의 협업도 어려워진다.
  또한, JSP 페이지에 홤녀 출력 부분과 로직들이 혼재한 형태의 코드는
  재사용을 하는 것도 어려워지게 만든다.
  JSP 에서는 자바로 작성한 자바 클래스 중에
  자바 빈즈 규약에 맞게 작성된 클래스를 JSP 에서 사용 가능하게 하였으며
  이를 통해 프리젠테이션(웹 디자이너 측) 부분과
  비지니스 로직(개발자 측)을 처리하는 부분을 분리하여 작성할 수 있다.
  이렇게 함으로써 웹의 내용으로부터 웹의 표현 부분을 분리하게 되고
  동적인 웹 페이지 제작을 위한 개발과 관리에 있어 명확한 분리가 가능하다.
  또한, 같은 기능이 페이지 구성이 다르다는 이로 반복적으로 사용되는 경우
  웹 페이지를 효율적으로 작성, 수정하려면 반복적으로 사용되는 코드를
  재사용할 수 있어야 한다.
  빈은 이와 같은 효율적인 코딩 작업을 가능하게 한다.

  현재 개발되었거나 개발중인(작업중인) 프로그램들은 모두
  MVC 기법에 의해 개발되고 있다.
  MVC 기법은 프로그램을 모델(Model), 뷰(View), 컨트롤러(Controller)로
  나누어 개발을 하게 되는데...
  Model 은 로직을 가지고 있는 부분으로 DB와 연동 등을 처리하는 부분이고,
  View 는 사용자에게 제공하는 화면으로 UI(User Interface)에 해당하며,
  Controller는 View와 Model 사이엥서 흐름을 제어하는 개념이다.

  JSP 페이지가 MVC 에서 View 에 해당하고,
  바로 이 View 를 모듈화 하는 것이 템플릿 페이지이며,
  자바 빈즈는 Model 에 해당한다고 볼 수 있다.

○ <jsp:useBean>
  
  <jsp:useBean> 액션 태그는
  자바 객체를 생성하거나 기존에 만들어져 있는 객체를 반환한다.

  <jsp:useBean id="name" scope="page|request|session|application" typeSpec />

  - id 속성
    객체 인스턴스를 식별하는 이름으로 대소문자를 엄격하게 구분한다.
    한 번 생성된 Bean 이 소멸할 때 까지는 같은 id 를 중복해서 사용할 수 없다.

  - scope 속성
    객체 참조 범위로, 기본값(default)은 page 이다.
    · page
     객체 참조는 service() 호출이 종료될 때 소멸
    · request
      HttpServletRequest 객체가 소멸되지 않는 한 존재하며,
      컨테이너에 의해 생성된 서블릿은
      HttpServletRequest 의 setAttribute() 메소드를 이용하여
      객체를 HttpServletRequest 에 바인딩시킨다.
    · session
      객체는 클라이언트의 요청과 구별되며,
      session 이 살아있는 동안 존재하며,
      컨테이너에 의해 생성된 서블릿은
      HttpSession 의 putValue(String key, Object value) 메소드를 이용하여
      객체를 HttpSession 에 바인딩시킨다.
    · application
      가장 수명(생명주기)이 길다.
      ServletContext 의 setAttribute()를 통해
      객체를 ServletContext 에 바인딩 시킨다.

   - typeSpec 속성
     class="class_name" |
     class="class_name" type="type_name" |
     type="type_name" class="class_name" |
     beanName="bean_name" type="type_name" |
     type="type_name" beanName="bean_name" |
     type="type_name"
     · class
      완전한 형태의 클래스 이름으로
      branName 이 정의되어 있지 않은 상황이라면 반드시 정의해야 한다.
     · beanName
      java.beans.Beans 클래스의 instantiate() 메소드에 사용할 bean 이름으로
      type 과 beanName 을 지정한 경우에는 class 를 생략할 수 있다.
      주로 class 인자를 쓰지 않을 경우 사용한다.
      내부적으로 컨테이너는 id 와 scope 를 이용해서 객체를 찾게된다.
      이 과정에서 찾지 못하게 될 경우 현재 클래스 로더로 instantiate()
      메소드를 호출하는데, 이 때 bean 의 이름을 인자로 전달하게 된다.
      이 인스턴스의 생성이 실패하게 되면 예외가 발생한다.

     · type
      클래스의 형(type)을 지정하는, 생략 가능한 특성이다.
      객체가 이 특성으로 지정된 형(type)이 아닐 경우
      ClassCastException 예외가 발생하게 된다.

      <jsp:userBean id="name" scope="page" typeSpec>
	 <jsp:setProperty name="bean_name" prop_expr />
	 <%
  	   	//스크립릿을 이용하여 다른 속성 값을 호출하는 기능을 가진
   		// 함수를 호출할 수도 있다.
	  %>
       	</jsp:useBean>

○ <jsp:setProperty>

  <jsp:setProperty> 액션 태그는 자바 빈에 속성 값을 할당한다.
  name 속성에 기술된 이름에 해당하는 bean 클래스는
  <jsp:setProperty> 액션 태그를 이용해서 이 액션이 나타나기 전에 미리 정의되어야 한다.

  <jsp:setProperty name="bean_name" prop_expr />

  - name 속성
    <jsp:useBean> 액션 태그에 정의된 bean 인스턴스 이름

  - prop_expr
    property="*" |
    property="property_name" |
    property="property_name" param="parameter_name" |
    property="property_name" param="parameter_value" |
    · property
      값을 설정하고자 하는 bean 속성의 이름으로
      『"*"』으로 설정하면 ServletRequest 안의 모든 인자들 중
      bean 속성과 데이터타입이 일치하는 것을 찾아서
      각각의 속성들을 각각의 인자들의 값으로 설정한다.
      값이 『""』인 경우 속성은 변하지 않는다.
    · param
      bean 속성에 설정하고자 하는 값을
      파라미터에서 지정하고자 할 경우 사용한다.
    · value
      bean 속성에 설정할 값을 지정하며
      하나의 <jsp:setProperty> 액션 태그가 param 과 value 를 동시에 가질 수 없다.

○ <jsp:getProperty>

  <jsp:getProperty> 액션 태그는 bean 속성 값을 얻는데 사용한다.
  bean 의 속성 값을 얻어 String 으로 변환한 다음 출력 스트림으로 보낸다.

  <jsp:getProperty name="name" property="property_name" />
  
  - name 속성
    속성을 얻고자하는 bean 의 인스턴스 이름

  - property 속성
    얻고자 하는 속성의 이름





■■■ JSP(Java Server Pages) ■■■

1. JSP(Java Server Pages) : 웹 프로그램 작성 언어의 한 종류

2. JSP(Java Server Pages)는 동적(Dynamic)인 웹 페이지를 
   비교적 간단히 만들 수 있는 방법을 제공하는
   자바를 기반으로 하고 있는 스크립트 언어(Server Side Script)로
   자바 엔터프라이즈 어플리케이션에서 UI(User Interface) 영역을
   담당하고 있다.

3. JSP는 자바를 서버 환경에서 사용하는 스크립트 방식의 ㅇ너어로
   단일 스레드로 클라이언트의 요청에 서비스한다.
   요청이 있을 때 마다... 즉, 객체가 생성될 때 마다...
   프로세스를 생성하는 기존의  CGI 와는 달리
   하나의 메모리를 공유하면서 서비스되는 원리르 갖고 있다.
   이러한 원리는 서버측 부하를 줄여주며,
   JSP 내부에는 보여주는 코드만 작성하고
   직접 작업하는 부분은 자바 빈으로 구성하여 둘을 분리할 수 있다.
   이는 서로 영향을 주지 않으면서 수정할 수 있는 장점을 취하며,
   JAVA 가 갖고있는 장점인 재사용성을 높일 수 있게 한다.

   클라이언트 <---------------------------> 서버
   HTML, CSS, Javascript <----------------> JSP(JAVA)
   브라우저(IE, CR, FF 등) <--------------> 웹 서버(톰캣), 오라클
   요청 <---------------------------------> 응답(HTML 웹 페이지)


4. JSP 실행 구조
  
  1단계. 웹 클라이언트에서 웹 서버에 웹 프로그램(페이지) 요청
  2단계. 웹 서버에서 웹 클라이언트가 요청한 JSP 프로그램(페이지) 로드
  3단계. JSP 페이지에 대한 변환 실행
        ※ 이 과정에서 일반 『.java』인 파일로 변환된다. 『→ Servlet』
  4단계. 『.java』인 파일로 변환된 Servlet 의 컴파일(.class) 및 실행
  5단계. 실행 결과로 동적 생성된 HTML Document 를 클라이언트 측에 응답
  6단계. 웹 클라이언트는 응답받은 HTML Document 를
         브라우저에서 웹 페이지 형태로 출력

5. 이클립스 JSP 개발 환경 구축

  1) 프로젝트(new) 생성 시 『Dynamic Web Project』 선택
  2) 프로젝트 명 입력 시 식별자 작성 규칙을 준수
    원래 규칙에 따르면 『JspTest001.jsp』와 같이 명명해야 하지만,
    클라이언트  측에서(대소문자 구분없이) 좀 더 편하게 사용할 수 있도록
    일단 지금은 『jsptest001.jsp』와 같이 명명한다.
  3)Target Runtime 지정 → 톰캣 설치 디렉터리 연결
  4)프로젝트 생성 후에는 Server 탭에서 톰캣 서버 등록
    (단, 서버를 새로 등록했을 경우 서버 관련 설정을 재구성)
  5)톰캣 서버에 프로젝트 등록 → add and remove
  6) 톰캣 서버 시작(재시작)
    ※ 이 시점에서....
    포트 번호 설정 및 확인 필요
    (오라클이 웹 상에서 port 8080을 사용하기 땜누에 충돌 방지)
    『Project Explorer』의 『Server』디렉토리 노드를 확장하면
    『server.xml』파일이 존재하며 이 파일을 열어 63 ~ 65 정도 라인의 내용을 수정한다.

     <Connector URIEncoding="UTF-8" ... port="3306" />
		------------------      -----------
                ↑ 추가 			↑ 수정 (기본 8080)

     ※ xml 파일을 수정한 이후에는 반드시 서버를 재시작 해야 한다.   check!!
   7) JSP 페이지 작성(확장자 『.jsp』)
     → WebContent 디렉터리 하위에 작성
     ※ 페이지 작성 전에 Encoding 방식을 체크 및 설정한다 (UTF-8)
     ※ JSP 기본 페이지의 템플릿을 HTML5 기반으로 수정하여 설정한다 (default HTML 4.01)

   8) 톰캣 서버가 실행되고 있는 상태에서
      웹 브라우저의 URL 주소 창에 다음과 같은 주소를 요청한다. (클라이언트 입장)

      http://서버주소:포트번호/프로젝트이름/파일이름.jsp

      http://localhost:3306/WebApp04/jsptest001.jsp
 	     ---------
             211.238.142.xxx 또는 127.0.0.1
      ※ 원격 접속인 경우는 localhost 난 127.0.0.1 대신
        목적지 서버의 IP Address 를 작성(요청)해야 한다.

○ JSP 구성 요소

  1. 디렉티브(지시어)
    - 페이지에 대한 설정 정보 지정. 클래스 속성을 변경.
    <%@  %>

    · page
      페이지에 대한 기본 정보 입력
      (생성하는 문서의 타입, 출력 버퍼의 크기, 에러 페이지 등)
      현재 문서를 나타내는 객체
      page 디렉티브는 JSP 페이지와 관련된 속성을 정의하고
      이 속성들은 웹 컨테이너에 정보를 제공한다.
      또한, 한 페이지에 page 디렉티브는 여러 번 등장할 수 있고
      위치도 관계가 없다. 하지만 보통 페이지 상단에 기술한다.

      주요 속성
     - language : 스크립트 코드에서 사용되는 프로그래밍 언어 지정
     - contentType : 생성할 문서 타입
     - import : 사용할 자바 클래스 지정
     - session : 세션 사용 여부 지정
     - buffer : 출력 버퍼 크기 지정
     - autoFlush : 출력 버퍼가 다 채워졌을 경우
   		   자동으로 버퍼에 있는 데이터를 비우게 만들지의 여부 지정
     - info : 페이지에 대한 설명
     - errPage : 실행 도중 에러 발생 시 보여줄 페이지 지정
     - pageEncoding : 페이지 자체의 캐릭터 인코딩 지정

     ·taglib
      태그 라이브러리(tag library)
      사용자가 만든 태그 모음(사용자가 직접 기능 설정)

     ·include
      다른 문서를 포함하는 기능
      여러 JSP 페이지에서 공통적으로 포함하는 내용이 있을 때
      이러한 내용을 매번 반복해서 입력하지 않고
      별도의 파일에 저장해 두었다가 JSP 파일에 삽입하도록 하는 것 → 생산성 향상
      include 디렉티브 처리 과정은
      정적으로 include 지시자를 사용한 JSP 페이지가 컴파일 되는 과정에서
      include 되는 JSP 페이지 소스 내용을 그대로 포함해서 컴파일한다.
      즉, 복사&붙여넣기 방식으로 두 개의 파일을 하나로 구성한 후
      같이 변환되고 컴파일된다.

2. 스크립트 요소
  - 스크립트 릿(Scriptlet)... 스크립 릿... 스크립틀릿...
    jsp 에 자바 코드를 기술
    <%  %>

    JSP 문서 내에 JAVA 코드를 기술하는 부분이기 떄문에
    오로지 자바 코드만 올 수 있다.  
    스크립트 릿에 선언된 변수는 지역 변수의 성격을 가지가 되며
    (서블릿 안에 있는 service() 메소드 안에 선언된 변수이므로...)
    자바에서 메소드 내에 선언된 변수라고 할 수 있다.

   - 표현식(Expression)
    HTML 문서 결과값에 포함시키고자 할 때 사용
    <%=  %>
    (즉, 브라우저에 등장시킬 수 있는 영역)

   - 선언부(Declaration)
     스크립트 릿이나 표현식에서 사용할 수 있는 함수 작성 시 사용.
     <!% %>

     스크립트 릿이나 표현식에서 사용할 수 있는 변수나 메소드를 정의하는
     부분이기 때문에 선언부에서 선언된 변수는 서블릿으로 변환되는 과정에서
     멤버 변수의 입장을 취하게 되며 전역 변수의 성격을 가진다.
     또한, 『_jspInit()』, 『_jspDestroy()』와 같은 생명주기 운영을 위해
     메소드를 재정의할 수 있다.
■■■ AJAX ■■■

○ 개요
  AJAX 는 MXL에 기반한 종합 기술로
  비동기 자바스크립트 XML(Asynchronous Javascript And Xml)을 줄인 말로
  자바스크립트로 HTTP 요청을 보내서 XML 응답을 받아 사용하는 기술이다.

  AJAX는 하나의 독립된 기술이... 아니다.
  화면은 HTML + CSS 로 구성 및 작성하고,
  화면에 대한 조작과 상호 작용은 문객체모델(Document Object Model, DOM)로 처리하고
  데이터 교환은 XML 형식으로 처리하며,
  데이터 변환과 검색은 XML 기술인 XSL 과 Xpath 등을 사용하며,
  비동기 통신에는 웹 브라우저 안에 내장되어 있는 
  XMLHttpRequest 객체를 사용하고,
  이 모~~~든 것을 하나로 묶어주는 개념으로 
  Javascript 또는 jQuery 를 사용하는 것.
  이것을 AJAX 라고 한다.


○ 특징

   - 비동기 자바 스크립트 XML
   - 자바스크립트로 HTTP 요청을 보내서 XML 응답을 받아 사용
   - 처리 과정
     ① HTTP 요청을 보냄
	→ ② XML 문서를 응답으로 받음
	   → ③ 자동으로 XML 객체가 생성
 	     → ④ 자바스크립트는 XML 객체에 접근하여 다양한 작업을 수행


	==> HTML+CSS, DOM, XML, XSLT, XPath, XMLHttpRequest, Javascript를 합쳐서 사용


○ 장점
  - 비동기 통신을 사용함으로써 데이터를 보내고 나서도
    사용자는 다른 작업을 수행할 수 있다.
  - 데이터만 들어가 있는 형식으로 응답을 받기 때문에
    전통적인 웹 어플리케이션 방식에 비해 서버측 처리 속도가 빠르고
    전송 데이터 양도 훨씬 적다.
  - 응답으로 받은 XML 문서를 검색하거나 XSL 을 사용하여 변환을 할 수 있다.
    따라서 실행 속도가 빠르다.
  - 불필요한 데이터 요청을 최소화 할 수 있고
    많은 일이 클라이언트인 웹 브라우저에서 처리될 수 있다.

○ 단점
  - 외부 검색 엔진이 웹 페이지를 검색할 수 없는 문제가 있다.
  - AJAX 는 클라이언트 폴링 방식으로 실시간 서비스를 제공할 수 없다.
  - AJAX 가 포함된 HTML 페이지가 속한 서버가 아닌 다른 서버로 요청을 보낼 수 없고,
    클라이언트 PC의 파일에 접근할 수도 없다.

○ 기존 웹 사이트에서 AJAX 를 활용하면 효과가 있는 경우
 또는, AJAX 어플리케이션으로 개발할 필요가 있는 경우
  - 웹 페이지를 전환하지 않고 현재 페이지에서 다른 동작을 수행하고자 할 때
  - 불필요한 팝업을 사용하여 처리하는 작업을 다른 방법을 통해 대체하고자 할 때
  - 여러 번 불필요한 홤녀을 다시 출력할 때
  - 특정한 데이터를 반복 사용하면서 다양한 작업을 수행할 때

○ 주의사항
  - 뒤로가기 버튼 사용의 어려움
    AJAX 는 Javascript 를 사용하여 동작하기 때문ㄴ에
    페이지 단위의 브라우저에서 사용자 경험(UX)과 다르게 작동하는 경우가 있다.
    특히, 뒤로가기 버튼의 기능 상실로 AJAX 를 유해한 기술로 매도하기도 했다.
    (뒤로가기 버튼은 웹 서핑을 수행하는 사용자들이
    일반 클릭 다음으로 많이 사용하는 기술이므로...)
    하지만, 이미 iframe 을 사용한 해결책이 제시된 바 있으며
    AJAX를 활용한 서비스 사용 경험이 증대될수록 이와 같은 문제는
    줄어들 것으로 전망하고 있다.
  - 진행상황 파악의 어려움
    XMLHttpRequest 를 통해 통신하는 경우
    웹 페이지 로딩과는 달리 사용자에게 아무론 진행 정보가 주어지지 않는다.
    그래서 아직 요청이 완료되지 않았는데 사용자가 페이지를 떠나거나
    기다림을 참지 못한 사용자가 다른 기능을 수행함으로써 오작동을 일으킬 우려가 발생하게 된다.
    이 경우 사용자의 요청이 처리중에 있다는 표시를 화면에 보여주도록 처리할 수 있다.
    중간 중간 "loading" 상태 표시를 통해 사용자의 요청이 처리중임을 알려주는
    방법을 예로 들 수 있다
    이러한 상태는 XMLHttpRequest.readyState 의 상태를 통해 판단할 수 있다.
    또한, 이 때 사용할 수 있는 이미지를 활용할 수도 있다.


○ 참고 사이트
   - http://www.w3.org
   - http://www.w3schools.com

○ AJAX의 필요성
   기존의 웹 브라우저는 서버로부터 페이지 단위로만 데이터를 수신하여 받을 수 있었다.
   때문에 간단한 상호작용을 하려고 해도 페이지 전체를 로딩해야 했고
   이것은 대역폭 낭비를 초래하게 되었다.
   하지만, AJAX 를 사용하면 XML 파일 조각 단위로 데이터를 받아올 수 있기 땜누에
   전체 페이지를 다시 로드하지 않아도 페이지 일부를 동적으로 갱신할 수 있다.

○ AJAX 객체의 사용
   AJAX를 사용하려면 먼저 AJAX 객체 생성 함수를 사용하여 AJAX 객체를 만들어야 한다.
   인터넷 익스플로러의 경우 『new ActiveXObject("Microsoft.XMLHTTP")』를 실행하며
   모질라 웹 브라우저의 경우 『new XMLHttpRequest()』를 실행하여 AJAX 객체를 생성한다.
   인터넷 익스플로러 7.0 이후부터는 모질라 웹 브라우저처럼
   『new XMLHttpRequest()』를 통해 객체를 생성할 수 있다.
    






■■■ CSS 선택자(selector) 및 선언 방법 ■■■

○ CSS 선택자(selector)구성 및 설정
   - 『*』 공용 선택자, 전체 선택자
     모든 엘리먼트를 선택한다./

   - 『E』 엘리먼트 선택자, 태그 선택자, 타입 선택자 → h1 p div ...
      E 엘리먼트를 선택한다.

   - 『.』 클래스 선택자
      html 에서만 사용할 수 있으며, 예를 들어, 『div.warning』은
      warnung 이라는 클래스를 가지고 있는 div 앨리먼트를 선택하게 된다.

   - 『#』아이디 선택자
      예를 들어, 『#myId』는 myId를 아이디 속성의 값으로 사용하는 엘리먼트를 선택하게 된다.

   - 『E>F』자식 선택자
      E 엘리먼트의 자식 엘리먼트인 F 엘리먼트를 선택하게 된다.


   - 『E F』 자손 선택자, 후손 선택자, 하위 선택자
      E 엘리먼트의 하위에 있는 F 엘리먼트를 선택하게 된다.
      이 경우 특이한 점은 E 와 F 사이에 다른 엘리먼트가 포함되어 있더라도
      선택 대상에 해당한다는 것이다.

   - 『E+F』 인접 선택자, 형제자매 선택자
      E 엘리먼트와 F 엘리먼트가 상하위 관계가 아닌,
      인접해 있는 형제자매 관계인 경우 선택하게 된다.


   - 『E:action』동적 선택자, 가상 선택자, 상태 선택자
     사용자 액션이 적용되는 상황에 따라 선택 여부가 결정된다.
     예를 들어, 『button:hover』는 버튼 위에 마우스 커서가 머물게 되는
     특정 상황에서만 선택이 이루어지게 된다.


○ CSS 선언 방법
   
   - 외부 선언(External Linked Style)
     HTML Document 외부에 별도의 CSS 파일을 생성하여 내용을 구성한다.
     『확장자 : *.css』
     이 CSS를 적용할 문서에는 『<link rel="stylesheet" href="css경로포함파일명"』
     를 활용하여 외부의 CSS 를 해당 문서에 적용할 수 있도록 처리한다.


   - 문서 안에 포함하여 선언(Embedded Style)
     HTML Document 내부에
     『<style type="text/css">
	   선택자 {적용할 스타일 내용}
       </style>』
     과 같이 기술하여 스타일을 적용시키도록 처리한다.


   - 엘리멘트에 직접 선언(direct, Inline Style)
     스타일을 적용할 태그(엘리먼트)에 직접
     『style="적용할 스타일 내용"』
     형식으로 기술하여 처리한다.
     대상에 직접 적용하는 방식이기 때문에 선택자는 ■■■ DBCP(DataBase Connection pool)■■■

○ 커넥션 풀(Connection Pool) 기법이란,
  데이터베이스와 연결된 커넥션을 미리 만들어 풀(pool) 속에 저장해 두고 있다가.
  필요할 때에 커넥션을 풀에서 꺼내어 가져다 쓰고
  사용이 끝나면 다시 풀에 반환하는 기법을 말한다.

○ 데이터베이스를 연결하기 위한 커넥션(Connection)은 객체이다.
   이 객체는 새롭게 만들어지는 과정에서 많은 시스템을 자원을 요구하게 된다.
   객체가 메모리에 할당되고, 객체에 사용할 여러 자원들에 대한 초기화 작업
   그리고 객체가 더 이상 필요하지 않게 되었을 때 메모리를 회수하는 과정
   등에서 많은 비용이 발생하고 요구되는 것이다.

○ JSP 페이지를 생성할 때 마다 커넥션을 생성해서 사용하게 되면
  커넥션을 생성하고 회수하는데 많은 시스템 자원을 요구하게 되기 때문에
  동시 접속자 수가 많은 웹 어플리케이션의 경우 전체 성능을 떨어뜨리는 원인이 될 수 있다.
 이러한 성능 저하 문제를 해결하기 위해 사용하는 일반적인 방식이
  커넥션 풀(Connection Pool) 기법인것이다.

○ DBCP 를 사용하기 위해서는 기본적으로 세 개의 패키지가 필요하다.
  - Jakarta-Commons DBCP 1.2.1 (commons-dbcp-1.2.1 jar)
  - Jakarta-Commons Collections 3.1 (commons-collections-3.1.jar)
  - Jakarta-Commons Pool 1.2 (commons-pool-1.2.jar)

  ※ 하지만, 톰캣 6.x 부터 톰캣 서버 내부에 기본적으로 제공되기 때문에
    (경로 : Tomcat Root\lib 또는 Tomcat Root\common\lib)
    (파일 : tomcat-dbcp.jar) 
    다른 파일을 추가하거나 변경하지 않아도 무방하다.

○ 실습 환경 설정

 1. Eclips > Project Explorer > Server > Tomcat ... > context.xml
    파일 접근 및 열기

 2. 해당 파일의 맨 아래에... 즉, 『</Context>』 직전에 
    (Context 엘리먼트가 닫히기 전에...)
    -----------------------------------------------------------------------
    <Resource name="jdbc/myOracle" auth="Container"
			type="javax.sql.DataSource"
			driverClassName="oracle.jdbc.driver.OracleDriver"
			url="jdbc:oracle:thin:@localhost:1521:xe"
			username="scott" password="tiger"
			maxActive="20" maxIdle="10" maxWait="-1">
    </Resource>
    -----------------------------------------------------------------------
    내용을 추가한다.

    - name
      :리소스 식별을 위한 이름
    - auth
      :해당 리소스를 사용하게 되는 주체
    - type
      :리소스의 타입(패키지 경로 포함)
    - driverClassName
      :사용할 JDBC Driver 의 클래스 이름
    - url
      :JDBC Driver 에 의해 연결할 Connection 에 대한 URL
    - username
      : Connection 을 연결할 사용자 이름(오라클 사용자)
    - password
      : Connection 을 연결할 사용자 이름에 따른 비밀번호(오라클 암호)
    - maxActive
      : Connection Pool 이 제공할 최대 Connection 의 갯수
        (사이트 최대 커넥션 사용량을 기준으로 지정
         동시 접속자 수에 따라 지정)
    - maxIdle
      :사용되지 않고 풀(pool)에 저장될 수 있는 최대 Connection 의 갯수
    - maxWait
      :대기시간.(단위는 1/1000초)
       0보다 작게 설정할 경우 무한히 대기.■■■ EL(Expression Language) 과 JSTL(Jsp Standard Tag Library) ■■■

○ EL(Expression Language : 표현언어)

  EL 은 JSTL 1.0 스펙에서 잠깐 소개되었다가
  JSP 2.0 부터 공식적으로 포함되었으며
  JSP 페이지에서 사용되는 자바 코드를 대신해서
  액션 태그 엘리먼트의 속성에 값을 지정하는 역할을 한다.

  예를 들어
  <someTag:aTag> 액션 태그 엘리먼트 속성은 attribute 이고
  속상값은 <% pageContent.getAttribute("aName")%> 인 경우

  <someTag:aTag attribute="<% pageContent.getAttribute("aName")%>">
  의 방식으로 표현해야 하지만

  표현 언어(EL)에서는 다음과 같이 표현한다.
  <someTag:aTag attribute="${aName}">

  ==> - 표현 언어(EL)은 표현식(<%= %>)을 대신하는 효과를 갖는다.
      - null 을 가지는 변수(데이터)에 대해 좀 더 관대한 특징을 갖는다.
      - 데이터 형 변환을 자동으로 처리해준다.
      - setAttribute() 로 넘긴 데이터를 getAttribute() 로 받는 대신
        『${}』로 받는다.



○ JSTL(Jsp Standard Tag Library)

  JSP 에서는 XML 처럼 사용자가 태그를 정의해서 사용하는 것이 가능하며
  이와 같은 사용자 정의 태그를 커스텀 태그라고 하는데
  이들 중 자주 사용하는 것을 표준으로 만들어 놓은 것이 JSTL 이다.

  JSP Standard Tag Library(JSTL)는 일반적인 웹 어플리케이션 기능인
  반복(iteration)과 조건, 데이터 관리, 포맷, XML 조작, 데이터베이스 액세스를
  구현하는 커스텀 태그 라이브러리 모음이다.

  JSP 의 스크립트와 HTML 코드를 같이 혼용하여 사용하면
  개발의 편의성을 제공하긴 하지만 코드의 복잡성을 증대시키는 문제가 있다.
  이와 같은 문제를 해결하기 위해 로직 부분의 JSP 코드를 태그로 대치시켜
  HTML 과 같은 태그로 이루어진 코딩 방법이 제시되었다.

  JSTL 은 JSP 로직을 담당하는 부분인 if, for, while, DB처리 등과 관련된
  표준 커스텀 태그를 제공함으로써
  코드를 간결하고 가독성이 좋도록 하며
  데이터 포맷, 반복 콘텐트 또는 조건 콘텐트와 같은
  전형적인 표현 레이어를 위한 표준 구현을 제공하기 때문에
  JSP 작성자들이 어플리케이션 개발에 집중하는데 도움이 된다. 

  JSP(JSTL) 작성 시 주의할 사항은
  액션 태그도 그렇지만 JSTL 커스텀 태그도 XML 기반에서 작성되었기 때문에
  모든 태그는 시작 태그와 종료 태그의 쌍으로 이루어져야 한다는 것이다.

  기존의 컨텍스트에서 JSTL 을 사용하기 위해서는
  웹 어플리케이션 WEB-INF/lib 디렉터리에
  필요한 라이브러리를 복사하여 붙여넣으면 된다.
  JSTL 의 주된 라비르러리 파일은 jstl.jar,standard jar 파일이고,
  jaxen-full.jar, sxpath.jar, jsxp-api.jar 파일 등이 필요하다.
  이 파일들을 적재하고 컨텍스트를 리로드한다.

  - JSTL 을 사용하기 위한 환경 설정

   『http://jakarta.apache.org』에 접속한 후
    왼편에 구성된 메뉴 목록들 중...
   『Taglibs』클릭
    왼편에 구성된 메뉴 목록들 중...
   『Standard』 클릭 → 『https://tomcat.apache.org/taglibs/standard/』로 페이지 이동
    본문의 내용 중...
    『Standard 1.1』 항목의 download 클릭
    → 『https://archive.apache.org/dist/jakarta/taglibs/standard/』로 페이지 이동
    『binaries/』클릭
    『https://archive.apache.org/dist/jakarta/taglibs/standard/binaries/』로 페이지 이동
     본문의 목록들 중... 『jakarta-taglibs-standard-1.1.2.zip 2004-10-25 20:57  933K』 클릭
    → 다운로드 대화창 오픈
    → jakarta-taglibs-standard-1.1.2.zip 파일 다운로드
    → 다운로드 완료 후 압축 해제

    이후... (다운로드 및 압축 해제 후)...
    『jakarta-taglibs-standard-1.1.2\lib』 디렉터리 안에 있는
    『jstl.jar』 파일과 『standard.jar』 파일...
    이렇게 두 개의 jar 파일을
    현재 작업할(작업중인) 프로젝트의
    『WebContent > WEB-INF > lib』경로에 복사&붙여넣기 한다.

     다음으로...
     이클립스 환경 설정(메뉴 > windows > preferences) 클릭
     → Web 항목 > JSP Files > Editor > Templates 접근

     리스트의 항목들 중(체크 박스는 건드리지 말고...)
     『NEW JSP File(html 5)』항목 선택 후 수정(Edit... 버튼 클릭)

     버튼 클릭에 의해 열리는 대화창에서
     최초 디렉티브(page) 아래에 다음과 같은 내용 추가

    『<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>』


  - JSTL 사용
    
    JSTL 은 태생이 커스텀 태그이기 떄문에 JSP 와 밀접한 관계가 있다.
    application, session, request, response, pageContext 등의
    내장 객체에 쉽게 접근하며, 그 외에도 파라미터, 쿠키, 해더 등을
    복잡한 코드를 사용하지 않고 쉽게 직관저긍로 사용할 수 있다.
    또한, 기본적인 연산이나 객체 비교 등을 『.equals()』 메소드 등을
    사용하는 대신 『==』 『!=』와 같이 쉽게 구현하였으며,
    조건, 반복, 이동에 따른 태그를 지원하기 때문에
    태그만으로도 이들 기능을 구현할 수 있다.
   
    JSTL 의 처리 영역은 크게 4가지로 나누어진다.
    core, 		format, 	xml, 		sql
    (기본핵심기능)	(형식화)	(xml처리)	(sql처리)

※ 주요 분류 및 종류

  ○ Core
    - 기능 : 변수지원, 흐름제어, URL 처리 등
    - 접두어(prefix) : c
    - URI : http://java.sun.com/jsp/jstl.core

  ○ XML
    - 기능 : XML코어, 흐름제어, XML변환 등
    - 접두어(prefix) : x
    - URI : http://java.sun.com/hsp/jstl/xml

  ○ 국제화(형식화)
    - 기능 : 지역, 메세지 형식, 숫자 및 날짜 형식
    - 접두어(prefix) : fmt
    - URI : http://java.sun.com/jsp/jstl/fmt

  ○ 데이터베이스(sql)
    - 기능 : SQL지원
    - 접두어(prefix) : sql
    - URI : http://java.sun.com/jsp/jstl/sql

  ○ Functions
    - 기능 : 컬렉션 처리, string 처리 등
    - 접두어(prefix) : fn
    - URI : http://java.sun.com/jsp/jstl/functions


※ JSTL 에 taglib 추가 형식


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>■■■ Emmet(에밋) ■■■
(생산성 향상 도구)


○ 개요

   - 기존에는 Zen Coding(젠코딩) 이라는 이름으로 사용되었다.
   - 이후... Google 에서 이 도구를 수용하면서 emmet 이라는 이름으로 변경되었다.
   - HTML 생산성 향상 도구(HTML 코딩을 빠르게 하기 위한 플러그인)
   - CSS 선택자 사용(CSS3 지원)
     → HTML 을 CSS 선택자를 통해 검색하는 방법 대신
        CSS 선택자를 통해 HTML 을 생성하도록 하는 개념.

○ 환경 설정

   - 대부분의 툴에서 지원하고 있음
     (※ 그리고 대부분의 편집기 내에서의 액션 키 : Ctrl + E)


   - http://emmet.io/
     ① 메인 페이지 좌측에 있는 Download 메뉴 클릭
        → https://emmet.io/download/ 페이지로 이동

     ② Download 리스트들 중 본인이 사용할 편집툴(IDE)의 메뉴 클릭
     ③ Installation 항목에서 제시한 순서대로 진행
        (Go to Help > Install New Software… in your Eclipse IDE)


(Ctrl+d : 에밋 옵션과 충돌)

※ 특이사항
   
   Emmet 플러그인 설치 이후 이클립스 기본 단축키와 중복되는 항목이 존재함.
                            --------------------
                                  Ctrl + D



   ==> 단축키 재설정
       (이클립스 > Window(윈도우) > Preperences(설정) > General > Keys)■■■ GET 방식과 POST 방식 ■■■
	  (데이터 전송 / 페이지 요청)

○ GET 방식

  - GET 방식은 엽서를 보내는 방식과 유사한 전송 / 요청 방식
  - 주소 + 데이터 (모두 노출)
  - 전송할 데이터를 문자열 형태(Query String)로 URL 뒤에 인수로 붙여서
    전송을 수행하는 방법(방식)이다.
  - URL 뒤에 인수로 붙어있는 내용을 누구나 볼 수 있고
    이로 인해 보안성이 취약하다고 할 수 있다.
  - 또한, GET 방식은 보낼 수 있는 데이터 량에 한계가 있기 때문에(과거)
    많은 데이터를 보내는 경우 일정 크기 이상에서 잘림 현상이 발생한다.
    (길이 제한을 가진다는 의미이다. URL 최대 길이 2048char)
  - 특히나 <form> 태그에서의 GET 방식은
    서버로 데이터를 전송하는 과정에서 서버 처리가 지연될 경우
    중복해서 요청이 이루어지는 문제가 발생할 수 있다는 단점을 가지고 있다.
  - 형식 및 구조
    『URL주소?속성1=데이터1&속성2=데이터2&...』
    『URL주소?name=value&tel=value2&...』
  - GET 방식은 select 적인 성격(성향)을 가지고 있다.
    서버에서 데이터를 가지고 와서 보여준다거나 하는 용도로 주로 사용한다.
    서버의 값이나 상태를 바꾸는 용도로는 사용하지 않는다.
    즉, 단순 페이지 요청에 많이 사용된다는 것이다.
  - GET 방식의 장점은 여러 형태를 통해 간편한 데이터 전송이 가능하다는 것이다.
    POST 방식처럼 form 태그를 사용하여 전송도 하고,
    링크에 직접 걸어 사용해도 되고, 주소창에 직접 입력해도 된다.
    ex)
    <a href="http://url?키1=값1&키2=값2&...">
    <form action="http://url?키1=값1&키2=값2&...">
    window.open(href="http://url?키1=값1&키2=값2&...");
    window.location.hrf="http://url?키1=값1&키2=값2&...";
    window.location.replace("http://url?키1=값1&키2=값2&...");
		:
		:


○ POST 방식


  - 주소만 노출 / 데이터는 숨김
  - <form> 태그에서 method 속성의 값을 "post"로 설정해서 요청
  - 파일의 형태로 전송되기 때문에 URL 상에서는 내용이 나타나지 않는다.
    이로 인해 GET 방식에 비해 보안성이 높다고 할 수 있다.
  - POST 방식은 전송하는 데이터의 내용이 HTTP body 안에 숨겨져서 전송된다.
  - GET 방식처럼 URL 뒷부분에 추가해서 보내는 것이 아니라
    HTTP body 안에 넣어서 보내기 때문에 GET 방식에서 발생할 수 있는
    보안성 문제를 어느정도 해결할 수 있다.
  - GET 방식에 비해 대용량의 데이터를 전송할 떄 사용한다.
  - <form> 태그를 이용하여 submit 하는 일반적인 형태가 POST 방식이다.
  - POST 방식은 서버의 값이나 상태를 바꾸기 위해 주로 사용한다.
    글쓰기를 하게 되면 글의 내용이 데이터베이스에 저장되고
    수정을 하게 되면 데이터베이스에 수정된 값이 적용될 수 있도록
    처리하는 구성인 것이다.







■■■ HTML ■■■

○ HTML 개요

  HTML 이란 Hyper Text Markup Language 의 약어로,
  웹 페이지를 기술하기 위한 언어이다.
  마크업 언어(Markup Language)는 텍스트에 태그(ex <title>)를 붙여서
  텍스트가 문서의 어디에 해당하는지를 기술한 것이다.
  기본적으로 시작 태그가 있으면 종료 태그가 있는 것이 일반적인 형태이다.
  (ex <title>)문서의 제목</title>

○ HTML 의 변천사(축약)

  최초의 HTML은 팀 버너스리 라는 CERN(유럽 원자핵 공동 연구소)의
  물리학자가 만들었다.
  이후 W3C(World Wide Web Consortium)이 창립되어
  팀 버너스리의 주도 아래 HTML 에 대한 표준을 관장하고 있다.

 - 1999년
   HTML의 시작은 CERN의 팀 버너스리가 인콰이어를 제안하며 시작되었다.
   인콰이어는 CERN의 연구원들이 문자를 이용/공유하기 위한 체계였다.

 - 1991년
   비공식적인 CERN의 문서를 보면 1991년 말 팀 버너스리가 HTML 태그를 대중에 언급했다고 한다.
   HTML 기본서에서 제일 먼저 언급되는 HTML 태그가 1991년 처음 공개된 것이다.
   이 때 만들어진 태그 중 일부가 HTML 4 버전에도 여전히 존재한다.

 - 1992년
   1992년 7월 HTML DTD* 1.0 의 첫 번째 비공식 초안이 나왔으며
   11월 HTML DTD 1.1 비공식 초안이 발표되었다.

   ※ DTD(Document Type Declaration)
     DOCTYPE 이라고 불린다.
     DTD는 HTML이나 XML 문서에서 사용이 허가되는 요소나 속성을 정리한 것.
     즉, HTML 이나 XML 문서가 특정 형식 정의를 따르고 있다는 것을
     이를 수신하는 웹 브라우저에 알려주는 것을 말한다.
     간단히 말하자면 "이러이러한 형식으로 문서가 작성되었다."
     라고 선언하는 것이다.

  ※ XML(eXtensible Markup Language)
    W3C 에서 마크업 언어를 만드는 용도에서 권장되는 다목적 마크업 언어.
    XML 은 주로 다른 시스템, 특히 인터넷이 연결된 시스템끼리
    데이터를 쉽게 주고받을 수 있게 하여 HTML의 한계를 극복할 목적으로 만들어졌다.

  - (중략...)

  - 1999년 ~ 2000년
    1999년 12월 HTML 4.01 이 발표

  - 2001년 
    2001년 5월 W3C 에서 XHTML 1.1 권고안 발표.
    XHTML 1.1 은 모듈 기반은 XHTML.

  - 2002년 ~ 2006년
    2002년 8월부터 2006년 7월까지 총 8번의 XHTML 2.0 초안을 W3C에서 발표.
    하지만, 하위 호환성 문제와 HTML5에 의해 XHTML 2.0은 2009년에 개발 중단.


  - 2007년 ~ 2014년
    2007년 Web Application 1.0이 XHTML 2.0을 앞서면서(호환성 문제)
    W3C는 Web Application 1.0을 기초로 HTML Working Group 을 출범시키고,
    이 표준안으리 명칭을 HTML5로 변경


○ HTML 과 웹 브라우저
  우리가 보는 웹 페이지는 사실 HTML 문서이다.
  텍스트 기반으로 작성된 문서를 웹 브라우저가 시각적으로 향상된 형태로
  해석해서 우리에게 보여주게 되는 것이다.
  웹 브라우저마다 여러가지 장단점이 있다.
  우리나라 같은 경우는 윈도우 운영체제 및 ActiveX로 인해
  인터넷 익스플로러를 많이 사용하게 되었지만,
  HTML5 를 가장 잘지원하는 브라우저는 크롬이다. (2022년 3월 30일 기준)

  ※ HTML5 호환 정보 확인
    → http://html5test.com


○ HTML5 표준 기술과 API

  1. 웹 페이지의 내용은 HTML로 작성한다.			(구조)
  2. 웹 페이지의 스타일은 CSS로 작성한다.			(표현)
  3. 웹 페이지의 상호작용(동작,행위)은 Javascript로 작성한다.	(기능)

  ※ 구조와 표현과 기능을 분리한다. Check!!

 오래전부터 이와 같은 개발 방식을 사용하고는 있지만
 HTML5부터 웹 표준 기술로 확립되었다.
 이와 같이 작업함녀 웹 프로그래머와 웹 디자이너라는 업무 영역을
 나눌 수 있기 때문에 효율적인 개발이 가능하다.

 ※ 가장 오래 사용되었던 HTML 4.01에서 HTML5 로 넘어오면서 바뀐 점은
  『https://ko.wikipedia.org/wiki/HTML5』
  문서를 참조해서 확인할 수 있도록 한다.

  위의 해당 URL Document 에서 빠진 항목을 보충하자면
  - 오프라인으로 웹 애플리케이션 실행 가능
  - 드래그 앤 드롭
  - 웹 스토리지
  - 위치 정보 제공
  - 웹 SQL 데이터베이스
  - 파일 업로드와 관리 기능 제공
  - 웹 소켓 API
  등이 있다.■■■ JAVA Bean(자바 빈) ■■■

○ 개요
  - 자바로 작성되어진 컴포넌트(객체)들을 일반적으로 일컫는 말

○ 사용 목적
  - JSP 페이지에서 로직 부분을 분리하여 코드를 재사용함으로써
    프로그램의 구성 효율을 높이기 위함

○ JAVA Bean 만들기
  - 자바 빈은 자바 클래스이므로 자바 클래스를 설계하는 것과 기본 규칙이 같다
  - 자바 빈에서 멤버 변수를 프로퍼티(Probperty)라고 부른다.
  - 클래스 선언은 『public』, 프로퍼티 선언은 『private』으로 한다.
  - 프로퍼티 당 하나의 getter 와 setter 를 갖는다.
  - (매개변수가 없는) 기본 생성자를 포함한다.
  - 직렬화할 수 있어야 한다.
  - POJO(Plain old Java Object)■■■ Javascript 개요 및 기본 문법 ■■■

○ 개요

  컴파일 과정이 필요없거나 처리 과정이 적은 프로그램에 유리한 스크립트 언어로
  다른 언어에 비해 소스 코드의 수정 및 유지보수가 간편한 편이다.
  HTML 코딩에서 자바스크립트 소스의 명시만으로 웹 브라우저가 자동 실행된다.

  자바스크립트는 웹 페이지에서 가장 많이 사용되는 스키립팅(Scripting) 언어로
  스크립팅(Scripting) 언어는 크게 나누면
  자바스크립트나 DHTML, Visual Basic 등과 같은 브라우저 스크립팅(Browsesr Scripting),
  JSP,ASP,PHP 와 같은 서버 스키립팅(Sever Scripting) 언어로 구별할 수 있다.

  특히 자바스크립트는 서버 스크립팅(Sever Scripting) 언어로 연동되어
  입력란에 입력한 값이 제대로 된 값인지의 여부 등을 체크하는
  상호작용(Interactive)적 요소와 웹 페이지에 동적(Dynamic)인 효과 등을
  적용하는 부분에 사용되며, 그 밖에도 다양한 기능을 사용자가 추가하여
  사용하는 매우 중요한 요소라고 할 수 있다.


  ※ Javascript 는 HTML Document 에
    상호작용(Interactive)하는 요소와 동적(Dynamic)인 요소를
    추가하기 위해 사용하는 언어라고 할 수 있다.


○ HTML 문서에 Javascript 추가
  
  1. Inline Javascript(HTML Tag 속에 지정하여 사용)
    <a href="javascript:location.href='http://naver.com'">네이버</a>

  2. Embeded JAvascript 와 Script Block(Script Block 속에 일괄 지정하여 사용)
     <script type="text/javascript">
	document.write("어쩌구 저쩌구");
     </script>

     ※ 여기서 document 는 HTML 문서 Object 를 의미하며
       write() 함수는 document Object 에 출력하는 것을 의미한다.

  3. Linked Javascript(외부 파일을 링크하여 여러 개의 파일에 일괄 지정하여 사용)
     <script type="text/javascript" src="url경로지정"></script>

○ Javascript 의 기초 구문과 주요 데이터 타입

  1. Javascript 의 주석문(comment)
     라인 단위 주석문의 경우 2개의 slash(『//』)를 주석문 앞에 붙여 사용하고
     블럭 단위 주석문의 경우 『/* 여러줄 주석*/』과 같은 혀앹로 사용한다.

  2. Javascript의 명령 line 처리
     2개 이상의 script 명령을 사용할 경우 『;』(세미클론)으로 구분할 수 있도록 한다.
    (개행 역시 구분자의 역할을 수행하지만 가급적 『;』를 붙여서 사용할 수 있도록 한다.)

  3. Javascript 에 사용되는 주요 데이터타입
    - 정수
      : 0 ~ 9 사이의 가 자릿수에 해당하는 음수인 양수
        따옴표 속에 넣지 않는다.
    - 실수
      : 0 ~ 9 사이의 각 자릿수에 해당하는 음수와 양수를 포함한 부동 소수
        따옴표 속에 넣지 않는다.
    - Boolean(true or false)
      : true 와 false 의 논리형
    - String(문자열)
      : 사용할 수 있는 모든 문자를 의미하며
        따옴표(『""』 or 『''』)속에 넣어서 사용한다.


○ Javascript 배열
   
  1. 1차원 배열 선언 - 크기 지정 없이 선언 가능

     var 변수명 = new Array();
     변수명[0] = 값1;
     변수명[1] = 값2;
     변수명[2] = 값3;
	:
	:
     var 변수명 = new Array(값1, 값2, 값3, ...);

     var 변수명 = [값1, 값2, 값3 ...];

   2. 2차원 배열 선언 = 크기 지정 없이 선언 가능

     var 변수명 = new Array();
     변수명[0] = new Array();
     변수명[1] = new Array();
     변수명[2] = new Array();
	:
     변수명[0][0] = 값1;
     변수명[0][1] = 값2;
     변수명[0][2] = 값3;
	:

     var 변수명 = new Array(new Array(), new Array(), new Array(), ...);
     변수명[0][0] = 값1;
     변수명[0][1] = 값2;
     변수명[0][2] = 값3;
	:

     var 변수명 = [[값1, 값2, 값3, ...], [], [], ...];

   3. 문자열.split(구분자)
  
     var str = "1 2 3 4 5";
     var arr = str.split(" "); //-- 1차열 배열 반환
     for (var n=0; n<arr.length; n++)
	{
	   document.getElementById("result").value += arr[n] + "";
	}
     //--==>> 1 2 3 4 5

■■■ JDBC 연동 게시판 작성 실습 ■■■

○ 프로젝트 : WebApp20

○ 물리적 파일 구성

  00. WebApp20_scott_sql

  01. DBConn.java
  02. BoardDTO.java
  03. BoardDAO.java
  04. MyUtil.java

  05. List.jsp
  06. Created.jsp
  07. Created_ok.jsp
  08. Article.jsp
  09. Updated.jsp
  10. Updated_ok.jsp
  09. Delete_ok.jsp


■■■ jQuery(제이쿼리) ■■■

○ 개요

   - jQuery 는 빠르고 간결한 Javascript Library
   - HTML Document traversing, 이벤트 처리, 애니메이션,
     AJAX 를 단순화하여 빠른 웹 개발을 가능하게 한다.
   - CSS 규격 지원 : CSS 1 ~ 3 와 기본 XPath 지원.
   - 다양한 브라우저 지원
   - 경량 파일(약 90kb 수준의 파일 크기)
   - John Resig 에 의해 개발

○ jQuery 를 사용함으로써 얻을 수 있는 장점

   - HTML 과 DOM, CSS 의 변경이 간편하다.
   - 이벤트 처리가 간편하다.
   - 애니메이션과 같은 각종 효과를 적용하기 쉽다.
   - AJAX, JSON과 같은 처리가 간편하다.
   - 브라우저 호환성을 해결할 수 있다.


○ jQuery 다운로드 및 라이브러리 포함

   - jQuery 다운로드
     http://jquery.com/

   - jQuery 를 사용하기 위한 라이브러리 포함
     1. 로컬 PC 저장소에 물리적으로 존재할 때
     (즉, 제이쿼리 파일을 다운로드 받은 경우,
      특정 디렉터리 안에 들어있을 때 그 경로까지 지정해 주어야 한다.)
	<script type="text/javascript" src="jquery-x.x.x.js"></script>
     2. CDM 으로 직접 경로 지정
	<script type="text/javascript" src="http://code.jquery.com/jquery.x.x.x.js"></script>
   - jquery UI 를 사용하기 위한 라이브러리 포함
     <link rel="stylesheet" href="jquery-ui.css"></link>
     <script type="text/javascript" src="jquery-x.x.x.js"></script>
     <script type="text/javascript" src="jquery-ui.x.x.x.custom.min.js"></script>
     또는
     <link rel="stylesheet" href="http://code.jquery.com/ui/...css"></link>
     <script type="text/javascript" src="http://code.jquery.com/ui/...js"></script>
     <script type="text/javascript" src="http://code.jquery.com/ui/...-ui.js"></script>



○ jQuery 의 사용 방법(2가지)

  1. http://jquery.com/ 에서 파일을 다운로드하여 사용하는 방법
     ※ 다운로드 받을 수 있는 종류
       - 『production』버전
         : 소스를 압축(불필요한 공백 및 개행 제거) 해서
	   웹 서버에서 빠르게 실행할 수 있도록 경량화/최소화 한 버전.
       - 『development』버전
         : 테스트나 디버깅 또는 코드에 대한 분석을 위해
	   압축을 하지 않고 가독성을 높여놓은 버전.
  	   (공백 및 개행 처리가 되어있음.)

   2. COM(Content Delivery Network)를  통해 사용하는 방법
      별도의 파일을 다운로드 할 필요 없이
      『<script type="text/javascript" src="http://code.jquery.com.jquery-x.x.x.js"></script>』
      와 같은 구문을 통해 참조하여 포함시킬 수 있도록 한다.

○ jQuery 참조 및 학습 사이트
   - http://try.jquery.com/
   - http://learn.jquery.com/
   - http://www.w3schools.com/jquery/

■■■ JSON(JavaScript Object Notation)■■■

○ JSON(JavaScript Object Notation) 이란?
  - JavaScript Object Notation, RFC 4627
  - JavaScript 구문 형식을 따르며, 언제나 플랫폼에 독립적
  - 미디어타입 : 'application/json'
  - 표현 가능한 자료형
    : object,array,string,number,boolean,null


○ 개요
  JSON(JavaScript Object Notation)은
  네트워크 상에서(대표적으로 인터넷 상에서) 데이터를 주고 받을때,
  그 데이터를 표현하는 방법이다.
  자료의 종류에 큰 제한은 없으며
  특히 프로그램의 변수값을 표현하는데 적합하다.

  JSON(JavaScript Object Notation)은 경량 데이터 교환 방식으로
  사람이 읽고 쓰기에 용이하며,
  기계가 분석하고 생성하는 과정도 비교적 단순하고 용이하다.
  Javascript Programming Language, Standard ECMA-262 3rd Edition
  의 일부에 토대를 두고 있으며,
  JSON 은 완벽하게 언어로부터 독립적이지만
  C 계열 언어, 자바, 자바스크립트 등 다수 개발자들에게
  매우 친숙한 관습을 사용할 수 있도록 지원하는 텍스트 형식이다.
  이와 같은 특성들로 인해 JSON 은 이상적인 데이터 교환 언어로 사용되고 있다.

※ JSON 은 문자열 형식이기 떄문에 네트워크 전송 시 유리하다.(유용하다.)
  데이터에 접근하기 위해서는 Native JSON 객체로 변환해야 한다.
  (Javascript 는 JSON 전역 객체를 통해 문자열과 JSON 객체의 상호 변환을 지원한다.)

※ 문자열에서 Native Object 로 변환하는 것을 파싱(Parsing)이라 한다.
  네트워크를 통해 전달할 수 있게 객체를 문자열로 변환하는 과정은
  문자열화(Stringfication)라고 한다.

○ 특징
  ① 경량 데이터 교환 방식
  ② 데이터 표현이 단순하고 직관적
  ③ Javascript 에서 eval() 을 통해 parsing 가능
     - 라이브러리 필요 없음(예외의 경우도 존재함)
     - 크로스 브라우저 호환 문제 없음

○ 구조
  JSON 은 두 개의 구졸르 기본으로 두고 있다.
  - name / value 형태의 쌍으로 collection 타입
    다양한 언어에서 object, record, struct(구조체), hashtable,
    키가 존재하는 list, 연상 배열 등으로 실현되었다.
  - 값들의 순서화된 리스트
    대부분의 언어들에서 array, vector, list, sequence 등으로 실현되었다.


○ 참조
  JSON 공식 홈페이지
   -http://www.json.org

○ JSON의 기본 문법
  ※ http://www.json.org/json-ko.html → 설명문서 참조
  ① 표현하고자 하는 데이터는 『{}』로 감싼다.
  ② 데이터는 『name:value』형식으로 표현한다.
  ③ 각각의 값들은 『,』로 구분한다.
  ④ name 은 『""』로 감싸거나 그냥 사용해도 무방하다.
    - 『"name":"곽유진"』또는 『name:"곽유진"』
  ⑤ value 는 String, number, 배열, true, false, null 등
    - String 은 『""』로 감싼다.
    - 배열은 『[]』로 값들을 감싼다.

   1) 프로퍼티 ↔ 값
      var obj = 
      {
	 "프로퍼티명" : "값"
      } 

   2) 메소드
      var obj = 
      {
	 "메소드명" : function() {...}
      } 

   3) 메소드(인수)
      var obj = 
      {
	 "메소드명" : function(인수) {...}
      } 


○ JSON 의 데이터 타입(자료형)
  - string
  - number
  - boolean
  - null
  - array
  - object 

  ※ JSON Obejct 의 각 프로퍼티 자료형은
    『typeof』를 통해 확인이 가능하다.

  - string
    ·string 은 큰 따옴표 안에 둘러싸인 zero 이상의 유니코드 문자들의 조합이며,
     backslash excape 가 적용된다.
    ·하나의 문자(character)도 하나의 문자열(charcater string)로 표현된다.
    ·문자열은 반드시 이중인용부호 『""』로 감싸준다.    
    ·모든 문자를 \uxxxx (\u에 이어 4자리의 16진수로 표현한 unicode)로 표현 가능.
     "가나다" 			→ 단순 문자열
     "\uAC00\uB098\uB2E4"	→ escape 표기한 "가나다" 문자열
     "foo\\bar\n"		→ backslash(\\) 와 개행(\n)

  - number
    ·number 는 8진수나 16진수 형식을 사용하지 않는다.
    ·정수, 실수 모두 처리가 가능하다.
    ·정수와 부동소수점 포함 10진 표기로 한정한다.
     10				→ 정수 값
    -100			→ 음의 정수 값
    30.1			→ 실수 값
    1.0e-10			→ 지수 표현 값

  - boolean
    ·boolean 은 true / false 데이터를 사용한다.
    ·true, false 모두 소문자로 기술한다.
    ·C 나 JAVA 에서 사용하는 boolean 형과 비슷하다.

  - null
    ·null 은 어떤 특정 형태를 담기 이전의 상태로... object 로 취급받게 되며,
     데이터가 할당되면(담기면), 할당된 데이터에 따라 다시 구분된다.
    ·반드시 『null』이라고 소문자로 기술한다.

  - array
    ·array 는 데이터들이 순서화된 collection 이다 (순서를 가진 값의 집합)
    ·array 는 『[』로 시작해서 『]』로 끝내어 표현한다.(『[]』로 감싸서 표현)
    ·『,』(컴마)로 데이터들을 구분한다.
    · 1차원 형태, 2차원 형태 모두 존재한다.
     ["foo","bar","baz"]				→ 문자열의 배열
     [{"foo":"bar"},{"key":"value"}]			→ 오브젝트 배열
     [[10,20],[40,50]]					→ 배열의 배열
     []							→ 빈 배열
     [{"foo":"bar"}, "baz", 100, true, null]		→ 복잡한 배열(→ 가능)

  - object
    · object 는 name 과 vlaue 쌍들의 비순서화된 SET 이다.
    · object 는 『{』 시작하고 『}』로 끝내어 표현한다.(『{}』로 감싸서 표현)
    · 각 name 뒤에 『:』(클론)을 붙인다. (이름과 값을 『:』로 구분)
    · 『,』(컴마)로 쌍들 간을 구분한다. (『,』로 각 멤버 구분)
    · 이름과 값의 집합, 이름은 항상 문자열, 값은 JSON의 자료형 가능
    {
	"name":{"first":"John", "last":"Doe"}
	, "blog":"http://blog.example.com"
	, "age"L52
	, "interests":["Web","XML","REST"]
    }

○  일시(날자)
   - JSON 에서 기본적으로 제공하는 자료형에 일시(날짜)는 없음.
   - 개발자 스스로 규칙을 정해서 사용
   - 가장 단순한 방법으로는 UNIX 시간을 수치로 표현
     (1234567890 → 2009년 2월 14일 8시 31분 30초)
   - UNIX 는 타임존을 다루지 못함
     타임존이 필요할 시 Javascript 의 Date 객체 toString() 메소드 이용.
     ("Mon Nov 01 2023 05:43:35 GMT+0900" → Firfox 3.6)
     ("Mon Nov 01 2023 05:43:35 GMT+0900" → IE 8)
   - Javascript 는 브라우저 별로 출력 내용이 달라지기 때문에
     표준적인 ISO-8601 사용 권장


○ 링크
   - 단순히 URL 를 문자열로 표현
      {
	  "href":"http://example.com/foo/bar"
      }
   - URL 는 상대 URL 가 아닌 절대 URL 로 표현 권장
   - 멤버 이름을 링크를 나타내는 값으로 지정하여 표현 권장

※ 크로스 도메인 통신
   - 불특정 다수의 서버에 엑세스 하는 것을 『크로스 도메인 통신』이라함.
   -  AJAX 에서 사용하는 XMLHttpRequest 라는 Javascript 모듈은
     보안사 제한으로 하나의 서버와 통신 가능
   - <script>요소를 이용해 크로스 도메인 통신 가능.
   - JSONP(JSON with Padding)은 브라우저의 <script>요소를 이용해
     크로스 도메인 통신 구현
   - 클라이언트가 지정한 콜백 함수명을 래핑하여 크로스 도메인 통신 구현




     ■■■ JSP 데이터 송수신 실습 ■■■

ex) Aaa.html → Bbb.jsp
    Aaa.html → Bbb.java(Servlet)
    Aaa.jsp  → Bbb.jsp
    Aaa.jsp  → Bbb.java(Servlet)


Aaa 페이지에서는 <form> 태그 및 action, method 속성 필요
    <input> 이나 <button> 의 type="submit" 속성 필요
Bbb 페이지에서는 request 객체의 getParameter() 메소드 필요

1. request 내부 객체

   request 내부 객체는 웹 브라우저에서 JSP(또는 Servlet) 페이지로 전달되는 정보의 모임으로
   HTTP 헤더와 HTTP 바디로 구성되며, 웹 컨테이너는 요청된 HTTP 메세지를 통해
   HttpServletRequest 객체 타입인 request 객체로 사용된다.
   즉, request 객체는 웹 브라우저가 JSP(또는 Servlet) 페이지로 보낸 내용에 대한
   정보를 갖고 있는 내부 객체인 것이다.


2. String getParameter(name)

   이름이 name 인 파라미터에 할당된 값을 반환하며,  
   지정된 파라미터 값이 없으면 null 을 반환하다.


3. String[] getParameterValues(name)

   이름이 name 인 파라미터의 모든 값을 String 배열로 반환한다.
   주로 checkbox 등 동일한 이름을 사용하는 form 태그의 값을 반환받기 위해 사용한다.


4. void setCharacterEncoding(encode)

  전송된 데이터의 문자 인코딩 방식을 지정한다.
■■■ JSP 액션 태그(Action Tag) ■■■

○ 개요

  JSP 액션 태그는 클라이언트 혹은 서버에
  어떤 동작을 수행하도록 명령을 내리는 태그로
  JSP 페이지 안에서 자바 빈즈를 사용할 수 있도록 하는 액션 태그와
  페이지를 활용할 수 있도록 하는 액션 태그로 나눌 수 있다.


  - JSP 빈과 관련된 액션 태그
    <jsp:useBean>, <jsp:setProperty>, <jsp:getProperty>

  - JSP 페이지 모듈과 요청흐름 처리를 위한 액션 태그
    <jsp:include>, <jsp:forward>, <jsp:param> 등


○ 형식 및 구조
  
  『<jsp:액셔냍그 속성="값">태그에 들어있는 내용</jsp:액션태그>』
  『<jsp:액셔냍그 속성="값/>"』← 태그에 들어있는 내용이 없을 경우



※ 스코프(Scope)

  JSP 액션 태그를 통해 생성된 객체는
 그 객체가 사용될 수 있는 스코프 혹은 라이프사이클(Life Cycle : 생명주기)
  속성을 갖는데, 이것은 생성된 객체의 레퍼런스가 어디에서 사용될 수 있고,
  언제 삭제될 것인지를 기술한다.



  - page
  생성된 객체는 단일 클라이언트의 요청에 의해 생성된 페이지 내에서 접근하여 사용될 수 있다.
  생성된 객체는 실질적으로는 pageContext 에 저장된다.

  - request
   생성된 객체는 단일 클라이언트의 요청이 처리되는 동안에 접근하여 사용될 수 있다.
   request 가 page 와 다른 점은
   request 에서는 forward 나 include 를 사용해서 다른 페이지로 제어가 이동되는 경우에도
   객체에 접근하여 사용할 수 있다.
   생성된 객체는 실질적으로는 HttpServletRequest 에 저장된다.

  - session
   생성된 객체는 사용자의 세션이 유지되는 어느 곳에서나 접근하여 사용될 수 있다.
   생성된 객체는 실질적으로 HttpSession 에 저장된다.

  - application
    생성된 객체는 웹 응용프로그램의 라이프 사이클 도안에
    웹 응용프로그램에 소속된 임의의 Servlet 과 JSP에서 접근하여 사용될 수 있다.
    생성된 객체는 실질적으로 ServletContext 에 저장된다.

○ <jsp:param>

  <jsp:param> 태그는 요청한 페이지로 정보를 전달할 때 사용하는 태그로
  현재 페이지에서 요청한 페이지로 인자(parameter)와 인자값(value) 형태로 넘겨준다.

  <jsp:param name="pageName" value="var />

  ※ 이 태그는 단독으로 사용하지 못하고
   <jsp:include> 나 <jsp:forward> 태그의 내부에 기술하여 사용한다.

 - name 속성
   포함되는 JSP 페이지에 전달할 파라미터의 이름을 표시

 - value 속성
    전달할 파라미터 값을 표시
    이 때, value 속성값으로 표현식을 사용하는 것도 가능하다.


○ <jsp:forward>

  <jsp:forward> 태그는 현재 머물고 있는 JSP 페이지에서
  URL로 지정한 특정한 페이지로 넘어갈 때 사용하는 태그로
  현재 페이지에서 조건에 따라 서로 다른 페이지를 호출할 경우 사용된다.
  이 태그의 특이한 점은, 현재 페이지에 대한 URL 만 나타날 뿐
   제어가 넘어간 특정 페이지의 URL이 전혀 나타나지 않는다는 점이다.
  클라이언트의 웹 브라우저 주소란에 보이는 URL 과
  실제 브라우저에서 읽어들이고 있는 문서가 서로 다르기 때문에
  사용자는 이러한 상황이 벌어지고 있는지를 감지할 수 없다.
  그리고 제어가 넘어갈 때 request 내부 객체도 같이 전달된다.

  <jsp:forward page="이동할페이지이름" />

  - page 속성
    이동할 페이지의 이름을 기술하며
    page 속성의 값인 이동할 페이지의 이름은
    웹 어플리케이션 상대 경로나, 웹 어플리케이션 절대 경로로 지정할 수 있고,
    표현식을 사용할 수도 있다.

  - <jsp:forward> 액션 태그에서
    <jsp:param> 태그로 프로그램의 제어가 이동할 페이지에 파라미터 값을 전달할 수 있으며
    전달받은 값은 『request.getParameter("파라미터이름")』으로 넘겨받는다.

    <jsp:forward page="이동할페이지이름">
       <jsp:param name="paramName1" value="var1" />
       <jsp:param name="paramName2" value="var2" />
    </jsp:forward>

  - 단순히 page 속성에 지정된 페이지로 이동하는데 그치는 것이 아니라
    이동할 페이지에 자신의 정보를 파라미터 형식으로 전달할 수 있는 것이다.

    <jsp:forward page="/View.jsp" .>
    <%
   	String url = "/to.jsp";
    %>
    <jsp:forward page="<%=url%> />

○ <jsp:include>

  <jsp:include> 태그는 웹 페이지에서 공통된 페이지를 모듈화하여
  레이아웃을 구성(작성) 할 수 있도록 지원하는 태그이다.
  include 디렉티브(<%@ inlclude%>)와 함께
  다른 페이지를 현재 페이지에 포함시킬 수 있는 기능을 가진 태그이다.
  단, include 디렉티브는 단순하게 소스의 내용이 텍스트로 포함되지만
  <jsp:include> 액션 태그는 포함시킬 페이지의 처리 결과를
  포함시킨다는 점에서 차이를 갖는다.
  포함되는 페이지는 html, jsp, sServlet 페이지 모두 가능하며
  include 디렉티브는 주로 조각 코드를 삽입할 때 사용되고
  <jsp:include> 액션 태그는 페이지를 모듈화 할 때 사용된다.
  즉, 템플릿 페이지를 작성할 때 주로 사용된다는 것이다.
   또한, <jsp:include> 액션 태그는 같은 request 기본 객체를 공유한다.

  <jsp:include page="url" flush="false" />

  - page 속성
    현재 페이지에 결과가 포함될 대상 페이지의 이름

  - flush 속성
    출력 버퍼의 플러시 유무
    포함될 페이지로 이동할 때 현재 페이지가 지금까지
    출력 버퍼에 저장한 결과를 어떻게 처리할지를 결정한다.
    flush 속성의 값은 false 로 설정하는 것이 일반적이다.
    flush 속성의 값을 true 로 지정할 경우
    일단 출력 버퍼의 내용을 웹 브라우저로 전송하게 되는데
    이 때, 헤더 정보도 함께 전송된다.
    헤더 정보가 일단 웹 브라우저(클라이언트)로 전송되고 나면
    이후 헤더 정보를 추가하거나 수정하더라도 결과가 반영되지 않는다.

    <jsp:include page="url" flush"false">
         <jsp:param name="paramName1" value="var1" />
         <jsp:param name="paramName2" value="var1" />
    </jsp:include>


※ 자바 빈즈(Java bean)

  JSP 페이지에 화면 출력 부분과 로직들이 섞여있는 형태로 코드를 작성할 경우
  JSP 페이지를 이해하기 어렵고 디자이너와의 협업도 어려워진다.
  또한, JSP 페이지에 홤녀 출력 부분과 로직들이 혼재한 형태의 코드는
  재사용을 하는 것도 어려워지게 만든다.
  JSP 에서는 자바로 작성한 자바 클래스 중에
  자바 빈즈 규약에 맞게 작성된 클래스를 JSP 에서 사용 가능하게 하였으며
  이를 통해 프리젠테이션(웹 디자이너 측) 부분과
  비지니스 로직(개발자 측)을 처리하는 부분을 분리하여 작성할 수 있다.
  이렇게 함으로써 웹의 내용으로부터 웹의 표현 부분을 분리하게 되고
  동적인 웹 페이지 제작을 위한 개발과 관리에 있어 명확한 분리가 가능하다.
  또한, 같은 기능이 페이지 구성이 다르다는 이로 반복적으로 사용되는 경우
  웹 페이지를 효율적으로 작성, 수정하려면 반복적으로 사용되는 코드를
  재사용할 수 있어야 한다.
  빈은 이와 같은 효율적인 코딩 작업을 가능하게 한다.

  현재 개발되었거나 개발중인(작업중인) 프로그램들은 모두
  MVC 기법에 의해 개발되고 있다.
  MVC 기법은 프로그램을 모델(Model), 뷰(View), 컨트롤러(Controller)로
  나누어 개발을 하게 되는데...
  Model 은 로직을 가지고 있는 부분으로 DB와 연동 등을 처리하는 부분이고,
  View 는 사용자에게 제공하는 화면으로 UI(User Interface)에 해당하며,
  Controller는 View와 Model 사이엥서 흐름을 제어하는 개념이다.

  JSP 페이지가 MVC 에서 View 에 해당하고,
  바로 이 View 를 모듈화 하는 것이 템플릿 페이지이며,
  자바 빈즈는 Model 에 해당한다고 볼 수 있다.

○ <jsp:useBean>
  
  <jsp:useBean> 액션 태그는
  자바 객체를 생성하거나 기존에 만들어져 있는 객체를 반환한다.

  <jsp:useBean id="name" scope="page|request|session|application" typeSpec />

  - id 속성
    객체 인스턴스를 식별하는 이름으로 대소문자를 엄격하게 구분한다.
    한 번 생성된 Bean 이 소멸할 때 까지는 같은 id 를 중복해서 사용할 수 없다.

  - scope 속성
    객체 참조 범위로, 기본값(default)은 page 이다.
    · page
     객체 참조는 service() 호출이 종료될 때 소멸
    · request
      HttpServletRequest 객체가 소멸되지 않는 한 존재하며,
      컨테이너에 의해 생성된 서블릿은
      HttpServletRequest 의 setAttribute() 메소드를 이용하여
      객체를 HttpServletRequest 에 바인딩시킨다.
    · session
      객체는 클라이언트의 요청과 구별되며,
      session 이 살아있는 동안 존재하며,
      컨테이너에 의해 생성된 서블릿은
      HttpSession 의 putValue(String key, Object value) 메소드를 이용하여
      객체를 HttpSession 에 바인딩시킨다.
    · application
      가장 수명(생명주기)이 길다.
      ServletContext 의 setAttribute()를 통해
      객체를 ServletContext 에 바인딩 시킨다.

   - typeSpec 속성
     class="class_name" |
     class="class_name" type="type_name" |
     type="type_name" class="class_name" |
     beanName="bean_name" type="type_name" |
     type="type_name" beanName="bean_name" |
     type="type_name"
     · class
      완전한 형태의 클래스 이름으로
      branName 이 정의되어 있지 않은 상황이라면 반드시 정의해야 한다.
     · beanName
      java.beans.Beans 클래스의 instantiate() 메소드에 사용할 bean 이름으로
      type 과 beanName 을 지정한 경우에는 class 를 생략할 수 있다.
      주로 class 인자를 쓰지 않을 경우 사용한다.
      내부적으로 컨테이너는 id 와 scope 를 이용해서 객체를 찾게된다.
      이 과정에서 찾지 못하게 될 경우 현재 클래스 로더로 instantiate()
      메소드를 호출하는데, 이 때 bean 의 이름을 인자로 전달하게 된다.
      이 인스턴스의 생성이 실패하게 되면 예외가 발생한다.

     · type
      클래스의 형(type)을 지정하는, 생략 가능한 특성이다.
      객체가 이 특성으로 지정된 형(type)이 아닐 경우
      ClassCastException 예외가 발생하게 된다.

      <jsp:userBean id="name" scope="page" typeSpec>
	 <jsp:setProperty name="bean_name" prop_expr />
	 <%
  	   	//스크립릿을 이용하여 다른 속성 값을 호출하는 기능을 가진
   		// 함수를 호출할 수도 있다.
	  %>
       	</jsp:useBean>

○ <jsp:setProperty>

  <jsp:setProperty> 액션 태그는 자바 빈에 속성 값을 할당한다.
  name 속성에 기술된 이름에 해당하는 bean 클래스는
  <jsp:setProperty> 액션 태그를 이용해서 이 액션이 나타나기 전에 미리 정의되어야 한다.

  <jsp:setProperty name="bean_name" prop_expr />

  - name 속성
    <jsp:useBean> 액션 태그에 정의된 bean 인스턴스 이름

  - prop_expr
    property="*" |
    property="property_name" |
    property="property_name" param="parameter_name" |
    property="property_name" param="parameter_value" |
    · property
      값을 설정하고자 하는 bean 속성의 이름으로
      『"*"』으로 설정하면 ServletRequest 안의 모든 인자들 중
      bean 속성과 데이터타입이 일치하는 것을 찾아서
      각각의 속성들을 각각의 인자들의 값으로 설정한다.
      값이 『""』인 경우 속성은 변하지 않는다.
    · param
      bean 속성에 설정하고자 하는 값을
      파라미터에서 지정하고자 할 경우 사용한다.
    · value
      bean 속성에 설정할 값을 지정하며
      하나의 <jsp:setProperty> 액션 태그가 param 과 value 를 동시에 가질 수 없다.

○ <jsp:getProperty>

  <jsp:getProperty> 액션 태그는 bean 속성 값을 얻는데 사용한다.
  bean 의 속성 값을 얻어 String 으로 변환한 다음 출력 스트림으로 보낸다.

  <jsp:getProperty name="name" property="property_name" />
  
  - name 속성
    속성을 얻고자하는 bean 의 인스턴스 이름

  - property 속성
    얻고자 하는 속성의 이름





■■■ JSP(Java Server Pages) ■■■

1. JSP(Java Server Pages) : 웹 프로그램 작성 언어의 한 종류

2. JSP(Java Server Pages)는 동적(Dynamic)인 웹 페이지를 
   비교적 간단히 만들 수 있는 방법을 제공하는
   자바를 기반으로 하고 있는 스크립트 언어(Server Side Script)로
   자바 엔터프라이즈 어플리케이션에서 UI(User Interface) 영역을
   담당하고 있다.

3. JSP는 자바를 서버 환경에서 사용하는 스크립트 방식의 ㅇ너어로
   단일 스레드로 클라이언트의 요청에 서비스한다.
   요청이 있을 때 마다... 즉, 객체가 생성될 때 마다...
   프로세스를 생성하는 기존의  CGI 와는 달리
   하나의 메모리를 공유하면서 서비스되는 원리르 갖고 있다.
   이러한 원리는 서버측 부하를 줄여주며,
   JSP 내부에는 보여주는 코드만 작성하고
   직접 작업하는 부분은 자바 빈으로 구성하여 둘을 분리할 수 있다.
   이는 서로 영향을 주지 않으면서 수정할 수 있는 장점을 취하며,
   JAVA 가 갖고있는 장점인 재사용성을 높일 수 있게 한다.

   클라이언트 <---------------------------> 서버
   HTML, CSS, Javascript <----------------> JSP(JAVA)
   브라우저(IE, CR, FF 등) <--------------> 웹 서버(톰캣), 오라클
   요청 <---------------------------------> 응답(HTML 웹 페이지)


4. JSP 실행 구조
  
  1단계. 웹 클라이언트에서 웹 서버에 웹 프로그램(페이지) 요청
  2단계. 웹 서버에서 웹 클라이언트가 요청한 JSP 프로그램(페이지) 로드
  3단계. JSP 페이지에 대한 변환 실행
        ※ 이 과정에서 일반 『.java』인 파일로 변환된다. 『→ Servlet』
  4단계. 『.java』인 파일로 변환된 Servlet 의 컴파일(.class) 및 실행
  5단계. 실행 결과로 동적 생성된 HTML Document 를 클라이언트 측에 응답
  6단계. 웹 클라이언트는 응답받은 HTML Document 를
         브라우저에서 웹 페이지 형태로 출력

5. 이클립스 JSP 개발 환경 구축

  1) 프로젝트(new) 생성 시 『Dynamic Web Project』 선택
  2) 프로젝트 명 입력 시 식별자 작성 규칙을 준수
    원래 규칙에 따르면 『JspTest001.jsp』와 같이 명명해야 하지만,
    클라이언트  측에서(대소문자 구분없이) 좀 더 편하게 사용할 수 있도록
    일단 지금은 『jsptest001.jsp』와 같이 명명한다.
  3)Target Runtime 지정 → 톰캣 설치 디렉터리 연결
  4)프로젝트 생성 후에는 Server 탭에서 톰캣 서버 등록
    (단, 서버를 새로 등록했을 경우 서버 관련 설정을 재구성)
  5)톰캣 서버에 프로젝트 등록 → add and remove
  6) 톰캣 서버 시작(재시작)
    ※ 이 시점에서....
    포트 번호 설정 및 확인 필요
    (오라클이 웹 상에서 port 8080을 사용하기 땜누에 충돌 방지)
    『Project Explorer』의 『Server』디렉토리 노드를 확장하면
    『server.xml』파일이 존재하며 이 파일을 열어 63 ~ 65 정도 라인의 내용을 수정한다.

     <Connector URIEncoding="UTF-8" ... port="3306" />
		------------------      -----------
                ↑ 추가 			↑ 수정 (기본 8080)

     ※ xml 파일을 수정한 이후에는 반드시 서버를 재시작 해야 한다.   check!!
   7) JSP 페이지 작성(확장자 『.jsp』)
     → WebContent 디렉터리 하위에 작성
     ※ 페이지 작성 전에 Encoding 방식을 체크 및 설정한다 (UTF-8)
     ※ JSP 기본 페이지의 템플릿을 HTML5 기반으로 수정하여 설정한다 (default HTML 4.01)

   8) 톰캣 서버가 실행되고 있는 상태에서
      웹 브라우저의 URL 주소 창에 다음과 같은 주소를 요청한다. (클라이언트 입장)

      http://서버주소:포트번호/프로젝트이름/파일이름.jsp

      http://localhost:3306/WebApp04/jsptest001.jsp
 	     ---------
             211.238.142.xxx 또는 127.0.0.1
      ※ 원격 접속인 경우는 localhost 난 127.0.0.1 대신
        목적지 서버의 IP Address 를 작성(요청)해야 한다.

○ JSP 구성 요소

  1. 디렉티브(지시어)
    - 페이지에 대한 설정 정보 지정. 클래스 속성을 변경.
    <%@  %>

    · page
      페이지에 대한 기본 정보 입력
      (생성하는 문서의 타입, 출력 버퍼의 크기, 에러 페이지 등)
      현재 문서를 나타내는 객체
      page 디렉티브는 JSP 페이지와 관련된 속성을 정의하고
      이 속성들은 웹 컨테이너에 정보를 제공한다.
      또한, 한 페이지에 page 디렉티브는 여러 번 등장할 수 있고
      위치도 관계가 없다. 하지만 보통 페이지 상단에 기술한다.

      주요 속성
     - language : 스크립트 코드에서 사용되는 프로그래밍 언어 지정
     - contentType : 생성할 문서 타입
     - import : 사용할 자바 클래스 지정
     - session : 세션 사용 여부 지정
     - buffer : 출력 버퍼 크기 지정
     - autoFlush : 출력 버퍼가 다 채워졌을 경우
   		   자동으로 버퍼에 있는 데이터를 비우게 만들지의 여부 지정
     - info : 페이지에 대한 설명
     - errPage : 실행 도중 에러 발생 시 보여줄 페이지 지정
     - pageEncoding : 페이지 자체의 캐릭터 인코딩 지정

     ·taglib
      태그 라이브러리(tag library)
      사용자가 만든 태그 모음(사용자가 직접 기능 설정)

     ·include
      다른 문서를 포함하는 기능
      여러 JSP 페이지에서 공통적으로 포함하는 내용이 있을 때
      이러한 내용을 매번 반복해서 입력하지 않고
      별도의 파일에 저장해 두었다가 JSP 파일에 삽입하도록 하는 것 → 생산성 향상
      include 디렉티브 처리 과정은
      정적으로 include 지시자를 사용한 JSP 페이지가 컴파일 되는 과정에서
      include 되는 JSP 페이지 소스 내용을 그대로 포함해서 컴파일한다.
      즉, 복사&붙여넣기 방식으로 두 개의 파일을 하나로 구성한 후
      같이 변환되고 컴파일된다.

2. 스크립트 요소
  - 스크립트 릿(Scriptlet)... 스크립 릿... 스크립틀릿...
    jsp 에 자바 코드를 기술
    <%  %>

    JSP 문서 내에 JAVA 코드를 기술하는 부분이기 떄문에
    오로지 자바 코드만 올 수 있다.  
    스크립트 릿에 선언된 변수는 지역 변수의 성격을 가지가 되며
    (서블릿 안에 있는 service() 메소드 안에 선언된 변수이므로...)
    자바에서 메소드 내에 선언된 변수라고 할 수 있다.

   - 표현식(Expression)
    HTML 문서 결과값에 포함시키고자 할 때 사용
    <%=  %>
    (즉, 브라우저에 등장시킬 수 있는 영역)

   - 선언부(Declaration)
     스크립트 릿이나 표현식에서 사용할 수 있는 함수 작성 시 사용.
     <!% %>

     스크립트 릿이나 표현식에서 사용할 수 있는 변수나 메소드를 정의하는
     부분이기 때문에 선언부에서 선언된 변수는 서블릿으로 변환되는 과정에서
     멤버 변수의 입장을 취하게 되며 전역 변수의 성격을 가진다.
     또한, 『_jspInit()』, 『_jspDestroy()』와 같은 생명주기 운영을 위해
     메소드를 재정의할 수 있다.
■■■ AJAX ■■■

○ 개요
  AJAX 는 MXL에 기반한 종합 기술로
  비동기 자바스크립트 XML(Asynchronous Javascript And Xml)을 줄인 말로
  자바스크립트로 HTTP 요청을 보내서 XML 응답을 받아 사용하는 기술이다.

  AJAX는 하나의 독립된 기술이... 아니다.
  화면은 HTML + CSS 로 구성 및 작성하고,
  화면에 대한 조작과 상호 작용은 문객체모델(Document Object Model■■■ Servlet(서블릿) ■■■

1. 웹 어플리케이션을 구축하기 위한 웹 프로그램을 구성하는 언어의 한 종류
   (JAVA 기반)

2. JSP 에서 정적인 부분을 담당하고, Servlet 에서는 동적인 처리를 위한
   부분으로 사용되어 보다 효율적인 웹 어플리케이션을 구축할 수 있다.
   - JSP 단점 → MVC 패턴을 적용하기 힘들다.
   - Servlet → 단점 : 웹 페이지(view) 작성이 번거롭고 복잡하다. (불편)
   - Servlet + JSP → MVC 패턴 적용 및 웹 페이지(view) 를 보다 편리하게 작성.
		     단점 : 구조가 복잡하게 된다.

3. JSP 는 내부적으로 Web Container 가 Servlet 으로 변경시켜준다.

4. WEB-INF 는 환경 설정 파일이 저장되는 곳
   (→ 외부에서는 접근 불가 / 금지 ) check!
   - lib : 라이브러리 파일을 저장(ojdbc6.jar, jstl.jar 등)
   - J2SE
   - J2EE
   - classes : class 파일이 저장(Servlet)
     『classes > com > util > MyUtil.class』
     원칙적으로는 이와 같은 방식으로 만들어야 하지만 이클립스가 자동으로 연결
     실제 위치는 
     『C:\WebStudy\.metadata\.plugins\org.eclipse.wst.server.core\
	tmp0\work\Catalina\localhost\WebApp21\org\apache\jsp』
      *.jar : java
      *.war : web(프로젝트 아래 모든 것을 압축할 때)
      *.ear : jar + war
      web.xml : context path 의 환경 설정

5. 『init()』과 『destory()』는 단 한번 호출되며,
   『service()』는 클라이언트의 요청이 있을 때 마다 호출된다.
   이제는 JSP 를 『service()』메소드 내부에 코딩하는 것과 같다.

6. 『GenericServlet』 이나 『HttpServlet』을 활용한다.

7. URL 패턴을 지정하는 방법은 크게 3가징 이다.
  - 『/a』
  - 『/*』
  - 『.do』

8. web.xml 을 수정하면 서버를 꼭 재구동한 이후에  실행해야 한다.

9. 지금까지는
   JSP(입력) → JSP(처리,결과) 방식으로 구성하였으나
   Servlet 을 다루게 된 이후에는
   JSP(입력) → Servlet(결과를 위한 처리) → JSP(결과) 방식으로 구성된다.




---------------------------------------------------------------------------------------
○ Servlet 실습(WebApp21)

  - Test1.java
  - web.xml


  - 사용자 최초 요청 페이지
    http://localhost:3306/WebApp21/test1





---------------------------------------------------------------------------------------
○ Servlet 실습(WebApp21)

  - Test2.jsp
  - Test2.java
  - Test2_result.jsp
  - web.xml
■■■ 모델2 기반의 MVC 패턴 ■■■

○ 개요

  MVC 패턴에서 MVC 는 각각 Mode, View, Controller 를 의미하는 것으로
  Model 은 데이터 또는 기본 기능(업무 로직) 을 말하며,
  View 는 유저 인터페이스를 말한다.
  이 두가지는 시스템 개발에 있어서 반드시 필요한 부분이다.

  MVC 패턴은 C 패턴이라고도 불러도 괜찮을만큼
  한 마디로 말해 Controller 라는 레이어 계층을 두는 것이 가장 중요하다.
  즉, Graphical User Interface 를 활용하는 과정에서
  Model 계층과 View 계층 사이에
  Controller 계층을 만들어 사용할 수 있도록 하는 것이다.

  이렇게... 필수적인 두 계층 사이에
  필수적이지 않은 다른 계층을 두는 이유는
  두 계층(Model 과 View)이 직접적으로 결합되는 것을 막는 것으로
  Controller 계층은 Model 계층과 View 계층 사이에서 결합을 막아준다.
  Model 과 View 의 직접적인 결합은 이 둘을 함께 바뀌도록 만들어 버린다.
  이것을 Controller 계층이 막아준다는 것이다.
  따라서... Controller 계층의 로직은 간단하게 설계해야 한다.

○ Web Application 에서의 MVC 구조

  JSP 는 로직과 프리젠테이션을 알맞게 구분하기 위해
  Model2 구조를 지원하고 있으며
  Model2 구조의 개념과 구현 방법, 장단점 등을 이해하고
  적용시키는 것이 중요하다.

  - Model1 구조
    모델1 구조는 일반적으로 JSP 페이지만으로 구성되어 있는 구조를 말한다.
   즉, JSP 페이지에서 동적인 부분(로직 부분) 은 스키립릿으로 처리하고
   그 외 나머지 부분은 템플릿으로처리하는 구조인 것이다.
   모델1과 모델2의 가장 큰 차이점은
   클라이언트 요청의 진입 지점이 다르다는 것이다.

   · 장점
     개발 시간이 단축된다.
     단순한 페이지의 흐름을 바탕으로 하고 있기 때문에
     MVC 구조에 대한 추가적인 이해가 필요하지 않다.

   · 단점
     HTML, Javascropt, JSP 로직이 한 페이지에 작성되어
     어플리케이션의 기능이 많아지고 복잡해질수록 유지보수가 힘들어진다. (거의 불가능)
     디자이너와 개발자 사이에 밀접하고 원할한 소통이 요구된다.

  - Model2 구조
    모델2 구조는 JSP 와 Servlet 그리고 JavaBean 컴포넌트를 함께 사용하며,
    모델2에서 클라이언트 요청의 진입하는 지점은 컨트롤러이며
    대부분의 웹 어플리케이션의 컨트롤러는 Servlet 이 담당한다.

   · 장점
     로직과 프리젠테이션의 분리로 인해 어플리케이션이 명료해지고
     유지보수나 확장이 용이하다
     디자이너와의 작업이 분리되어 있기 떄문에
     업무 진행이 원할하고 책임의 소재가 명확하다

   · 단점
     개발 초기에 아키텍처 디자인을 위한 분석... 구성... 등의
     시간 소요로 개발 기간이 전체적으로 늘어난다.
     MVC 구조에 대한 개발자들의 이해를 필요로 하며,
     이에 대한 이유로 사전 교육 기간 등이 소요될 수 있다.

※ MVC(Model2) 구조
 
  - 모델(Model)
    비지니스 로직과 관련된 부분만 처리
    데이터베이스 관련 로직 구현
    Java Beans

  - 뷰(View)
    사용자에게 알맞은 화면을 보여주는 역할을 수행
    JSP

  - 컨트롤러(Controller)
    어플리케이션의 흐름 제어나 사용자의 요청 구현
    사용자 인증, 보안 설정, 전체 어플리케이션에 공통으로 영향을 주는 요소 구현
    사용자의 요청에 대해 알맞은 모델 사용
    사용자에게 보여줄 뷰 선택
    Servlet

※ MVC(Model2) 구현
   - JSP 기반의 웹 어플리케이션에서 Controller 에 포함 되어야 할 작업
     ·웹 브라우저(클라이언트)의 요청을 받는다
     ·웹 브라우저(클라이언트)가 요구하는 작업을 분석한다.
     ·요청한 작업을 처리하는 비즈니스 로직을 수행하는 모델(Model:Java Beans)를 사용한다.
     ·처리결과를 reuqest 또는 session 에 저장한다.
     ·적절한 뷰(View:JSP)를 선택하여 해당 뷰로 포워딩(forwarding)한다.

   - JSP 기반의 웹 어플리케이션에서 View 에 포함되어야할 작업
     ·서블릿에서 dispatcher.forward(request, response) 로
       해당 JSP 페이지와 request, response 를 공유한 경우
       해당 JSP 페이지에서 request.getAttribute("result")와 같이
       바인딩한 데이터를 활용하여 결과를 화면에 표현한다.

   - JSP 기반의 웹 어플리케이션에서 Model 에 포함되어야 할 작업
     ·컨트롤러(Controller)의 요청을 받는다
     ·비즈니스 로직을 처리한다.
     ·처리한 비즈니스 로직의 결과를 컨트롤러(Controller)로 반환한다.




-----------------------------------------------------------------------------------------------

○ MVC 관련 실습 1

- prj : WebApp24

   · web.xml         → Servlet 등록, URL 매핑
   · MVCBegin.java   → Controller 역할 (Servlet)
   · MVCBegin.jsp    → View 역할 (JSP 페이지)

- 사용자 최초 요청 주소
http://localhost:3306/WebApp24/mvcbegin



-----------------------------------------------------------------------------------------------

○ MVC 관련 실습 2

- prj : WebApp25

   · web.xml         → Servlet 등록, URL 매핑
   · MVCTest01.java   → Controller 역할 (Servlet)
   · MVCTest01.jsp    → View 역할 (JSP 페이지)

- 사용자 최초 요청 주소
http://localhost:3306/WebApp24/mvctest01


-----------------------------------------------------------------------------------------------

○ MVC 관련 실습 3

- prj : WebApp25

   · web.xml         		→ Servlet 등록, URL 매핑
   · MVCTest02.java   		→ Controller 역할 (Servlet)
   · MVCTest02Model.java	→ Model 역할(일반 자바 클래스)
   · MVCTest02.jsp    		→ View 역할 (JSP 페이지)

- 사용자 최초 요청 주소
http://localhost:3306/WebApp24/mvctest02



-----------------------------------------------------------------------------------------------
○ 폼(form) 데이터 전송 및 수신 과정 비교

  ※ MVC 패턴 적용 이전 단계와 MVC 패턴 적용 이후 단계를
    반드시 비교하여 이해할 수 있도록 할 것

  - Type A
    · prj : WebApp26
    · HelloSend01.html
    · HelloSend01.jsp

    · 사용자 최초 요청 주소
http://localhost:3306/WebApp26/HelloSend01.html

  - Type B
    · prj : WebApp27

    · HelloSend02.html
    · HelloReceive02.java
    · web.xml

    · 사용자 최초 요청 주소
http://localhost:3306/WebApp27/HelloSend02.html

  - Type C
    · prj : WebApp28

    · HelloSend03.html
    · HelloSend03Controller.java
    · HelloReceive03.jsp
    · HelloReceive03Controller.java
    · HelloReceive03Model.java
    · web.xml

    · 사용자 최초 요청 주소
http://localhost:3306/WebApp28/hello
■■■ 웹 어플리케이션 ■■■

○ 웹 어플리케이션의 개념

  웹 어플리케이션은 웹 브라우저의 요청에 대하여 처리한 결과를 보여주는 프로그램을 의미한다.
  사용자가 어떤 상태로 무엇을 요청했느냐에 따라 스스로 판단하여
  자동으로 각각에 대한 처리 결과를 보여주는 프로그램이다.

○ 웹 어플리케이션의 구성요소

  1. 웹 브라우저
    - 인터넷 익스플로러, 크롬, 파이어폭스, 오페라, 사파리, ...

  2. 웹 서버(WAS : Web Application Server)
    - 웹 서버란 웹 브라우저를 이용하여 World Wide Web 을 사용하는 클라이언트에게
      미리 저장된 하이퍼텍스트(Hyper Text)를 제공하는 서버이다.
    - 대표적으로는 MS 기반읜 IIS 서버와 유닉스 기반의 아파치 서버 등이 있다.

  3. 어플리케이션 서버
    - 처리 결과값을 웹 서버에 전달
    - 클라이언트가 어떤 페이지를 요청했느냐에 따라
      그 문서를 동적으로 만들어 전달
    - JSP, Servlet 등으로 동적 웹 페이지 구축


  4. 데이터베이스
    - 데이터 저장 및 처리

○ 웹 어플리케이션의 구분

  1. 어플리케이션 서버 방식
     - 웹 어플리케이션 서버를 통해
       간접적으로 웹 어플리케이션 프로그램을 실행한다.
     - 대용량 처리에 유리하며, CGI(Common Gateway Interface)방식에 비해
       메모리 사용량이 적다.


  2. 스크립트 방식
     - 코드 형태 : 컴파일 되지 않은 스크립트 코드
     - 실행 방식 : 스크립트 코드를 해석한 뒤 실행
     - 코드 변경 : 스크립트 코드만 수정

○ 웹 어플리케이션

 1. Servlet(Server + Applet)
    - SUN 사에서 내놓은 기술로서
      JAVA 라는 언어를 기반으로 하여 동적인 컨텐츠를 생성하는 기술.
      JAVA 코드 안에 HTML 태그가 혼재되어 있어 효율성이 다소 떨어질 수 있다.
      → JAVA 가 HTML 을 품고 있는 형태.
        확장자는 .java → .class

 2. JSP(Java Server Page)
   - JSP 또한 JAVA 언어를 기반으로 하여 만들어진 것이지만,
     ASP, PHP 처럼 동적인 컨텐츠를 생성하기 위해
     스크립트 언어 형식으로 프로그램을 작성할 수 있어서
     개발자에게 비교적 쉬운 개발을 할 수 있게 한다.
     개발자가 직접 태그를 정의해서사용할 수 있는
     사용자 정의 태그를 지정할 수 있는 기능 등 추가적인 확장 기능도 갖고있다.
     → HTML 이 JAVA 를 품고 있는 형태.
       확장자는 .jsp ▶ .html
■■■ 쿠키(Cookie)와 세션(Session) ■■■

○ 쿠키(Cookie)

  - 쿠키는 클라이언트에 대한 정보를 클라이언트의 하드디스크에
    작은 파일 형태로 저장한 text 파일로
    서버에서 사용자에게 편리한 기능을 제공하기 위해 많이 사용되고,
    쿠키는 웹 브라우저에 의해 관리된다.

  - 쿠키는 텍스트 형태로 저장되기 대문에 변조나 복사 등이 가능하여 보안성이 없고
    클라이언트에... 예전에는 총 300개 까지 저장 가능했으며,
    각 도메인 당 갯수 제한(20개)이나 크기 제한(4096Byte)은
    사실상 무의미해져 가고 있다.

  - 저장되는 위치는 시스템(운영체제)이나 브라우저에 따라 다르며
    일반적인 형식(계정명@도메인)도 지속적으로 바뀌어 가고 있다.

  - 쿠키는 웹 브라우저가 거쳐간 웹 사이트 및 개인 정보가 기록되기 때문에
    개인의 사생활을 침해할 소지가 있으며,
    이로 인한 보안 문제를 유발할 수 있기 때문에
    일반적으로 웹 브라우저 자체에 쿠키 거부 기능이  포함되어 있다.
    하지만, 쿠키 거부 기능을 설정하게 되면 웹 브라우저와의 연결을
    지속시키지 못하기 대문에 서비스에 문제가 발생하게 된다.
    (사실상 거부하는 의마가 없음... 반 강제적)

   - 쿠키의 동작 방식
     쿠키의 동작 방식은 웹 서버와 웹 브라우저 간의 상호 협력으로 이루어진다.
     웹 서버가 웹 브라우저의 요청에 응답할 때
     HTTP 프로토콜에 있는 HTTP 해더에 쿠키 정보를 포함시켜 클라이언트쪽으로 보낸다.
     그리고, 웹브라우저가 웹 서버에 존재하는 페이지를 요구할 때
     그 전에 자신이 방문했을 때 해당 페이지에 대해 웹 서버가 웹 브라우저 쪽으로
     심어놓았던 쿠키를 웹 서버로 다시 건네주어서
     이전 상태를 웹 서버가 알 수  있도록 한다.

   - 쿠키(객체)의 파라미터(속성)
     · name=value
       :쿠키는 반드시 이름을 포함해야 한다.
        이름은 변수명과 같은 목적으로 사용한다.
     · expires=date
       :유효기간을 지정한다.
        날짜를 생략할 경우 브라우저 종료 시점까지 쿠키가 남아있게 된다.
        유효기간 설정은 그리니치 표준시(Wdy, DD-Mon-TT HH:MM:SS GNT)로
        설정하게 된다.
     · path=path
       :웹 서버에서 쿠키 값이 디렉터리 간에 유효한 범위를 설정하는 것으로
        path 값은 웹 서버의 document root 를 기준으로 설정한다.
        예를 들어... path 가 『/』이면 (『"path=/;』)
        도메인 루트(/)에서 시작하는 모든 곳을 접속할 때
        해당 쿠키의 값을 적용할 수 있다.  
        생략할 경우 현재 문서의 위치와 디렉터리와 하위 디렉터리가 쿠키의 범위가 된다.
      · domain=domain
        :한 사이트에서 만든 쿠키가 다른 사이트에 영향을 주지 않기 때문에
         도메인 항목이 필요하다.
         도메인은 자동으로 사이트의 기본 도메인으로 설정된다.
      · secure
        :데이터의 전송에 보안이 요구되는지를 지정한다.
         true 는 브라우저가 안전하다고 판단하는 서버만 나타나게 된다.
         기본값(default)은 false 이다.

     - 쿠키의 기본 설정
      ① Cookie 객체 생성
         Cookie c = new Cookie("쿠키이름","쿠키값");
      ② Cookie 객체 설정
         C.setMaxAge(쿠키 유효시산 초 단위 설정);
      ③ Cookie 객체 등록(추가)
         response.addCookie(c);

     - JSP 에서 쿠키를 설정하는 방법은 두 가지가 이싿.
       첫 번째 방법은
       『response』객체에 『setHeader()』 메소드를 이용하여 쿠키를 설정하는 것이다.
       하지만 권장하지 않는다.
       ex) response.setHeader("set_cookie","name=value, expires=date, ...");
	   //-- 이방법은
           //   Header 에 key 와 value, key 와 value, ... 을 String type 으로 넘기는 것이기 때문에
           //   엄격히 구분하자면 쿠키라는 객체를 넘기는 것이 아니다.
           //   과거에는 쿠키라는 클래스가 존재하지 않거나, 지원이 부실했기 때문에
           //   이 방법을 이용했었다.

	두번째 방법은
	『Cookie』클래스를 이용하는 방법이다.
  	· String getComment()
	  : 쿠키에 대한 설명을 가져온다.
	· String getDomain()
	  : 쿠키가 유효한 도메인 정보를 가져온다.
	· int getMaxAge()
	  : 쿠키의 유효한 시간 정보를 가져온다
	· String getName()
	  : 쿠키의 이름을 가져온다
	· String getPath()
	  : 쿠키의 유효한 디렉터리 정보를 가져온다.
	· String getValue()
	  : 쿠키의 해당 값을 가져온다.
	· int getVersion()
	  : 쿠키의 버젼값을 가져온다
	· void setComment(String purpose)
	  : 쿠키의 대한 설명을 설정한다.
	· void setDomain(String pattern)
	  : 쿠키가 유효한 도메인 정보를 설정한다.
	· void setMaxAge(String expiry)
	  : 쿠키가 유효한 시간정보를 설정한다.
	· void setSecure(String url)
	  : 쿠키의 보안 설정값을 구성한다.
	· void setValue(String newValue)
	  : 쿠키의 해당 값을 설정한다.
	· void setVersion(int v)
	  : 쿠키의 버전 값을 설정한다.

     - JSP 에서 쿠키(Cookie) 유효시간 설정
       『setMaxAge(int expiry)』메소드를 통해 유효시간을 설정한다.
       ·『expiry』가 『음수』일 때
        : 브라우저가 종료되면 쿠키가 제거된다.
       ·『expiry』가 『0』일 때
        : 생성과 동시에 쿠키가 제거된다.
       ·『expiry』가 『양수』일 때
        : 초 단위로 해당 시간만큼 쿠키가 유지된다.
       ·『setMaxAge()』멧소드를 통해 유효시간을 설정하지(명시하지) 않은 경우
         기본적으로 음수가 설정되어 브라우저가 종료될 때 까지 쿠키가 유지된다.



○ 세션(Session)

   - 쿠키의 경우 브라우저에 상태를 유지하기 위한 정보를 저장하지만
     ( 즉, 로컬 PC 의 하드디스크에 저장)
     세션은 웹 서버의 웹 컨테이너에 상태를 유지하기 위한 정보를 저장하는 것으로
     『javax.servlet.http』패캐지의 『HttpSession』인터페이스를 통해
     세션을 사용하게 된다.
     또한, 세션은 서버와 관련된 정보를 노출하지 않기 때문에
     쿠키를 사용하는 것 보다 『HttpSession』인터페이스의 세션을 통한 상태 관리가
     보다 안정적(보안성 향상)이라 할 수 있다.

   - Session 생성
     Session 을 생성하기 위해서는 페이지 디렉티브(pate directive)의
     Session 속성을 true 로 설정한다.
     (별도로 설정하지 않아도 자동으로 기본값 적용. 즉, 사용하지 않을 경우만 false 설정)
     ex) <%@ page session='true'%>

   - Session 내장 객체의 주요 메소드
     ·String getId()
      : Session 의 고유 ID 값을 구한다.
        (『세션아이디』라고 한다. 세션 고유 ID 를 문자열 형태로 반환한다.)
     ·long getCreationTime()
      : 세션이 생성된 시간을 구한다.
	(시간은 1970년 1월 1일 이후 흘러간 시간을 의미한다.)
     ·long getLastAccessedTime()
      : 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구한다.
     ·int getMaxInactiveInterval()
      : 세션 유지 시간을 초로 반환한다. 기본값은 30분으로 지정된다.
     ·void setMaxInactiveInterval(int interval)
      : 세션을 유지할 시간을 interval 에 설정된 초 값으로 설정한다.
     ·void invalidate()
      : 현재 세션을 종료한다. 세션과 관련된 모든 값을 삭제한다.
     ·boolean isNew()
      : 클라이언트 『세션아이디』를 할당하지 않은 경우 『true』를 반환한다.
  	새로운 세션인지의 여부를 확인할 때 사용한다.
     ·void setAttribute(String key, Object value)
      : 주어진 key 속성의 값을 value 로 지정한다.
     ·Object getAttribute(String key)
      : 주어진 key 속성의 값을 얻어낸다.
     ·void removeAttribute(String key)
      : 주어진 key 속성의 값을 제거한다.

   - 한 번 생상된 세션은 종료하기 전까지 지속적으로 유지된다.
     (중간에 사라지지 않음)
     단, 임의로 설정할 경우 특정 시점에 해제할 수 있다.
     이와 같은 성격으로 웹 어플리케이션을 실행하는 동안
     지속적으로 사용하는 데이터의 저장 장소로는 세션이 적합(적당)하다.


※ 참고


    - 스코프(scope) → 대부분의 교재에서 life cycle(생명주기)로 설명함.
      웹 어플리케이션은 page, request, session, application 이라는
      4개의 영역(객체)를 가지고 있으며
      기본 객체의 영역은 객체의 유효기간이라고도 불리며,
      객체를 누구와 공유할 것인가를 나타낸다.

      ·page 영역
      한 번의 웹 브라우저(클라이언트)의 요청에 대해
      하나의 JSP 페이지가 호출되며
      웹 브라우저의 요청이 들어오면
      이 때... 단 한개의 페이지만 대응된다.

      ·request 영역
      한 번의 웹 브라우저(클라이언트)의 요청에 대해
      같은 요청을 공유하는 페이지가 대응되며
      웹 브라우저의 한 번의 요청이 단지 한 개의 페이지만 요청될 수 있고
      같은 request 영역이면 두 개의 페이지가 같은 요청을 공유한다.
      (include 액션 태그, forward 액션 태그 사용 시)

      ·session 영역
      하나의 웹 브라우저 당 한 개의 Session 객체가 생성된다.
      같은 웹 브라우저 내에서는 요청되는 페이지들이 같은 객체를 공유한다.

      ·application 영역
      하나의 웹 어플리케이션 당 한 개의 application 객체가 생성된다.
      대부분의 환경 설정에서 사용된다.
      같은 웹 어플리케이션에서 요청되는 페이지들은 객체를 공유한다.








■■■ 포워딩(Forwarding)과 리다이렉트(Redirect) ■■■


○ 포워딩(Forwarding, 포워드)

  요청을 포워딩할 때 해당 요청은 서버의 다른 자원에 전달된다.
  이 때는 다른 자원에 이 요청을 처리할 것을 클라이언트에게 알리지 않는다.
  이와 같은 방식의 처리는 웹 컨테이너 안에서만 일어나고
  클라이언트는 알 수 없게 된다.

  포워딩은 리다이렉트와 다르게
  객체를 요청에 담고, 해당 요청을 사용할 다음 자원에 전송한다.
  따라서 클라이언트는 포워딩이 발생한 사실을 알지 못하는 것이다.
  포워딩은 클라이언트와 통신 없이 서버에서만 처리되기 때문에
  리다이렉트보다 나은 성능을 갖는다고 할 수 있다.





○ 리다이렉트(Redirect, 리디렉팅, 리디렉션)

  클라이언트의 요청을 처리한 후
  컨테이너는 『sendRedirect()』메소드가 호출되면 브라우저에 응답을 보낸다
  이 응답에는 브라우저가 웹 컨테이너의 응답을 받은 후
  다시 요청을 보낼 새로운 URL 이 포함되어 있다.
  여기에서 하나의 요청이 종결된다.
  새로 부여받은 URL 로 브라우저가 완전히 새롭게 요청하기 때문에
  이전의 요청 스코프에 저장되어 있던 객체는
  새로운 요청이 이루어지기 전에 소멸된다.
  리다이렉트는 추가적으로 발생한 왕복 처리 때문에 포워딩보다 느리다고 할 수 있다.


  기억해야 할 것은...
  최종적으로 수행해야 하는 작업은 새로운 요청에 의한 것이고
  이것을 클라이언트가 알고있기 때문에
  브라우저 창의 주소가 처음 요청한 주소가 아니고
  최종 주소값으로 변하게 된다.
  또한, 하나의 요청에 담겨있던 객체들은 소멸되고
  다음 작업까지 전달되지 않는다.


※ 기본적으로 클라이언의 입장에서 편한 것은 포워딩이지만,
  DB 에서 작업이 이루어지고, 다시 그에 대한 응답을 받은 클라이언트가
  새로운 요청을 하게끔 만들어야 하는 경우는 리다이렉트를 사용해야 한다.