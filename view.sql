--○ 댓글 뷰
CREATE OR REPLACE VIEW REPLY_VIEW
AS
SELECT REP.REPLY_ID AS "댓글아이디"
     , REP.ROOT_REPLY_ID AS "상위댓글아이디"
     , UC.USER_CODE AS "회원코드드"
     , NL.NICKNAME AS "회원닉네임"
     , REP.POST_ID AS "게시물아이디"
     , REP.REPLY_CONTENT AS "댓글내용"
     , REP.CREATED_DATE AS "작성일"
     , CASE WHEN REP.ROOT_REPLY_ID IS NULL 
            THEN 0 ELSE 1 
            END AS "대댓글여부"
FROM REPLY REP 
JOIN USER_CODE UC
ON REP.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
ORDER BY CASE WHEN REP.ROOT_REPLY_ID IS NULL 
              THEN REP.REPLY_ID ELSE REP.ROOT_REPLY_ID 
              END ASC, REP.CREATED_DATE ASC;

SELECT *
FROM REPLY_VIEW;


--○ 게시판 관리 뷰(게시판, 말머리)
CREATE OR REPLACE VIEW BOARD_VIEW
AS
SELECT BOA.BOARD_ID AS "게시판아이디"
     , PL.POST_LABEL_ID AS "말머리아이디"
     , BC.BOARD_CATE_NAME AS "카테고리이름"
     , WG.WRITE_GRADE_NAME AS "관리등급이름"
     , BOA.BOARD_NAME AS "게시판이름"
     , PL.POST_LABEL_NAME AS "말머리이름"
FROM POST_LABEL PL 
JOIN BOARD BOA
ON PL.BOARD_ID = BOA.BOARD_ID
JOIN BOARD_CATEGORY BC
ON BOA.BOARD_CATE_ID = BC.BOARD_CATE_ID
JOIN WRITE_GRADE WG
ON BOA.WRITE_GRADE_ID = WG.WRITE_GRADE_ID;

SELECT *
FROM BOARD_VIEW;


--○ 고독한 캠핑방 게시글 뷰
CREATE OR REPLACE VIEW LONELY_CAMPING_POST_VIEW
AS
SELECT POS.POST_ID AS "게시글아이디"
     , UC.USER_CODE AS "회원코드"
     , PL.POST_LABEL_NAME AS "말머리이름"
     , POS.POST_TITLE AS "제목"
     , AP.ATTACHMENT_PATH AS "첨부파일경로"
     , POS.CREATED_DATE AS "작성일"
     , NL.NICKNAME AS "작성자"
     , (SELECT COUNT(*) 
        FROM POST_VIEW_LOG PVL 
        WHERE PVL.POST_ID = POS.POST_ID) AS "조회수"
     , (SELECT COUNT(*)
        FROM RECOMMEND REC
        WHERE REC.POST_ID = POS.POST_ID) AS "추천"
FROM POST POS
JOIN USER_CODE UC
ON POS.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL
ON UC.USER_CODE = NL.USER_CODE
JOIN BOARD BOA
ON POS.BOARD_ID = BOA.BOARD_ID
JOIN BOARD BOA
ON POS.BOARD_ID = BOA.BOARD_ID
JOIN POST_LABEL PL
ON POS.POST_LABEL_ID = PL.POST_LABEL_ID
JOIN ATTACHMENT_POST AP
ON POS.POST_ID = AP.POST_ID;

SELECT *
FROM LONELY_CAMPING_POST_VIEW;

--○ 신고 관리 뷰(통합)
CREATE OR REPLACE VIEW REPORT_MANAGEMENT_VIEW
AS
SELECT PR.POST_REPORT_ID AS "신고접수아이디"
     , NL_REPORTER.NICKNAME AS "신고자닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자닉네임"
     , POS.POST_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , PR.REPORT_CONTENT AS "신고내용"
     , PR.REPORTED_DATE AS "신고일"
     , PRA.ADMIN_ID AS "관리자아이디"
     , CASE WHEN PRA.POST_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , PRA.COMPLETED_DATE AS "처리일"     
FROM POST_REPORT PR
JOIN USER_CODE UC_REPORTER
ON PR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN POST POS
ON PR.POST_ID = POS.POST_ID
JOIN USER_CODE UC_REPORTED
ON POS.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON PR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN POST_REPORT_ACTION PRA
ON PR.POST_REPORT_ID = PRA.POST_REPORT_ID

UNION ALL

SELECT RR.REPLY_REPORT_ID AS "신고접수아이디"
     , NL_REPORTER.NICKNAME AS "신고자닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자닉네임"
     , RR.REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RR.REPORT_CONTENT AS "신고내용"
     , RR.REPORTED_DATE AS "신고일"
     , RRA.ADMIN_ID AS "관리자아이디"
     , CASE WHEN RRA.REPLY_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , RRA.COMPLETED_DATE AS "처리일" 
FROM REPLY_REPORT RR
JOIN USER_CODE UC_REPORTER
ON RR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN REPLY REP
ON RR.REPLY_ID = REP.REPLY_ID
JOIN USER_CODE UC_REPORTED
ON REP.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON RR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN REPLY_REPORT_ACTION RRA
ON RR.REPLY_REPORT_ID = RRA.REPLY_REPORT_ID

UNION ALL

SELECT RRR.RENTAL_REPLY_REPORT_ID AS "신고접수아이디"
     , NL_REPORTER.NICKNAME AS "신고자닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자닉네임"
     , RRR.RENTAL_REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RRR.REPORT_CONTENT AS "신고내용"
     , RRR.REPORTED_DATE AS "신고일"
     , RRRA.ADMIN_ID AS "관리자아이디"
     , CASE WHEN RRRA.RENTAL_REPLY_REPORT_ACTION_ID IS NOT NULL
            THEN '처리완료'
            ELSE '접수'
            END AS "처리상태"
     , RRRA.COMPLETED_DATE AS "처리일"
FROM RENTAL_REPLY_REPORT RRR
JOIN USER_CODE UC_REPORTER
ON RRR.REPORTER_ID = UC_REPORTER.USER_CODE
JOIN NICKNAME_LOG NL_REPORTER
ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTER.USER_CODE)
JOIN RENTAL_REPLY RR
ON RRR.RENTAL_REPLY_ID = RR.RENTAL_REPLY_ID
JOIN USER_CODE UC_REPORTED
ON RR.USER_CODE = UC_REPORTED.USER_CODE
JOIN NICKNAME_LOG NL_REPORTED
ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC_REPORTED.USER_CODE)
JOIN REPORT_TYPE RT
ON RRR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
JOIN RENTAL_REPLY_REPORT_ACTION RRRA
ON RRR.RENTAL_REPLY_REPORT_ID = RRRA.RENTAL_REPLY_REPORT_ID;


SELECT *
FROM REPORT_MANAGEMENT_VIEW;


--○ 장비명병 평균 렌탈가 조회 뷰
CREATE OR REPLACE VIEW RENTAL_PRICE_VIEW
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(PAY.PAY_ID) AS "렌탈건수"
     , ROUND(AVG(PAY.PAY_AMOUNT), 0) AS "평균 렌탈가"
FROM PAY PAY
JOIN RENTAL_MATCHING_DONE RMD
ON PAY.RENTAL_MATCHING_DONE_ID = RMD.RENTAL_MATCHING_DONE_ID
JOIN RENTAL_MATCHING_REQ RMR
ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
JOIN RENTAL REN
ON RMR.RENTAL_ID = REN.RENTAL_ID
JOIN EQUIP_CODE EC
ON REN.EQUIP_CODE = EC.EQUIP_CODE
JOIN EQUIPMENT_REGISTRATION ER
ON EC.EQUIP_CODE = ER.EQUIP_CODE
JOIN EQUIP_NAME EN
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN CATEGORY CAT
ON ER.CATEGORY_ID = CAT.CATEGORY_ID
JOIN PAY_CANCEL PC
ON PAY.PAY_ID = PC.PAY_ID
WHERE PC.PAY_CANCEL_ID IS NULL
GROUP BY BRA.BRAND_NAME, EN.EQUIP_NAME, CAT.CATEGORY_NAME;

SELECT *
FROM RENTAL_PRICE_VIEW;

--○ 장비명별 평균 신품가 조회 뷰
CREATE OR REPLACE VIEW EQUIP_ORIGINAL_PRICE_VIEW
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(ER.EQUIP_ID) AS "장비등록건수"
     , ROUND(AVG(ER.ORIGINAL_PRICE), 0) AS "평균 신품가"
FROM EQUIPMENT_REGISTRATION ER
JOIN EQUIP_NAME EN
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN CATEGORY CAT
ON ER.CATEGORY_ID = CAT.CATEGORY_ID
JOIN EQUIP_CODE EC
ON ER.EQUIP_CODE = EC.EQUIP_CODE
WHERE EC.OWN_END_DATE IS NULL
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME;

SELECT *
FROM EQUIP_ORIGINAL_PRICE_VIEW;

--○ 게시판 활성도 뷰
CREATE OR REPLACE VIEW BOARD_ACTIVITY_VIEW
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "게시글수"
     , COUNT(REP.REPLY_ID) AS "댓글수"
     , COUNT(PVL.POST_VIEW_LOG_ID) AS "조회수"
FROM BOARD BOA
JOIN POST POS
ON POS.BOARD_ID = BOA.BOARD_ID
JOIN REPLY REP
ON POS.POST_ID = REP.POST_ID
JOIN POST_VIEW_LOG PVL
ON POS.POST_ID = PVL.POST_ID
GROUP BY BOA.BOARD_NAME;

SELECT *
FROM BOARD_ACTIVITY_VIEW;

--○ 신고유형 분석 뷰
CREATE OR REPLACE VIEW REPORT_TYPE_ANALYSIS_VIEW
AS 
SELECT RT.REPORT_TYPE_NAME AS "신고유형"
     , COUNT(PR.POST_REPORT_ID) AS "게시글신고수"
     , COUNT(RR.REPLY_REPORT_ID) AS "댓글신고수"
     , (COUNT(PR.POST_REPORT_ID) + COUNT(RR.REPLY_REPORT_ID)) AS "총신고수"
FROM REPORT_TYPE RT
JOIN POST_REPORT PR
ON RT.REPORT_TYPE_ID = PR.REPORT_TYPE_ID
JOIN REPLY_REPORT RR
ON RT.REPORT_TYPE_ID = RR.REPORT_TYPE_ID
GROUP BY RT.REPORT_TYPE_NAME;

SELECT *
FROM REPORT_TYPE_ANALYSIS_VIEW;

--○ 게시판별 신규게시글수
CREATE OR REPLACE VIEW NEW_POST_DATA_VIEW
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "신규게시글수"
FROM POST POS
JOIN BOARD BOA
ON POS.BOARD_ID = BOA.BOARD_ID
WHERE TRUNC(POS.CREATED_DATE) = TRUNC(SYSDATE)
GROUP BY BOA.BOARD_NAME;

SELECT *
FROM NEW_POST_DATA_VIEW;

--○ 카테고리별 인기 장비 통계 뷰뷰
CREATE OR REPLACE VIEW POPULAR_EQUIP_VIEW
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(RMD.RENTAL_MATCHING_DONE_ID) AS "렌탈수"
FROM CATEGORY CAT
JOIN EQUIPMENT_REGISTRATION ER
ON CAT.CATEGORY_ID = ER.CATEGORY_ID
JOIN EQUIP_NAME EN
ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
JOIN BRAND BRA
ON EN.BRAND_ID = BRA.BRAND_ID
JOIN EQUIP_CODE EC
ON ER.EQUIP_CODE = EC.EQUIP_CODE
JOIN RENTAL REN
ON ER.EQUIP_CODE = REN.EQUIP_CODE
JOIN RENTAL_MATCHING_REQ RMR
ON REN.RENTAL_ID = RMR.RENTAL_ID
JOIN RENTAL_MATCHING_DONE RMD
ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME
ORDER BY CAT.CATEGORY_NAME, "렌탈수";

SELECT *
FROM POPULAR_EQUIP_VIEW;

--○ 등급별 장비 분포 통계 뷰
CREATE OR REPLACE VIEW EQUIP_GRADE_DISTRIBUTION_VIEW
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
FROM EQUIP_CODE EC
JOIN EQUIPMENT_REGISTRATION ER
ON EC.EQUIP_CODE = ER.EQUIP_CODE
JOIN CATEGORY CAT
ON ER.CATEGORY_ID = CAT.CATEGORY_ID
JOIN RE