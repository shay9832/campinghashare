--○ 테이블 강제 삭제(초기에만 사용하고 이후 삭제 필요)
drop table HOT_POST_LOG cascade constraints purge
/

drop table RECOMMEND cascade constraints purge
/

drop table BOOKMARK cascade constraints purge
/

drop table EVENT_ENTRY cascade constraints purge
/

drop table NOTI_CHECK_LOG cascade constraints purge
/

drop table NOTI cascade constraints purge
/

drop table NOTI_TYPE cascade constraints purge
/

drop table STATISTICS cascade constraints purge
/

drop table STAT_TYPE cascade constraints purge
/

drop table STAT_PERIOD cascade constraints purge
/

drop table POST_VIEW_LOG cascade constraints purge
/

drop table POST_REPORT_ACTION cascade constraints purge
/

drop table POST_REPORT cascade constraints purge
/

drop table REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPLY_REPORT cascade constraints purge
/

drop table RENTAL_REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPORT_ACTION_TYPE cascade constraints purge
/

drop table RENTAL_REPLY_REPORT cascade constraints purge
/

drop table REPORT_TYPE cascade constraints purge
/

drop table OWNED_COUPON cascade constraints purge
/

drop table ISSUED_COUPON cascade constraints purge
/

drop table COUPON_TYPE cascade constraints purge
/

drop table POINT_LOG cascade constraints purge
/

drop table POINT_CHANGE_TYPE cascade constraints purge
/

drop table RANK cascade constraints purge
/

drop table ADDRESS_LOG cascade constraints purge
/

drop table WISHLIST cascade constraints purge
/

drop table SATISFACTION_LOG cascade constraints purge
/

drop table NICKNAME_LOG cascade constraints purge
/

drop table USERS cascade constraints purge
/

drop table SIGNUP_TYPE cascade constraints purge
/

drop table SUSPENDED_USER cascade constraints purge
/

drop table ATTACHMENT_POST cascade constraints purge
/

drop table ATTACHMENT_REPLY cascade constraints purge
/

drop table REPLY cascade constraints purge
/

drop table POST cascade constraints purge
/

drop table POST_LABEL cascade constraints purge
/

drop table BOARD cascade constraints purge
/

drop table WRITE_GRADE cascade constraints purge
/

drop table BOARD_CATEGORY cascade constraints purge
/

drop table ATTACHMENT_CAMPING_DIARY cascade constraints purge
/

drop table DIARY cascade constraints purge
/

drop table ATTACHMENT_RENTAL_REPLY cascade constraints purge
/

drop table ATTACHMENT_EVENT cascade constraints purge
/

drop table EVENT cascade constraints purge
/

drop table ATTACHMENT_EQUIP_REG cascade constraints purge
/

drop table EQUIP_CODE cascade constraints purge
/

drop table EQUIPMENT_REGISTRATION cascade constraints purge
/

drop table EQUIP_NAME cascade constraints purge
/

drop table BRAND cascade constraints purge
/

drop table RENTAL_REPLY cascade constraints purge
/

drop table PAY_CANCEL cascade constraints purge
/

drop table PAY_CANCEL_REASON cascade constraints purge
/

drop table USERS_DELIVERY_RETURN cascade constraints purge
/

drop table USERS_DELIVERY cascade constraints purge
/

drop table STORAGE_LAST_RETURN cascade constraints purge
/

drop table STOREN_LAST_RETURN cascade constraints purge
/

drop table INSPEC_LIST cascade constraints purge
/

drop table ADMINS cascade constraints purge
/

drop table CATE_INSPEC cascade constraints purge
/

drop table CATEGORY cascade constraints purge
/

drop table INSPEC_ITEM cascade constraints purge
/

drop table INSPEC_GRADE cascade constraints purge
/

drop table RENTER_ADD_PAY cascade constraints purge
/

drop table RENTER_PROBLEM cascade constraints purge
/

drop table INSPEC_RESULT_ACTION cascade constraints purge
/

drop table INSPEC_RESULT cascade constraints purge
/

drop table PLATFORM_DELIVERY_RETURN cascade constraints purge
/

drop table PLATFORM_DELIVERY cascade constraints purge
/

drop table PAY cascade constraints purge
/

drop table STOREN cascade constraints purge
/

drop table STORAGE cascade constraints purge
/

drop table EQUIP_SIZE cascade constraints purge
/

drop table STOREN_MATCHING_DONE cascade constraints purge
/

drop table STOREN_MATCHING_REQ cascade constraints purge
/

drop table STOREN_IRA cascade constraints purge
/

drop table RENTAL_MATCHING_DONE cascade constraints purge
/

drop table RENTAL_MATCHING_REQ cascade constraints purge
/

drop table USER_CODE cascade constraints purge
/

drop table RENTAL cascade constraints purge
/

drop table PAY_METHOD cascade constraints purge
/

drop table EQUIP_GRADE cascade constraints purge
/

drop table INSPEC_RESULT_ACTION_TYPE cascade constraints purge
/

drop table RENTER_PROBLEM_TYPE cascade constraints purge
/

drop table BOOST_LOG cascade constraints purge
/

drop table EVENT_WIN cascade constraints purge
/

drop table RENTER_PROBLEM_LOST cascade constraints purge
/



--○ 시퀀스 삭제
DROP SEQUENCE CATEGORY_SEQ;
DROP SEQUENCE BRAND_SEQ;
DROP SEQUENCE EQUIP_NAME_SEQ;
DROP SEQUENCE EQUIP_SIZE_SEQ;
DROP SEQUENCE EQUIP_CODE_SEQ;
DROP SEQUENCE EQUIPMENT_REGISTRATION_SEQ;
DROP SEQUENCE STOREN_SEQ;
DROP SEQUENCE STORAGE_SEQ;
DROP SEQUENCE RENTAL_SEQ;
DROP SEQUENCE RENTAL_REPLY_SEQ;
DROP SEQUENCE RENTAL_MATCHING_REQ_SEQ;
DROP SEQUENCE RENTAL_MATCHING_DONE_SEQ;
DROP SEQUENCE STOREN_MATCHING_REQ_SEQ;
DROP SEQUENCE STOREN_IRA_SEQ;
DROP SEQUENCE STOREN_MATCHING_DONE_SEQ;
DROP SEQUENCE PAY_METHOD_SEQ;
DROP SEQUENCE PAY_SEQ;
DROP SEQUENCE PAY_CANCEL_SEQ;
DROP SEQUENCE PAY_CANCEL_REASON_SEQ;
DROP SEQUENCE USERS_DELIVERY_SEQ;
DROP SEQUENCE USERS_DELIVERY_RETURN_SEQ;
DROP SEQUENCE PLATFORM_DELIVERY_SEQ;
DROP SEQUENCE PLATFORM_DELIVERY_RETURN_SEQ;
DROP SEQUENCE STORAGE_LAST_RETURN_SEQ;
DROP SEQUENCE STOREN_LAST_RETURN_SEQ;
DROP SEQUENCE CATE_INSPEC_SEQ;
DROP SEQUENCE INSPEC_ITEM_SEQ;
DROP SEQUENCE INSPEC_GRADE_SEQ;
DROP SEQUENCE INSPEC_LIST_SEQ;
DROP SEQUENCE EQUIP_GRADE_SEQ;
DROP SEQUENCE INSPEC_RESULT_SEQ;
DROP SEQUENCE INSPEC_RESULT_ACTION_SEQ;
DROP SEQUENCE INSPEC_RESULT_ACTION_TYPE_SEQ;
DROP SEQUENCE RENTER_PROBLEM_TYPE_SEQ;
DROP SEQUENCE RENTER_PROBLEM_SEQ;
DROP SEQUENCE RENTER_PROBLEM_LOST_SEQ;
DROP SEQUENCE RENTER_ADD_PAY_SEQ;
DROP SEQUENCE WISHLIST_SEQ;
DROP SEQUENCE SATISFACTION_LOG_SEQ;
DROP SEQUENCE SIGNUP_TYPE_SEQ;
DROP SEQUENCE RANK_SEQ;
DROP SEQUENCE BOOST_LOG_SEQ;
DROP SEQUENCE ADDRESS_LOG_SEQ;
DROP SEQUENCE COUPON_TYPE_SEQ;
DROP SEQUENCE ISSUED_COUPON_SEQ;
DROP SEQUENCE OWNED_COUPON_SEQ;
DROP SEQUENCE POINT_CHANGE_TYPE_SEQ;
DROP SEQUENCE POINT_LOG_SEQ;
DROP SEQUENCE NICKNAME_LOG_SEQ;
DROP SEQUENCE USER_CODE_SEQ;
DROP SEQUENCE SUSPENDED_USER_SEQ;
DROP SEQUENCE BOARD_CATEGORY_SEQ;
DROP SEQUENCE BOARD_SEQ;
DROP SEQUENCE WRITE_GRADE_SEQ;
DROP SEQUENCE POST_LABEL_SEQ;
DROP SEQUENCE POST_SEQ;
DROP SEQUENCE DIARY_SEQ;
DROP SEQUENCE POST_VIEW_LOG_SEQ;
DROP SEQUENCE HOT_POST_LOG_SEQ;
DROP SEQUENCE RECOMMEND_SEQ;
DROP SEQUENCE REPLY_SEQ;
DROP SEQUENCE BOOKMARK_SEQ;
DROP SEQUENCE EVENT_SEQ;
DROP SEQUENCE EVENT_ENTRY_SEQ;
DROP SEQUENCE EVENT_WIN_SEQ;
DROP SEQUENCE NOTI_TYPE_SEQ;
DROP SEQUENCE NOTI_SEQ;
DROP SEQUENCE NOTI_CHECK_LOG_SEQ;
DROP SEQUENCE STAT_TYPE_SEQ;
DROP SEQUENCE STAT_PERIOD_SEQ;
DROP SEQUENCE STATISTICS_SEQ;
DROP SEQUENCE REPORT_TYPE_SEQ;
DROP SEQUENCE REPORT_ACTION_TYPE_SEQ;
DROP SEQUENCE POST_REPORT_SEQ;
DROP SEQUENCE POST_REPORT_ACTION_SEQ;
DROP SEQUENCE REPLY_REPORT_SEQ;
DROP SEQUENCE REPLY_REPORT_ACTION_SEQ;
DROP SEQUENCE RENTAL_REPLY_REPORT_SEQ;
DROP SEQUENCE RENTAL_REPLY_REPORT_ACTION_SEQ;
DROP SEQUENCE ATTACHMENT_POST_SEQ;
DROP SEQUENCE ATTACHMENT_REPLY_SEQ;
DROP SEQUENCE ATTACHMENT_CAMPING_DIARY_SEQ;
DROP SEQUENCE ATTACHMENT_RENTAL_REPLY_SEQ;
DROP SEQUENCE ATTACHMENT_EVENT_SEQ;
DROP SEQUENCE ATTACHMENT_EQUIP_REG_SEQ;





-------------------------------------------------------
--@@
--■■■ 테이블 생성 ■■■--
--○ '작성_권한' 테이블
CREATE TABLE WRITE_GRADE
( WRITE_GRADE_ID    NUMBER
    , WRITE_GRADE_NAME  VARCHAR2(30)  CONSTRAINT  WG_WRITE_GRADE_NAME_NN  NOT NULL
    , CONSTRAINT WRITE_GRADE_ID_PK PRIMARY KEY(WRITE_GRADE_ID)
);

--○ '말머리' 테이블
CREATE TABLE POST_LABEL
( POST_LABEL_ID   NUMBER
    , BOARD_ID        NUMBER        CONSTRAINT  PL_BOARD_ID_NAME_NN  NOT NULL
    , POST_LABEL_NAME VARCHAR2(60)  CONSTRAINT  PL_POST_LABEL_NAME_NN  NOT NULL
    , CONSTRAINT POST_LABEL_ID_PK PRIMARY KEY(POST_LABEL_ID)
);

--○ '캠핑일지' 테이블
CREATE TABLE DIARY
( DIARY_ID      NUMBER
    , USER_CODE     NUMBER        CONSTRAINT  DIA_USER_CODE_NN  NOT NULL
    , DIARY_TITLE   VARCHAR(90)   CONSTRAINT  DIA_DIARY_TITLE_NN  NOT NULL
    , DIARY_CONTENT VARCHAR(3000)
    , CAMPING_DATE  DATE          CONSTRAINT  DIA_CAMPING_DATE_NN NOT NULL
    , LATITUDE      NUMBER(9,6)
    , LONGITUDE     NUMBER(9,6)
    , DIARY_WEATHER VARCHAR2(60)
    , CREATED_DATE  DATE          CONSTRAINT  DIA_CREATED_DATE_NN  NOT NULL
    , CONSTRAINT DIARY_ID_PK PRIMARY KEY(DIARY_ID)
);

--○ '인기글_지정_로그' 테이블
CREATE TABLE HOT_POST_LOG
( HOT_POST_LOG_ID   NUMBER
    , POST_ID           NUMBER  CONSTRAINT HPL_POST_ID_NN NOT NULL
    , CREATED_DATE      DATE    CONSTRAINT HPL_CREATED_DATE_NN NOT NULL
    , CONSTRAINT HOT_POST_LOG_ID_PK PRIMARY KEY(HOT_POST_LOG_ID)
);

--○ '추천' 테이블
CREATE TABLE RECOMMEND
( RECOMMEND_ID  NUMBER
    , USER_CODE     NUMBER  CONSTRAINT REC_USER_CODE_NN NOT NULL
    , POST_ID       NUMBER  CONSTRAINT REC_POST_ID_NN NOT NULL
    , CREATED_DATE  DATE    CONSTRAINT REC_CREATED_DATE_NN NOT NULL
    , CONSTRAINT RECOMMEND_ID_PK PRIMARY KEY(RECOMMEND_ID)
);

--○ '댓글' 테이블
CREATE TABLE REPLY
( REPLY_ID      NUMBER
    , ROOT_REPLY_ID NUMBER
    , USER_CODE     NUMBER  CONSTRAINT REP_USER_CODE_NN NOT NULL
    , POST_ID       NUMBER  CONSTRAINT REP_POST_ID_NN NOT NULL
    , REPLY_CONTENT VARCHAR2(600)
    , CREATED_DATE  DATE    CONSTRAINT REP_CREATED_DATE_NN NOT NULL
    , CONSTRAINT REPLY_ID_PK PRIMARY KEY(REPLY_ID)
);


--○ '북마크' 테이블
CREATE TABLE BOOKMARK
( BOOKMARK_ID   NUMBER
    , USER_CODE     NUMBER  CONSTRAINT BOO_USER_CODE_NN NOT NULL
    , POST_ID       NUMBER  CONSTRAINT BOO_POST_ID_NN NOT NULL
    , CREATED_DATE  DATE    CONSTRAINT BOO_CREATED_DATE_NN NOT NULL
    , CONSTRAINT BOOKMARK_ID_PK PRIMARY KEY(BOOKMARK_ID)
);

--○ '이벤트' 테이블
CREATE TABLE EVENT
( EVENT_ID          NUMBER
    , ADMIN_ID          VARCHAR2(20)    CONSTRAINT EVE_EVENT_ID_NN NOT NULL
    , BOARD_ID          NUMBER          CONSTRAINT EVE_BOARD_ID_NN NOT NULL
    , EVENT_TITLE       VARCHAR2(90)    CONSTRAINT EVE_EVENT_TITLE_NN NOT NULL
    , EVENT_CONTENT     VARCHAR2(3000)
    , EVENT_START_DATE  DATE            CONSTRAINT EVE_EVENT_START_DATE_NN NOT NULL
    , EVENT_END_DATE    DATE            CONSTRAINT EVE_EVENT_END_DATE_NN NOT NULL
    , CREATED_DATE      DATE            CONSTRAINT EVE_CREATED_DATE_NN NOT NULL
    , CONSTRAINT EVENT_ID_PK PRIMARY KEY(EVENT_ID)
);

--○ '이벤트_응모' 테이블
CREATE TABLE EVENT_ENTRY
( EVENT_ENTRY_ID    NUMBER
    , EVENT_ID          NUMBER  CONSTRAINT EE_EVENT_ID_NN NOT NULL
    , USER_CODE         NUMBER  CONSTRAINT EE_USER_CODE_NN NOT NULL
    , EVENT_ENTRY_POINT NUMBER
    , CREATED_DATE      DATE    CONSTRAINT EE_CREATED_DATE_NN NOT NULL
    , CONSTRAINT EVENT_ENTRY_ID_PK PRIMARY KEY(EVENT_ENTRY_ID)
);

--○ '이벤트_당첨' 테이블
CREATE TABLE EVENT_WIN
( EVENT_WIN_ID    NUMBER
    , EVENT_ENTRY_ID  NUMBER  CONSTRAINT EW_EVENT_ENTRY_ID_NN NOT NULL
    , CONSTRAINT EVENT_WIN_ID_PK PRIMARY KEY(EVENT_WIN_ID)
);

--○ '알림_유형' 테이블
CREATE TABLE NOTI_TYPE
( NOTI_TYPE_ID    NUMBER
    , NOTI_TYPE_NAME  VARCHAR2(100)  CONSTRAINT NT_NOTI_TYPE_NAME_NN NOT NULL
    , NOTI_CONTENT    VARCHAR(300)   CONSTRAINT NT_NOTI_CONTENT_NN NOT NULL
    , CONSTRAINT NOTI_TYPE_ID_PK PRIMARY KEY(NOTI_TYPE_ID)
);

--○ '알림' 테이블
CREATE TABLE NOTI
( NOTI_ID       NUMBER
    , USER_CODE     NUMBER  CONSTRAINT NOT_USER_CODE_NN NOT NULL
    , NOTI_TYPE_ID  NUMBER  CONSTRAINT NOT_NOTI_TYPE_ID_NN NOT NULL
    , CREATED_DATE  DATE    CONSTRAINT NOT_CREATED_DATE_NN NOT NULL
    , CONSTRAINT NOTI_ID_PK PRIMARY KEY(NOTI_ID)
);

--○ '알림_확인_로그' 테이블
CREATE TABLE NOTI_CHECK_LOG
( NOTI_CHECK_LOG_ID NUMBER
    , NOTI_ID           NUMBER  CONSTRAINT NCL_NOTI_ID_NN NOT NULL
    , CHECKED_DATE      DATE    CONSTRAINT NCL_CHECKED_DATE_NN NOT NULL
    , CONSTRAINT NOTI_CHECK_LOG_ID_PK PRIMARY KEY(NOTI_CHECK_LOG_ID)
);

--○ '통계항목' 테이블
CREATE TABLE STAT_TYPE
( STAT_TYPE_ID    NUMBER
    , STAT_TYPE_NAME   VARCHAR2(90) CONSTRAINT ST_STAT_TYPE_NAME_NN NOT NULL
    , CONSTRAINT STAT_TYPE_ID_PK PRIMARY KEY(STAT_TYPE_ID)
);

--○ '통계기간' 테이블
CREATE TABLE STAT_PERIOD
( STAT_PERIOD_ID    NUMBER
    , STAT_PERIOD_NAME  VARCHAR2(30) CONSTRAINT SP_STAT_PERIOD_NAME_NN NOT NULL
    , CONSTRAINT STAT_PERIOD_ID_PK PRIMARY KEY(STAT_PERIOD_ID)
);

--○ '통계' 테이블
CREATE TABLE STATISTICS
( STATISTICS_ID   NUMBER
    , ADMIN_ID        VARCHAR2(20) CONSTRAINT STA_ADMIN_ID_NN NOT NULL
    , STAT_TYPE_ID    NUMBER       CONSTRAINT STA_STAT_TYPE_ID_NN NOT NULL
    , STAT_PERIOD_ID  NUMBER       CONSTRAINT STA_STAT_PERIOD_ID_NN NOT NULL
    , STAT_RESULT     VARCHAR2(3000)
    , CREATED_DATE    DATE         CONSTRAINT STA_CREATED_DATE_NN NOT NULL
    , CONSTRAINT STATISTICS_ID_PK PRIMARY KEY(STATISTICS_ID)
);

--○ '게시판_카테고리' 테이블
CREATE TABLE BOARD_CATEGORY
( BOARD_CATE_ID     NUMBER
    , BOARD_CATE_NAME   VARCHAR2(30)    CONSTRAINT BOARD_CATE_NAME_NN NOT NULL
    , CONSTRAINT BOARD_CATE_ID_PK PRIMARY KEY(BOARD_CATE_ID)
);

--○ '게시판' 테이블
CREATE TABLE BOARD
( BOARD_ID        NUMBER
    , BOARD_CATE_ID   NUMBER        CONSTRAINT BOA_BOARD_CATE_ID_NN NOT NULL
    , WRITE_GRADE_ID  NUMBER        CONSTRAINT BOA_WRITE_GRADE_ID_NN NOT NULL
    , BOARD_NAME      VARCHAR2(60)  CONSTRAINT BOA_BOARD_NAME_ID_NN NOT NULL
    , BOARD_DESC      VARCHAR2(90)
    , CONSTRAINT BOARD_ID_PK PRIMARY KEY(BOARD_ID)
);

--○ '게시물' 테이블
CREATE TABLE POST
( POST_ID       NUMBER
    , USER_CODE     NUMBER          CONSTRAINT POS_USER_CODE_NN NOT NULL
    , BOARD_ID      NUMBER          CONSTRAINT POS_BOARD_ID_NN NOT NULL
    , POST_LABEL_ID NUMBER
    , POST_TITLE    VARCHAR2(90)    CONSTRAINT POS_POST_TITLE_NN NOT NULL
    , POST_CONTENT  VARCHAR2(3000)
    , CREATED_DATE  DATE            CONSTRAINT POS_CREATED_DATE_NN NOT NULL
    , CONSTRAINT POST_ID_PK PRIMARY KEY(POST_ID)
);

--○ '게시물_조회_로그' 테이블
CREATE TABLE POST_VIEW_LOG
( POST_VIEW_LOG_ID  NUMBER
    , USER_CODE         NUMBER  CONSTRAINT PVL_USER_CODE_NN NOT NULL
    , POST_ID           NUMBER  CONSTRAINT PVL_POST_ID_NN NOT NULL
    , CREATED_DATE      DATE    CONSTRAINT PVL_CREATED_DATE_NN NOT NULL
    , CONSTRAINT POST_VIEW_LOG_ID_PK PRIMARY KEY(POST_VIEW_LOG_ID)
);

--○ '신고_유형' 테이블
CREATE TABLE REPORT_TYPE
( REPORT_TYPE_ID  NUMBER
    , REPORT_TYPE_NAME  VARCHAR2(60) CONSTRAINT RT_REPORT_TYPE_NAME_NN NOT NULL
    , CONSTRAINT REPORT_TYPE_ID_PK PRIMARY KEY(REPORT_TYPE_ID)
);

--○ '신고_처리_유형' 테이블
CREATE TABLE REPORT_ACTION_TYPE
( REPORT_ACTION_TYPE_ID   NUMBER
    , REPORT_ACTION_TYPE_NAME VARCHAR2(20) CONSTRAINT RAT_REPORT_ACTION_TYPE_NAME_NN NOT NULL
    , CONSTRAINT REPORT_ACTION_TYPE_ID_PK PRIMARY KEY(REPORT_ACTION_TYPE_ID)
);

--○ '게시글_신고_접수' 테이블
CREATE TABLE POST_REPORT
( POST_REPORT_ID    NUMBER
    , POST_ID           NUMBER  CONSTRAINT PR_POST_ID_NN NOT NULL
    , REPORTER_ID       NUMBER  CONSTRAINT PR_REPORTER_ID_NN NOT NULL
    , REPORT_TYPE_ID    NUMBER  CONSTRAINT PR_REPORT_TYPE_ID_NN NOT NULL
    , REPORT_CONTENT    VARCHAR2(600)
    , REPORTED_DATE     DATE    CONSTRAINT PR_REPORTED_DATE_NN NOT NULL
    , CONSTRAINT POST_REPORT_ID_PK PRIMARY KEY(POST_REPORT_ID)
);

--○ '게시글_신고_처리' 테이블
CREATE TABLE POST_REPORT_ACTION
( POST_REPORT_ACTION_ID NUMBER
    , POST_REPORT_ID        NUMBER          CONSTRAINT PRA_POST_REPORT_ID_NN NOT NULL
    , ADMIN_ID              VARCHAR2(20)    CONSTRAINT PRA_ADMIN_ID_NN NOT NULL
    , REPORT_ACTION_TYPE_ID NUMBER          CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
    , COMPLETED_DATE        DATE            CONSTRAINT PRA_COMPLETED_DATE_NN NOT NULL
    , CONSTRAINT POST_REPORT_ACTION_ID_PK PRIMARY KEY(POST_REPORT_ACTION_ID)
);

--○ '댓글_신고_접수' 테이블
CREATE TABLE REPLY_REPORT
( REPLY_REPORT_ID   NUMBER
    , REPLY_ID          NUMBER  CONSTRAINT RR_REPLY_ID_NN NOT NULL
    , REPORTER_ID       NUMBER  CONSTRAINT RR_REPORTER_ID_NN NOT NULL
    , REPORT_TYPE_ID    NUMBER  CONSTRAINT RR_REPORT_TYPE_ID_NN NOT NULL
    , REPORT_CONTENT    VARCHAR2(600)
    , REPORTED_DATE     DATE    CONSTRAINT RR_REPORTED_DATE_NN NOT NULL
    , CONSTRAINT REPLY_REPORT_ID_PK PRIMARY KEY(REPLY_REPORT_ID)
);

--○ '댓글_신고_처리' 테이블
CREATE TABLE REPLY_REPORT_ACTION
( REPLY_REPORT_ACTION_ID  NUMBER
    , REPLY_REPORT_ID         NUMBER        CONSTRAINT RRA_REPLY_REPORT_ID_NN NOT NULL
    , ADMIN_ID                VARCHAR2(20)  CONSTRAINT RRA_ADMIN_ID_NN NOT NULL
    , REPORT_ACTION_TYPE_ID   NUMBER        CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
    , COMPLETED_DATE          DATE          CONSTRAINT RRA_COMPLETED_DATE_NN NOT NULL
    , CONSTRAINT REPLY_REPORT_ACTION_ID_PK PRIMARY KEY(REPLY_REPORT_ACTION_ID)
);

--○ '렌탈_댓글_신고_접수' 테이블
CREATE TABLE RENTAL_REPLY_REPORT
( RENTAL_REPLY_REPORT_ID    NUMBER
    , RENTAL_REPLY_ID           NUMBER  CONSTRAINT RRR_RENTAL_REPLY_ID_NN NOT NULL
    , REPORTER_ID               NUMBER  CONSTRAINT RRR_REPORTER_ID_NN NOT NULL
    , REPORT_TYPE_ID            NUMBER  CONSTRAINT RRR_REPORT_TYPE_ID_NN NOT NULL
    , REPORT_CONTENT            VARCHAR2(600)
    , REPORTED_DATE             DATE    CONSTRAINT RRR_REPORTED_DATE_NN NOT NULL
    , CONSTRAINT RENTAL_REPLY_REPORT_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ID)
);

--○ '렌탈_댓글_신고_처리' 테이블
CREATE TABLE RENTAL_REPLY_REPORT_ACTION
( RENTAL_REPLY_REPORT_ACTION_ID NUMBER
    , RENTAL_REPLY_REPORT_ID        NUMBER        CONSTRAINT RRRA_RENTAL_REPLY_R_ID_NN NOT NULL
    , ADMIN_ID                      VARCHAR2(20)  CONSTRAINT RRRA_ADMIN_ID_NN NOT NULL
    , REPORT_ACTION_TYPE_ID         NUMBER        CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
    , COMPLETED_DATE                DATE          CONSTRAINT RRRA_COMPLETED_DATE_NN NOT NULL
    , CONSTRAINT RENTAL_REPLY_R_ACTION_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ACTION_ID)
);

--○ '쿠폰_종류' 테이블
CREATE TABLE COUPON_TYPE
( COUPON_TYPE_ID    NUMBER
    , COUPON_TYPE_NAME  VARCHAR2(60) CONSTRAINT CT_COUPON_TYPE_NAME_NN NOT NULL
    , CONSTRAINT COUPON_TYPE_ID_PK PRIMARY KEY(COUPON_TYPE_ID)
);

--○ '발행_쿠폰' 테이블
CREATE TABLE ISSUED_COUPON
( ISSUED_COUPON_ID  NUMBER
    , ADMIN_ID          VARCHAR2(20)  CONSTRAINT IC_ADMIN_ID_NN NOT NULL
    , COUPON_TYPE_ID    NUMBER        CONSTRAINT IC_COUPON_TYPE_ID_NN NOT NULL
    , COUPON_NAME       VARCHAR2(60)  CONSTRAINT IC_COUPON_NAME_NN NOT NULL
    , COUPON_DISCOUNT   NUMBER(3,0)
    , COUPON_MONTH      NUMBER(2,0)   CONSTRAINT IC_COUPON_MONTH_NN NOT NULL
    , ISSUED_DATE       DATE          CONSTRAINT IC_ISSUED_DATE_NN NOT NULL
    , CONSTRAINT ISSUED_COUPON_ID_PK PRIMARY KEY(ISSUED_COUPON_ID)
);

--○ '보유_쿠폰' 테이블
CREATE TABLE OWNED_COUPON
( OWNED_COUPON_ID     NUMBER
    , USER_CODE           NUMBER   CONSTRAINT OC_USER_CODE_NN NOT NULL
    , ISSUED_COUPON_ID    NUMBER   CONSTRAINT OC_ISSUED_COUPON_ID_NN NOT NULL
    , COMPLETED_DATE      DATE
    , CONSTRAINT OWNED_COUPON_ID_PK PRIMARY KEY(OWNED_COUPON_ID)
);

--○ '포인트_변동_유형' 테이블
CREATE TABLE POINT_CHANGE_TYPE
( POINT_CHANGE_TYPE_ID      NUMBER
    , POINT_CHANGE_TYPE_NAME    VARCHAR2(60)   CONSTRAINT PCT_POINT_CHANGE_TYPE_NAME_NN NOT NULL
    , CONSTRAINT POINT_CHANGE_TYPE_ID_PK PRIMARY KEY(POINT_CHANGE_TYPE_ID)
);

--○ '포인트_변동_로그' 테이블
CREATE TABLE POINT_LOG
( POINT_LOG_ID          NUMBER
    , USER_CODE             NUMBER  CONSTRAINT PL_USER_CODE_NN NOT NULL
    , POINT_CHANGE_TYPE_ID  NUMBER  CONSTRAINT PL_POINT_CHANGE_TYPE_ID_NN NOT NULL
    , POINT_CHANGE          NUMBER
    , CREATED_DATE          DATE    CONSTRAINT PL_CREATED_DATE_NN NOT NULL
    , CONSTRAINT POINT_LOG_ID_PK PRIMARY KEY(POINT_LOG_ID)
);

--○ '가입유형' 테이블
CREATE TABLE SIGNUP_TYPE
( SIGNUP_TYPE_ID    NUMBER
    , SIGNUP_TYPE_NAME  VARCHAR2(30)    CONSTRAINT ST_SIGNUP_TYPE_NAME_NN NOT NULL
    , CONSTRAINT SIGNUP_TYPE_ID_PK PRIMARY KEY(SIGNUP_TYPE_ID)
);

--○ '회원_등급' 테이블
CREATE TABLE RANK
( RANK_ID               NUMBER
    , RANK_NAME             VARCHAR2(30)    CONSTRAINT RAN_RANK_NAME_NN NOT NULL
    , MIN_POINT             NUMBER(3,0)     CONSTRAINT RAN_MIN_POINT_NN NOT NULL
    , MAX_POINT             NUMBER(3,0)     CONSTRAINT RAN_MAX_POINT_NN NOT NULL
    , MIN_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MIN_CREDIT_NN NOT NULL
    , MAX_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MAX_CREDIT_NN NOT NULL
    , MAX_NICKNAME_CHANGE   NUMBER(1,0)     CONSTRAINT RAN_MAX_NICKNAME_CHANGE_NN NOT NULL
    , DISCOUNT_COUPON_QTY   NUMBER(1,0)     CONSTRAINT RAN_DISCOUNT_COUPON_QTY_NN NOT NULL
    , BOOST_QTY             NUMBER(1,0)     CONSTRAINT RAN_BOOT_QTY_NN NOT NULL
    , RANK_ATTACHMENT_PATH  VARCHAR2(300)
    , CONSTRAINT RANK_ID_PK PRIMARY KEY(RANK_ID)
);

--○ '끌어올리기_로그' 테이블
CREATE TABLE BOOST_LOG
( BOOST_LOG_ID      NUMBER
    , STOREN_ID         NUMBER
    , RENTAL_ID         NUMBER
    , BOOST_LOG_DATE    DATE    CONSTRAINT BL_BOOST_LOG_DATE_NN NOT NULL
    , CONSTRAINT BOOST_LOG_ID_PK PRIMARY KEY(BOOST_LOG_ID)
);

--○ '주소_로그' 테이블
CREATE TABLE ADDRESS_LOG
( ADDRESS_ID            NUMBER
    , USER_CODE             NUMBER          CONSTRAINT AL_USER_CODE_NN NOT NULL
    , ZIPCODE               VARCHAR2(10)    CONSTRAINT AL_ZIPCODE_NN NOT NULL
    , ADDRESS               VARCHAR2(200)   CONSTRAINT AL_ADDRESS_NN NOT NULL
    , LAST_UPDATED_DATE     DATE            CONSTRAINT AL_LAST_UPDATED_DATE_NN NOT NULL
    , CONSTRAINT ADDRESS_ID_PK PRIMARY KEY(ADDRESS_ID)
);

--○ '찜' 테이블
CREATE TABLE WISHLIST
( WISHLIST_ID       NUMBER
    , USER_CODE         NUMBER      CONSTRAINT WIS_USER_CODE_NN NOT NULL
    , STOREN_ID         NUMBER
    , RENTAL_ID         NUMBER
    , CREATED_DATE      DATE        CONSTRAINT WIS_CREATE_DATE_NN NOT NULL
    , CONSTRAINT WISHLIST_ID_PK PRIMARY KEY(WISHLIST_ID)
);

--○ '만족도_평가_로그' 테이블
CREATE TABLE SATISFACTION_LOG
( SATIS_LOG_ID              NUMBER
    , RENTAL_MATCHING_DONE_ID   NUMBER          CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_NN NOT NULL
    , REVIEWER_ID               NUMBER          CONSTRAINT SL_REVIEWER_ID_NN NOT NULL
    , REVIEWEE_ID               NUMBER          CONSTRAINT SL_REVIEWEE_ID_NN NOT NULL
    , SATIS_SCORE               NUMBER(1,0)     CONSTRAINT SL_SATIS_SCORE_NN NOT NULL
    , SATIS_COMMENT             VARCHAR2(500)
    , CREATED_DATE              DATE            CONSTRAINT SL_CREATED_DATE_NN NOT NULL
    , CONSTRAINT SATIS_LOG_ID_PK PRIMARY KEY(SATIS_LOG_ID)
);

--○ '닉네임_로그' 테이블
CREATE TABLE NICKNAME_LOG
( NICKNAME_LOG_ID       NUMBER
    , USER_CODE             NUMBER          CONSTRAINT NL_USER_CODE_NN NOT NULL
    , NICKNAME              VARCHAR2(30)    CONSTRAINT NL_NICKNAME_NN NOT NULL
    , LAST_UPDATED_DATE     DATE            CONSTRAINT NL_LAST_UPDATED_DATE NOT NULL
    , CONSTRAINT NICKNAME_LOG_ID_PK PRIMARY KEY(NICKNAME_LOG_ID)
);

--○ '회원_코드' 테이블
CREATE TABLE USER_CODE
( USER_CODE     NUMBER
    , EXIT_DATE     DATE
    , CONSTRAINT USER_CODE_PK PRIMARY KEY(USER_CODE)
);

--○ '회원_가입' 테이블
CREATE TABLE USERS
( USER_ID           VARCHAR2(20)
    , USER_CODE         NUMBER          CONSTRAINT USE_USER_CODE_NN NOT NULL
    , SIGNUP_TYPE_ID   NUMBER          CONSTRAINT USE_SIGNUP_TYPE_ID_NN NOT NULL
    , USER_PW          VARCHAR2(128)   CONSTRAINT USE_USER_PW_NN NOT NULL
    , USER_NAME          VARCHAR2(30)   CONSTRAINT USE_USER_NAME_NN NOT NULL
    , USER_TEL          VARCHAR2(30)   CONSTRAINT USE_USER_TEL_NN NOT NULL
    , USER_EMAIL      VARCHAR2(40)
    , EMAIL_CONSENT      NUMBER(1,0)
    , CREATED_DATE      DATE          CONSTRAINT USE_CREATED_DATE NOT NULL
    , CONSTRAINT USER_ID_PK PRIMARY KEY(USER_ID)
);

--○ 관리자 등록 테이블
CREATE TABLE ADMINS
( ADMIN_ID              VARCHAR2(20)
    , USER_CODE             NUMBER          CONSTRAINT ADM_USER_CODE_NN NOT NULL
    , ADMIN_PW              VARCHAR2(128)   CONSTRAINT ADM_ADMIN_PW_NN  NOT NULL
    , ADMIN_TEL             VARCHAR2(30)    CONSTRAINT ADM_ADMIN_TEL_NN NOT NULL
    , RANK_ATTACHMENT_PATH  VARCHAR2(300)
    , CREATED_DATE          DATE            CONSTRAINT ADM_CREATED_DATE NOT NULL
    , CONSTRAINT ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);

--○ '활동정지_회원' 테이블
CREATE TABLE SUSPENDED_USER
( SUSPENDED_USER_ID     NUMBER
    , USER_CODE             NUMBER          CONSTRAINT SU_USER_CODE_NN NOT NULL
    , ADMIN_ID              VARCHAR2(20)    CONSTRAINT SU_ADMIN_ID_NN NOT NULL
    , SUSPENDED_START_DATE  DATE            CONSTRAINT SU_SUSPENDED_START_DATE_NN NOT NULL
    , CONSTRAINT SUSPENDED_USER_ID_PK PRIMARY KEY(SUSPENDED_USER_ID)
);

--○ '첨부파일_게시물' 테이블
CREATE TABLE ATTACHMENT_POST
( ATTACHMENT_POST_ID    NUMBER
    , POST_ID               NUMBER          CONSTRAINT AP_POST_ID_NN NOT NULL
    , ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AP_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AP_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE       NUMBER          CONSTRAINT AP_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AP_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE          DATE            CONSTRAINT AP_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_POST_ID_PK PRIMARY KEY(ATTACHMENT_POST_ID)
);

--○ '첨부파일_댓글' 테이블
CREATE TABLE ATTACHMENT_REPLY
( ATTACHMENT_REPLY_ID   NUMBER
    , REPLY_ID              NUMBER          CONSTRAINT AR_REPLY_ID_NN NOT NULL
    , ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AR_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AR_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE       NUMBER          CONSTRAINT AR_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AR_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE          DATE            CONSTRAINT AR_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_REPLY_ID)
);

--○ '첨부파일_캠핑일지' 테이블
CREATE TABLE ATTACHMENT_CAMPING_DIARY
( ATTACHMENT_CAMPING_DIARY_ID   NUMBER
    , DIARY_ID                      NUMBER          CONSTRAINT ACD_DIARY_ID_NN NOT NULL
    , ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ACD_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ACD_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE               NUMBER          CONSTRAINT ACD_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ACD_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE                  DATE            CONSTRAINT ACD_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_CAMPING_DIARY_ID_PK PRIMARY KEY(ATTACHMENT_CAMPING_DIARY_ID)
);

--○ '첨부파일_렌탈_댓글' 테이블
CREATE TABLE ATTACHMENT_RENTAL_REPLY
( ATTACHMENT_RENTAL_REPLY_ID    NUMBER
    , RENTAL_REPLY_ID               NUMBER          CONSTRAINT ARR_RENTAL_REPLY_ID_NN NOT NULL
    , ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ARR_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ARR_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE               NUMBER          CONSTRAINT ARR_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ARR_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE                  DATE            CONSTRAINT ARR_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_RENTAL_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_RENTAL_REPLY_ID)
);

--○ '첨부파일_이벤트' 테이블
CREATE TABLE ATTACHMENT_EVENT
( ATTACHMENT_EVENT_ID           NUMBER
    , EVENT_ID                      NUMBER          CONSTRAINT AE_EVENT_ID_NN NOT NULL
    , ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT AE_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT AE_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE               NUMBER          CONSTRAINT AE_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT AE_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE                  DATE            CONSTRAINT AE_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_EVENT_ID_PK PRIMARY KEY(ATTACHMENT_EVENT_ID)
);

--○ '첨부파일_장비_등록' 테이블
CREATE TABLE ATTACHMENT_EQUIP_REG
( ATTACHMENT_EQUIP_REG_ID               NUMBER
    , EQUIP_CODE                            NUMBER          CONSTRAINT AER_EQUIP_CODE_NN NOT NULL
    , ATTACHMENT_NAME                       VARCHAR2(100)   CONSTRAINT AER_ATTACHMENT_NAME_NN NOT NULL
    , ATTACHMENT_PATH                       VARCHAR2(300)   CONSTRAINT AER_ATTACHMENT_PATH_NN NOT NULL
    , ATTACHMENT_SIZE                       NUMBER          CONSTRAINT AER_ATTACHMENT_SIZE_NN NOT NULL
    , ATTACHMENT_ORDER                      NUMBER(2,0)     CONSTRAINT AER_ATTACHMENT_ORDER_NN NOT NULL
    , CREATED_DATE                          DATE            CONSTRAINT AER_CREATED_DATE_NN NOT NULL
    , CONSTRAINT ATTACHMENT_EQUIP_REG_ID_PK PRIMARY KEY(ATTACHMENT_EQUIP_REG_ID)
);

--○ '장비_코드' 테이블
CREATE TABLE EQUIP_CODE
( EQUIP_CODE    NUMBER  CONSTRAINT EC_EQUIP_CODE_NN NOT NULL
    , OWN_END_DATE  DATE
    , CONSTRAINT EQUIP_CODE_PK PRIMARY KEY(EQUIP_CODE)
);

--○ '장비등록' 테이블
CREATE TABLE EQUIPMENT_REGISTRATION
( EQUIP_ID          NUMBER
    , EQUIP_CODE        NUMBER          CONSTRAINT ER_EQUIP_CODE_NN NOT NULL
    , USER_CODE         NUMBER          CONSTRAINT ER_USER_CODE_NN NOT NULL
    , CATEGORY_ID       NUMBER          CONSTRAINT ER_CATEGORY_ID_NN NOT NULL
    , EQUIP_NAME_ID     NUMBER          CONSTRAINT ER_EQUIP_NAME_ID_NN NOT NULL
    , ORIGINAL_PRICE    NUMBER(9,0)     CONSTRAINT ER_ORIGINAL_PRICE_NN NOT NULL
    , CREATED_DATE      DATE            CONSTRAINT ER_CREATED_DATE_NN NOT NULL
    , CONSTRAINT EQUIP_ID_PK PRIMARY KEY(EQUIP_ID)
);

--○ '장비명' 테이블
CREATE TABLE EQUIP_NAME
( EQUIP_NAME_ID     NUMBER
    , BRAND_ID          NUMBER          CONSTRAINT EN_BRAND_ID_NN NOT NULL
    , EQUIP_NAME        VARCHAR2(90)    CONSTRAINT EN_EQUIP_NAME_NN NOT NULL
    , CONSTRAINT EQUIP_NAME_ID_PK PRIMARY KEY(EQUIP_NAME_ID)
);

--○ '스토렌_장비등록' 테이블
CREATE TABLE STOREN
( STOREN_ID         NUMBER
    , EQUIP_CODE        NUMBER          CONSTRAINT STOREN_EQUIP_CODE_NN NOT NULL
    , SIZE_ID           NUMBER          CONSTRAINT STOREN_SIZE_ID_NN NOT NULL
    , STORE_MONTH       NUMBER(2,0)     CONSTRAINT STOREN_STORE_MONTH_NN NOT NULL
    , STOREN_TITLE      VARCHAR2(90)
    , STOREN_CONTENT    VARCHAR2(1000)
    , DAILY_RENT_PRICE  NUMBER(8,0)
    , CREATED_DATE      DATE            CONSTRAINT STOREN_CREATED_DATE_NN NOT NULL
    , CONSTRAINT STOREN_ID_PK PRIMARY KEY(STOREN_ID)
);

--○ '보관_장비등록' 테이블
CREATE TABLE STORAGE
( STORAGE_ID        NUMBER
    , EQUIP_CODE        NUMBER          CONSTRAINT STORAGE_EQUIP_CODE_NN NOT NULL
    , SIZE_ID           NUMBER          CONSTRAINT STORAGE_SIZE_ID_NN NOT NULL
    , STORAGE_MONTH     NUMBER(2,0)     CONSTRAINT STORAGE_STORAGE_MONTH_NN NOT NULL
    , CREATED_DATE      DATE            CONSTRAINT STORAGE_CREATED_DATE_NN NOT NULL
    , CONSTRAINT STORAGE_ID_PK PRIMARY KEY(STORAGE_ID)
);

--○ '렌탈_장비등록' 테이블
CREATE TABLE RENTAL
( RENTAL_ID             NUMBER
    , EQUIP_CODE            NUMBER          CONSTRAINT REN_EQUIP_CODE_NN NOT NULL
    , RENTAL_TITLE          VARCHAR2(90)    CONSTRAINT REN_RENTAL_TITLE_NN NOT NULL
    , RENT_CONTENT          VARCHAR2(1000)  CONSTRAINT REN_RENT_CONTENT_NN NOT NULL
    , RENT_START_WANT_DATE  DATE            CONSTRAINT REN_RENT_START_WANT_DATE_NN NOT NULL
    , RENT_END_WANT_DATE    DATE            CONSTRAINT REN_RENT_END_WANT_DATE_NN NOT NULL
    , DAILY_RENT_PRICE      NUMBER(8,0)
    , CREATED_DATE          DATE            CONSTRAINT REN_CREATED_DATE_NN NOT NULL
    , CONSTRAINT RENTAL_ID_PK PRIMARY KEY(RENTAL_ID)
);

--○ '카테고리' 테이블
CREATE TABLE CATEGORY
( CATEGORY_ID           NUMBER
    , PARENT_CATEGORY_ID    NUMBER
    , CATEGORY_NAME         VARCHAR2(30)    CONSTRAINT CAT_CATEGORY_NAME_NN NOT NULL
    , CONSTRAINT CATEGORY_ID_PK PRIMARY KEY(CATEGORY_ID)
);

--○ '브랜드' 테이블
CREATE TABLE BRAND
( BRAND_ID      NUMBER
    , BRAND_NAME    VARCHAR2(60)    CONSTRAINT BRA_BRAND_NAME_NN NOT NULL
    , CONSTRAINT BRAND_ID_PK PRIMARY KEY(BRAND_ID)
);

--○ '사이즈' 테이블
CREATE TABLE EQUIP_SIZE
( EQUIP_SIZE_ID    NUMBER
    , EQUIP_SIZE_NAME   VARCHAR2(10)    CONSTRAINT ES_EQUIP_SIZE_NAME_NN NOT NULL
    , REQUIRED_SPACE    NUMBER(2,0)     CONSTRAINT ES_REQUIRED_SPACE_NN NOT NULL
    , DAILY_STORAGE_FEE NUMBER(6,0)     CONSTRAINT ES_DAILY_STORAGE_FEE_NN NOT NULL
    , CONSTRAINT EQUIP_SIZE_ID_PK PRIMARY KEY(EQUIP_SIZE_ID)
);

--○ '렌탈_매칭_신청' 테이블
CREATE TABLE RENTAL_MATCHING_REQ
(
    RENTAL_MATCHING_REQ_ID          NUMBER
    ,   RENTAL_START_DATE               DATE        CONSTRAINT RMR_RENTAL_START_DATE_NN NOT NULL
    ,   RENTAL_END_DATE                 DATE        CONSTRAINT RMR_RENTAL_END_DATE_NN NOT NULL
    ,   REQUESTED_DATE                  DATE        CONSTRAINT RMR_REQUESTED_DATE_NN NOT NULL
    ,   RENTAL_ID                       NUMBER      CONSTRAINT RMR_RENTAL_ID_NN NOT NULL
    ,   RENTAL_MATCHING_REQUESTER_ID    NUMBER      CONSTRAINT RMR_RENTAL_M_R_ID_NN NOT NULL
    ,   CONSTRAINT RENTAL_MATCHING_REQ_ID_PK PRIMARY KEY(RENTAL_MATCHING_REQ_ID)
);

--○ '렌탈_매칭_완료' 테이블
CREATE TABLE RENTAL_MATCHING_DONE
(
    RENTAL_MATCHING_DONE_ID     NUMBER
    ,   APPROVED_DATE               DATE        CONSTRAINT RMD_APPROVED_DATE_NN NOT NULL
    ,   RENTAL_MATCHING_REQ_ID      NUMBER      CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_NN  NOT NULL
    ,   CONSTRAINT RENTAL_MATCHING_DONE_ID_PK PRIMARY KEY(RENTAL_MATCHING_DONE_ID)
);

--○ '렌탈_댓글' 테이블
CREATE TABLE RENTAL_REPLY
(
    RENTAL_REPLY_ID            NUMBER
    ,   RENTAL_REPLY_CONTENT       VARCHAR2(600)
    ,   CREATED_DATE               DATE             CONSTRAINT RRY_CREATED_DATE_NN NOT NULL
    ,   RENTAL_ROOT_REPLY_ID       NUMBER
    ,   RENTAL_ID                  NUMBER           CONSTRAINT RRY_RENTAL_ID_NN NOT NULL
    ,   USER_CODE                  NUMBER           CONSTRAINT RRY_USER_CODE_NN NOT NULL
    ,   CONSTRAINT RENTAL_REPLY_ID_PK PRIMARY KEY(RENTAL_REPLY_ID)
);

--○ '결제_방법' 테이블
CREATE TABLE PAY_METHOD
( PAY_METHOD_ID     NUMBER
    , PAY_METHOD_NAME   VARCHAR2(30)    CONSTRAINT PAY_PAY_METHOD_NAME_NN NOT NULL
    , CONSTRAINT PAY_METHOD_ID_PK PRIMARY KEY (PAY_METHOD_ID)
);

--○ '결제' 테이블
CREATE TABLE PAY
(
    PAY_ID                      NUMBER
    ,   PAY_METHOD_ID               NUMBER  CONSTRAINT PAY_PAY_METHOD_ID_NN NOT NULL
    ,   PAY_AMOUNT                  NUMBER  CONSTRAINT PAY_PAY_AMOUNT_NN NOT NULL
    ,   PAY_DATE                    DATE    CONSTRAINT PAY_PAY_DATE_NN NOT NULL
    ,   RENTAL_MATCHING_DONE_ID     NUMBER
    ,   STORAGE_ID                  NUMBER
    ,   STOREN_ID                   NUMBER
    ,   STOREN_MATCHING_DONE_ID     NUMBER
    ,   CONSTRAINT PAY_ID_PK PRIMARY KEY (PAY_ID)
);

--○ '결제_취소' 테이블
CREATE TABLE PAY_CANCEL
(
    PAY_CANCEL_ID           NUMBER
    ,   CANCEL_DATE             DATE        CONSTRAINT PC_CANCEL_DATE_NN NOT NULL
    ,   PAY_ID                  NUMBER      CONSTRAINT PC_PAY_ID_NN NOT NULL
    ,   PAY_CANCEL_REASON_ID    NUMBER      CONSTRAINT PC_PAY_CANCEL_REASON_ID_NN   NOT NULL
    ,   CONSTRAINT PAY_CANCEL_ID_PK PRIMARY KEY (PAY_CANCEL_ID)
);

--○ '결제_취소사유' 테이블
CREATE TABLE PAY_CANCEL_REASON
(
    PAY_CANCEL_REASON_ID        NUMBER
    ,   PAY_CANCEL_REASON_NAME      VARCHAR2(60)    CONSTRAINT PCR_PAY_CANCEL_REASON_NAME_NN NOT NULL
    ,   CONSTRAINT PAY_CANCEL_REASON_ID_PK  PRIMARY KEY (PAY_CANCEL_REASON_ID)
);

--○ '플랫폼_배송' 테이블
CREATE TABLE PLATFORM_DELIVERY
(
    PLATFORM_DELIVERY_ID        NUMBER
    ,   PAY_ID                      NUMBER  CONSTRAINT PD_PAY_ID_NN NOT NULL
    ,   DELIVERY_START_DATE         DATE    CONSTRAINT PD_DELIVERY_START_DATE_NN NOT NULL
    ,   DELIVERY_END_DATE           DATE
    ,   CONSTRAINT PLATFORM_DELIVERY_ID_PK  PRIMARY KEY (PLATFORM_DELIVERY_ID)
);

--○ '플랫폼_배송_반환' 테이블
CREATE TABLE PLATFORM_DELIVERY_RETURN
(
    PLATFORM_DELIVERY_RETURN_ID     NUMBER
    ,   DELIVERY_START_DATE             DATE        CONSTRAINT PDR_DELIVERY_START_DATE_NN NOT NULL
    ,   DELIVERY_END_DATE               DATE
    ,   PLATFORM_DELIVERY_ID            NUMBER      CONSTRAINT PDR_PLATFORM_DELIVERY_ID_NN  NOT NULL
    ,   CONSTRAINT PLATFORM_DELIVERY_RETURN_ID_PK PRIMARY KEY (PLATFORM_DELIVERY_RETURN_ID)
);

--○ '거래자_택배' 테이블
CREATE TABLE USERS_DELIVERY
(
    USERS_DELIVERY_ID       NUMBER
    ,   PAY_ID                  NUMBER          CONSTRAINT UD_PAY_ID_NN NOT NULL
    ,   CARRIER_NAME            VARCHAR2(60)    CONSTRAINT UD_CARRIER_NAME_NN NOT NULL
    ,   WAYBILL_NUMBER          VARCHAR2(20)
    ,   WAYBILL_ENTRY_DATE      DATE            CONSTRAINT UD_WAYBILL_ENTRY_DATE_NN NOT NULL
    ,   DELIVERY_END_DATE       DATE
    ,   CONSTRAINT USERS_DELIVERY_ID_PK PRIMARY KEY (USERS_DELIVERY_ID)
);

--○ '거래자_택배_반환' 테이블
CREATE TABLE USERS_DELIVERY_RETURN
(
    USERS_DELIVERY_RETURN_ID        NUMBER
    ,   USERS_DELIVERY_ID               NUMBER          CONSTRAINT UDR_USERS_DELIVERY_ID_NN NOT NULL
    ,   CARRIER_NAME                    VARCHAR2(60)    CONSTRAINT UDR_CARRIER_NAME_NN NOT NULL
    ,   WAYBILL_NUMBER                  VARCHAR2(20)
    ,   WAYBILL_ENTRY_DATE              DATE            CONSTRAINT UDR_WAYBILL_ENTRY_DATE_NN NOT NULL
    ,   DELIVERY_END_DATE               DATE
    ,   CONSTRAINT USERS_DELIVERY_RETURN_ID_PK PRIMARY KEY (USERS_DELIVERY_RETURN_ID)
);

--○ '보관_최종_반환' 테이블
CREATE TABLE STORAGE_LAST_RETURN
(
    STORAGE_LAST_RETURN_ID      NUMBER
    ,   STORAGE_ID                  NUMBER      CONSTRAINT SELR_STORAGE_ID_NN NOT NULL
    ,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SELR_INSPEC_R_ACTION_ID_NN NOT NULL
    ,   DELIVERY_START_DATE         DATE        CONSTRAINT SELR_DELI_START_DATE_NN   NOT NULL
    ,   DELIVERY_END_DATE           DATE
    ,   CONSTRAINT STORAGE_LAST_RETURN_ID_PK    PRIMARY KEY (STORAGE_LAST_RETURN_ID)
);

--○ '스토렌_최종_반환' 테이블 생성
CREATE TABLE STOREN_LAST_RETURN
(
    STOREN_LAST_RETURN_ID       NUMBER
    ,   STOREN_ID                   NUMBER      CONSTRAINT SNLR_STOREN_ID_NN   NOT NULL
    ,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SNLR_INSPEC_R_ACTION_ID_NN   NOT NULL
    ,   DELIVERY_START_DATE         DATE        CONSTRAINT SNLR_DELI_START_DATE_NN   NOT NULL
    ,   DELIVERY_END_DATE           DATE
    ,   CONSTRAINT STOREN_LAST_RETURN_ID_PK    PRIMARY KEY (STOREN_LAST_RETURN_ID)
);

--○ '검수_리스트' 테이블
CREATE TABLE INSPEC_LIST
(
    INSPEC_LIST_ID                  NUMBER
    ,   INSPEC_COMMENT                  VARCHAR2(300)
    ,   CATE_INSPEC_ID                  NUMBER
    ,   PLATFORM_DELIVERY_ID            NUMBER
    ,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
    ,   ADMIN_ID                        VARCHAR2(20)    CONSTRAINT IL_ADMIN_ID_NN   NOT NULL
    ,   INSPEC_GRADE_ID                 NUMBER          CONSTRAINT IL_INSPEC_GRADE_ID_NN    NOT NULL
    ,   INSPECTION_DATE                 DATE            CONSTRAINT IL_INSPECTION_DATE_NN   NOT NULL
    ,   CONSTRAINT INSPEC_LIST_ID_PK    PRIMARY KEY (INSPEC_LIST_ID)
);

--○ '카테_검수항목' 테이블
CREATE TABLE CATE_INSPEC
(
    CATE_INSPEC_ID      NUMBER
    ,   CATEGORY_ID         NUMBER      CONSTRAINT CI_CATEGORY_ID_NN    NOT NULL
    ,   INSPEC_ITEM_ID      NUMBER      CONSTRAINT CI_INSPEC_ITEM_ID_NN NOT NULL
    ,   CONSTRAINT CATE_INSPEC_ID_PK    PRIMARY KEY (CATE_INSPEC_ID)
);

--○ '검수항목' 테이블 생성
CREATE TABLE INSPEC_ITEM
(
    INSPEC_ITEM_ID          NUMBER
    ,   INSPEC_ITEM_NAME        VARCHAR2(60)    CONSTRAINT II_INSPEC_ITEM_NAME_NN   NOT NULL
    ,   INSPEC_ITEM_DESC_HIGH   VARCHAR2(300)   CONSTRAINT II_INSPEC_ITEM_DESC_HIGH_NN   NOT NULL
    ,   INSPEC_ITEM_DESC_MID    VARCHAR2(300)   CONSTRAINT II_INSPEC_ITEM_DESC_MID_NN   NOT NULL
    ,   INSPEC_ITEM_DESC_LOW    VARCHAR2(300)   CONSTRAINT II_INSPEC_ITEM_DESC_LOW_NN   NOT NULL
    ,   CONSTRAINT INSPEC_ITEM_ID_PK    PRIMARY KEY (INSPEC_ITEM_ID)
);

--○ '검수항목_등급' 테이블
CREATE TABLE INSPEC_GRADE
(
    INSPEC_GRADE_ID         NUMBER
    ,   INSPEC_GRADE_NAME       CHAR(3)     CONSTRAINT IG_INSPEC_GRADE_NAME_NN  NOT NULL
    ,   INSPEC_GRADE_DEDUCTION  NUMBER(2,0) CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_NN NOT NULL
    ,   CONSTRAINT INSPEC_GRADE_ID_PK   PRIMARY KEY (INSPEC_GRADE_ID)
);

--○ '검수_결과' 테이블
CREATE TABLE INSPEC_RESULT
(
    INSPEC_RESULT_ID                NUMBER
    ,   PLATFORM_DELIVERY_ID            NUMBER
    ,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
    ,   EQUIP_GRADE_ID                  NUMBER      CONSTRAINT IR_EQUIP_GRADE_ID_NN NOT NULL
    ,   CONSTRAINT INSPEC_RESULT_ID_PK  PRIMARY KEY (INSPEC_RESULT_ID)
);

--○ '장비_등급' 테이블
CREATE TABLE EQUIP_GRADE
(
    EQUIP_GRADE_ID      NUMBER
    ,   EQUIP_GRADE_NAME    CHAR(1)             CONSTRAINT EG_EQUIP_GRADE_NAME_NN NOT NULL
    ,   EQUIP_GRADE_DESC    VARCHAR2(90)
    ,   MIN_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MIN_DEDUCTION_NN NOT NULL
    ,   MAX_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MAX_DEDUCTION_NN NOT NULL
    ,   CONSTRAINT EQUIP_GRADE_ID_PK PRIMARY KEY (EQUIP_GRADE_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION
(
    INSPEC_RESULT_ACTION_ID         NUMBER
    ,   INSPEC_RESULT_ID                NUMBER      CONSTRAINT IRA_INSPEC_R_ID_NN  NOT NULL
    ,   INSPEC_RESULT_ACTION_TYPE_ID    NUMBER      CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_NN  NOT NULL
    ,   COMPLETED_DATE                  DATE        CONSTRAINT IRA_COMPLETED_DATE_NN NOT NULL
    ,   CONSTRAINT  INSPEC_R_ACTION_ID_PK  PRIMARY KEY (INSPEC_RESULT_ACTION_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION_TYPE
(
    INSPEC_RESULT_ACTION_TYPE_ID        NUMBER
    ,   INSPEC_RESULT_ACTION_TYPE_NAME      VARCHAR2(20)        CONSTRAINT IRAT_INSPEC_R_A_TYPE_NAME_NN   NOT NULL
    ,   CONSTRAINT INSPEC_R_A_TYPE_ID_PK PRIMARY KEY (INSPEC_RESULT_ACTION_TYPE_ID)
);

--○ STOREN_IRA (1:N 관계 표현 중간 테이블)
CREATE TABLE STOREN_IRA
( STOREN_IRA_ID            NUMBER
    , INSPEC_RESULT_ACTION_ID  NUMBER   CONSTRAINT SI_INSPEC_RESULT_ACTION_ID_NN NOT NULL
    , STOREN_ID                NUMBER   CONSTRAINT SI_STOREN_ID_NN NOT NULL
    , CONSTRAINT STOREN_IRA_ID_PK PRIMARY KEY (STOREN_IRA_ID)
);

--○ '스토렌_매칭_신청' 테이블
CREATE TABLE STOREN_MATCHING_REQ
(
    STOREN_MATCHING_REQ_ID      NUMBER
    ,   RENTAL_START_DATE           DATE        CONSTRAINT SMR_RENTAL_START_DATE_NN NOT NULL
    ,   RENTAL_END_DATE             DATE        CONSTRAINT SMR_RENTAL_END_DATE_NN NOT NULL
    ,   REQUESTED_DATE              DATE        CONSTRAINT SMR_REQUESTED_DATE_NN NOT NULL
    ,   STOREN_IRA_ID               NUMBER
    ,   STOREN_MATCHING_REQ_USER_ID NUMBER      CONSTRAINT SMR_STOREN_M_R_USER_ID_NN  NOT NULL
    ,   CONSTRAINT STOREN_MATCHING_REQ_ID_PK PRIMARY KEY(STOREN_MATCHING_REQ_ID)
);

--○ '스토렌_매칭_완료' 테이블
CREATE TABLE STOREN_MATCHING_DONE
(
    STOREN_MATCHING_DONE_ID     NUMBER
    ,   APPROVED_DATE               DATE        CONSTRAINT SMD_APPROVED_DATE_NN NOT NULL
    ,   STOREN_MATCHING_REQ_ID      NUMBER      CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_NN   NOT NULL
    ,   CONSTRAINT STOREN_MATCHING_DONE_ID_PK PRIMARY KEY(STOREN_MATCHING_DONE_ID)
);

--○ '사용자_문제_유형' 테이블
CREATE TABLE RENTER_PROBLEM_TYPE
(
    RENTER_PROBLEM_TYPE_ID      NUMBER
    ,   RENTER_PROBLEM_TYPE_NAME    VARCHAR2(30)        CONSTRAINT RPT_RENTER_P_TYPE_NAME_NN  NOT NULL
    ,   CONSTRAINT RENTER_PROBLEM_TYPE_ID_PK   PRIMARY KEY (RENTER_PROBLEM_TYPE_ID)
);

--○ '사용자_문제_발생' 테이블
CREATE TABLE RENTER_PROBLEM
(
    RENTER_PROBLEM_ID       NUMBER
    ,   RENTER_PROBLEM_TYPE_ID  NUMBER      CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_NN     NOT NULL
    ,   INSPEC_RESULT_ACTION_ID NUMBER      CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_NN    NOT NULL
    ,   PROBLEM_REPORTED_DATE   DATE        CONSTRAINT RP_PROBLEM_R_DATE_NN NOT NULL
    ,   CONSTRAINT RENTER_PROBLEM_ID_PK PRIMARY KEY (RENTER_PROBLEM_ID)
);

--○ '사용자_문제_발생_분실' 테이블
CREATE TABLE RENTER_PROBLEM_LOST
(
    RENTER_PROBLEM_LOST_ID  NUMBER
    ,   STOREN_MATCHING_DONE_ID NUMBER  CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_NN NOT NULL
    ,   PROBLEM_REPORTED_DATE   DATE    CONSTRAINT RPL_PROBLEM_REPORTED_DATE_NN   NOT NULL
    ,   CONSTRAINT RENTER_PROBLEM_LOST_ID_PK PRIMARY KEY (RENTER_PROBLEM_LOST_ID)
);

--○ '사용자_추가_결제' 테이블
CREATE TABLE RENTER_ADD_PAY
(
    RENTER_ADD_PAY_ID       NUMBER
    ,   RENTER_PROBLEM_ID       NUMBER
    ,   RENTER_PROBLEM_LOST_ID  NUMBER
    ,   RENTER_ADD_PAY_AMOUNT   NUMBER(9,0)     CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_NN NOT NULL
    ,   PAY_DATE                DATE            CONSTRAINT RAP_PAY_DATE_NN NOT NULL
    ,   CONSTRAINT RENTER_ADD_PAY_ID_PK PRIMARY KEY (RENTER_ADD_PAY_ID)
);






-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--■■■ 제약조건 추가 ■■■--

--○ '말머리' 테이블
ALTER TABLE POST_LABEL
    ADD CONSTRAINT PL_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
        REFERENCES BOARD(BOARD_ID);



--○ '캠핑일지' 테이블
ALTER TABLE DIARY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE DIARY
    ADD CONSTRAINT DIA_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);



--○ '인기글_지정_로그' 테이블
ALTER TABLE HOT_POST_LOG
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 인기글 지정 로그 함께 삭제)
ALTER TABLE HOT_POST_LOG
    ADD CONSTRAINT HPL_POST_ID_FK FOREIGN KEY(POST_ID)
        REFERENCES POST(POST_ID)
        ON DELETE CASCADE;



--○ '추천' 테이블
ALTER TABLE RECOMMEND
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RECOMMEND
    ADD CONSTRAINT REC_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

-- UK (한 게시물당 한개 ID로 1번만 추천 가능)
ALTER TABLE RECOMMEND
    ADD CONSTRAINT REC_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '댓글' 테이블
ALTER TABLE REPLY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY
    ADD CONSTRAINT REP_ROOT_REPLY_ID_FK FOREIGN KEY(ROOT_REPLY_ID)
        REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY
    ADD CONSTRAINT REP_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 댓글 함께 삭제)
ALTER TABLE REPLY
    ADD CONSTRAINT REP_POST_ID_FK FOREIGN KEY(POST_ID)
        REFERENCES POST(POST_ID)
        ON DELETE CASCADE;



--○ '북마크' 테이블
ALTER TABLE BOOKMARK
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE BOOKMARK
    ADD CONSTRAINT BOO_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE BOOKMARK
    ADD CONSTRAINT BOO_POST_ID_FK FOREIGN KEY(POST_ID)
        REFERENCES POST(POST_ID);

-- 연쇄 삭제 (게시글 삭제 시 북마크 함께 삭제)
ALTER TABLE BOOKMARK
    ADD CONSTRAINT BOO_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '이벤트' 테이블
ALTER TABLE EVENT
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT
    ADD CONSTRAINT EVE_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE EVENT
    ADD CONSTRAINT EVE_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
        REFERENCES BOARD(BOARD_ID);

-- 일자 CK
ALTER TABLE EVENT
    ADD CONSTRAINT EVE_START_DATE_END_DATE_CK
        CHECK (EVENT_START_DATE < EVENT_END_DATE);



--○ '이벤트_응모' 테이블
ALTER TABLE EVENT_ENTRY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT_ENTRY
    ADD CONSTRAINT EE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
        REFERENCES EVENT(EVENT_ID);

ALTER TABLE EVENT_ENTRY
    ADD CONSTRAINT EE_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

-- UK (한 유저가 한 이벤트에 응모 1회만 가능)
ALTER TABLE EVENT_ENTRY
    ADD CONSTRAINT EE_USER_CODE_EVENT_ID_UK UNIQUE (USER_CODE, EVENT_ID);

-- CK (이벤트 응모 위한 최소 포인트 0 이상)
ALTER TABLE EVENT_ENTRY
    ADD CONSTRAINT EE_EVENT_ENTRY_POINT_CK
        CHECK (EVENT_ENTRY_POINT >= 0);




--○ '이벤트_당첨' 테이블
ALTER TABLE EVENT_WIN
    ADD CONSTRAINT EW_EVENT_ENTRY_ID_FK FOREIGN KEY(EVENT_ENTRY_ID)
        REFERENCES EVENT_ENTRY(EVENT_ENTRY_ID);




--○ '알림' 테이블
ALTER TABLE NOTI
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI
    ADD CONSTRAINT NOT_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE NOTI
    ADD CONSTRAINT NOT_NOTI_TYPE_ID_FK FOREIGN KEY(NOTI_TYPE_ID)
        REFERENCES NOTI_TYPE(NOTI_TYPE_ID);



--○ '알림_확인_로그' 테이블
ALTER TABLE NOTI_CHECK_LOG
    MODIFY CHECKED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI_CHECK_LOG
    ADD CONSTRAINT NCL_NOTI_ID_FK FOREIGN KEY(NOTI_ID)
        REFERENCES NOTI(NOTI_ID);



--○ '통계' 테이블
ALTER TABLE STATISTICS
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STATISTICS
    ADD CONSTRAINT STA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE STATISTICS
    ADD CONSTRAINT STA_STAT_TYPE_ID_FK FOREIGN KEY(STAT_TYPE_ID)
        REFERENCES STAT_TYPE(STAT_TYPE_ID);

ALTER TABLE STATISTICS
    ADD CONSTRAINT STA_STAT_PERIOD_ID_FK FOREIGN KEY(STAT_PERIOD_ID)
        REFERENCES STAT_PERIOD(STAT_PERIOD_ID);



--○ '게시판' 테이블
ALTER TABLE BOARD
    ADD CONSTRAINT BOA_BOARD_CATE_ID_FK FOREIGN KEY(BOARD_CATE_ID)
        REFERENCES BOARD_CATEGORY(BOARD_CATE_ID);

ALTER TABLE BOARD
    ADD CONSTRAINT BOA_WRITE_GRADE_ID_FK FOREIGN KEY(WRITE_GRADE_ID)
        REFERENCES WRITE_GRADE(WRITE_GRADE_ID);



--○ '게시물' 테이블
ALTER TABLE POST
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST
    ADD CONSTRAINT POS_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POST
    ADD CONSTRAINT POS_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
        REFERENCES BOARD(BOARD_ID);

ALTER TABLE POST
    ADD CONSTRAINT POS_POST_LABEL_ID_FK FOREIGN KEY(POST_LABEL_ID)
        REFERENCES POST_LABEL(POST_LABEL_ID);



--○ '게시물_조회_로그' 테이블
ALTER TABLE POST_VIEW_LOG
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_VIEW_LOG
    ADD CONSTRAINT PVL_USER_CODE_ID_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 조회수로그 함께 삭제)
ALTER TABLE POST_VIEW_LOG
    ADD CONSTRAINT PVL_POST_ID_FK FOREIGN KEY(POST_ID)
        REFERENCES POST(POST_ID)
        ON DELETE CASCADE;



--○ '게시글_신고_접수' 테이블
ALTER TABLE POST_REPORT
    MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT
    ADD CONSTRAINT PR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
        REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 게시물에 대해 한명이 1번의 신고만 가능)
ALTER TABLE POST_REPORT
    ADD CONSTRAINT PR_REPORTER_ID_POST_ID_UK UNIQUE (REPORTER_ID, POST_ID);



--○ '게시글_신고_처리' 테이블
ALTER TABLE POST_REPORT_ACTION
    MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT_ACTION
    ADD CONSTRAINT PRA_POST_REPORT_ID_FK FOREIGN KEY(POST_REPORT_ID)
        REFERENCES POST_REPORT(POST_REPORT_ID);

ALTER TABLE POST_REPORT_ACTION
    ADD CONSTRAINT PRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE POST_REPORT_ACTION
    ADD CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
        REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '댓글_신고_접수' 테이블
ALTER TABLE REPLY_REPORT
    MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT
    ADD CONSTRAINT RR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
        REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY_REPORT
    ADD CONSTRAINT RR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE REPLY_REPORT
    ADD CONSTRAINT RR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
        REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE REPLY_REPORT
    ADD CONSTRAINT RR_REPORTER_ID_REPLY_ID_UK UNIQUE (REPORTER_ID, REPLY_ID);



--○ '댓글_신고_처리' 테이블
ALTER TABLE REPLY_REPORT_ACTION
    MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT_ACTION
    ADD CONSTRAINT RRA_REPLY_REPORT_ID_FK FOREIGN KEY(REPLY_REPORT_ID)
        REFERENCES REPLY_REPORT(REPLY_REPORT_ID);

ALTER TABLE REPLY_REPORT_ACTION
    ADD CONSTRAINT RRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE REPLY_REPORT_ACTION
    ADD CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
        REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '렌탈_댓글_신고_접수' 테이블
ALTER TABLE RENTAL_REPLY_REPORT
    MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT
    ADD CONSTRAINT RRR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
        REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);

ALTER TABLE RENTAL_REPLY_REPORT
    ADD CONSTRAINT RRR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY_REPORT
    ADD CONSTRAINT RRR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
        REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 렌탈 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE RENTAL_REPLY_REPORT
    ADD CONSTRAINT RRR__REPORTER_ID_RR_ID_UK UNIQUE (REPORTER_ID, RENTAL_REPLY_ID);



--○ '렌탈_댓글_신고_처리' 테이블
ALTER TABLE RENTAL_REPLY_REPORT_ACTION
    MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
    ADD CONSTRAINT RRRA_RENTAL_REPLY_REPORT_ID_FK FOREIGN KEY(RENTAL_REPLY_REPORT_ID)
        REFERENCES RENTAL_REPLY_REPORT(RENTAL_REPLY_REPORT_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
    ADD CONSTRAINT RRRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
    ADD CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
        REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '발행_쿠폰' 테이블
ALTER TABLE ISSUED_COUPON
    MODIFY ISSUED_DATE DEFAULT SYSDATE;

ALTER TABLE ISSUED_COUPON
    ADD CONSTRAINT IC_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE ISSUED_COUPON
    ADD CONSTRAINT IC_COUPON_TYPE_ID_FK FOREIGN KEY(COUPON_TYPE_ID)
        REFERENCES COUPON_TYPE(COUPON_TYPE_ID);

-- CK (쿠폰 할인율 1~100% 사이)
ALTER TABLE ISSUED_COUPON
    ADD CONSTRAINT IC_COUPON_DISCOUNT_CK CHECK(COUPON_DISCOUNT BETWEEN 1 AND 100);

-- CK (쿠폰 유효 개월 수 1~12개월 사이)
ALTER TABLE ISSUED_COUPON
    ADD CONSTRAINT IC_COUPON_MONTH_CK CHECK(COUPON_MONTH BETWEEN 1 AND 12);



--○ '보유_쿠폰' 테이블
ALTER TABLE OWNED_COUPON
    ADD CONSTRAINT OC_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE OWNED_COUPON
    ADD CONSTRAINT OC_ISSUED_COUPON_ID_FK FOREIGN KEY(ISSUED_COUPON_ID)
        REFERENCES ISSUED_COUPON(ISSUED_COUPON_ID);



--○ '포인트_변동_로그' 테이블
ALTER TABLE POINT_LOG
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POINT_LOG
    ADD CONSTRAINT PL_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POINT_LOG
    ADD CONSTRAINT PL_POINT_CHANGE_TYPE_ID_FK FOREIGN KEY(POINT_CHANGE_TYPE_ID)
        REFERENCES POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID);



--○ '회원_등급' 테이블
ALTER TABLE RANK
    ADD CONSTRAINT RAN_MIN_POINT_CK CHECK(MIN_POINT >= 0 AND MIN_POINT < MAX_POINT);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_MAX_POINT_CK CHECK(MAX_POINT >= 0);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_MIN_CREDIT_CK CHECK(MIN_CREDIT >= 0 AND MIN_CREDIT < MAX_CREDIT);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_MAX_CREDIT_CK CHECK(MAX_CREDIT >= 0);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_MAX_NICKNAME_CHANGE_CK CHECK(MAX_NICKNAME_CHANGE >= 0);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_DISCOUNT_COUPON_QTY_CK CHECK(DISCOUNT_COUPON_QTY >= 0);

ALTER TABLE RANK
    ADD CONSTRAINT RAN_BOOST_QTY_CK CHECK(BOOST_QTY >= 0);




--○ '회원_등급' 테이블
ALTER TABLE BOOST_LOG
    MODIFY BOOST_LOG_DATE DEFAULT SYSDATE;

ALTER TABLE BOOST_LOG
    ADD CONSTRAINT BL_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
        REFERENCES STOREN(STOREN_ID);

ALTER TABLE BOOST_LOG
    ADD CONSTRAINT BL_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
        REFERENCES RENTAL(RENTAL_ID);




--○ '주소_로그' 테이블
ALTER TABLE ADDRESS_LOG
    MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE ADDRESS_LOG
    ADD CONSTRAINT AL_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);



--○ '찜' 테이블
ALTER TABLE WISHLIST
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE WISHLIST
    ADD CONSTRAINT WIS_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE WISHLIST
    ADD CONSTRAINT WIS_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
        REFERENCES STOREN(STOREN_ID);

-- 연쇄 삭제 (렌탈 글 삭제 시 찜 함께 삭제)
ALTER TABLE WISHLIST
    ADD CONSTRAINT WIS_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
        REFERENCES RENTAL(RENTAL_ID)
        ON DELETE CASCADE;



--○ '만족도_평가_로그' 테이블
ALTER TABLE SATISFACTION_LOG
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE SATISFACTION_LOG
    ADD CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
        REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE SATISFACTION_LOG
    ADD CONSTRAINT SL_REVIEWER_ID_FK FOREIGN KEY(REVIEWER_ID)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SATISFACTION_LOG
    ADD CONSTRAINT SL_REVIEWEE_ID_FK FOREIGN KEY(REVIEWEE_ID)
        REFERENCES USER_CODE(USER_CODE);

-- CK (만족도 점수는 1~5점 사이)
ALTER TABLE SATISFACTION_LOG
    ADD CONSTRAINT SL_SATIS_SCORE_CK CHECK(SATIS_SCORE BETWEEN 1 AND 5);



--○ '닉네임_로그' 테이블
ALTER TABLE NICKNAME_LOG
    MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE NICKNAME_LOG
    ADD CONSTRAINT NL_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

-- UK (유저 닉네임 고유해야함)
ALTER TABLE NICKNAME_LOG
    ADD CONSTRAINT NL_NICKNAME_UK UNIQUE(NICKNAME);



--○ '회원_코드' 테이블
ALTER TABLE USERS
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE USERS
    ADD CONSTRAINT USE_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE USERS
    ADD CONSTRAINT USE_SIGNUP_TYPE_ID_FK FOREIGN KEY(SIGNUP_TYPE_ID)
        REFERENCES SIGNUP_TYPE(SIGNUP_TYPE_ID);

-- UK (유저 이메일주소 고유해야함)
ALTER TABLE USERS
    ADD CONSTRAINT USE_USER_EMAIL_UK UNIQUE(USER_EMAIL);



--○ 관리자 등록 테이블
ALTER TABLE ADMINS
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE ADMINS
    ADD CONSTRAINT ADM_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);



--○ '활동정지_회원' 테이블
ALTER TABLE SUSPENDED_USER
    MODIFY SUSPENDED_START_DATE DEFAULT SYSDATE;

ALTER TABLE SUSPENDED_USER
    ADD CONSTRAINT SU_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SUSPENDED_USER
    ADD CONSTRAINT SU_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);



--○ '첨부파일_게시물' 테이블
ALTER TABLE ATTACHMENT_POST
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_POST
    ADD CONSTRAINT AP_POST_ID_FK FOREIGN KEY(POST_ID)
        REFERENCES POST(POST_ID)
        ON DELETE CASCADE;



--○ '첨부파일_댓글' 테이블
ALTER TABLE ATTACHMENT_REPLY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_REPLY
    ADD CONSTRAINT AR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
        REFERENCES REPLY(REPLY_ID)
        ON DELETE CASCADE;



--○ '첨부파일_캠핑일지' 테이블
ALTER TABLE ATTACHMENT_CAMPING_DIARY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (캠핑일지 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_CAMPING_DIARY
    ADD CONSTRAINT ACD_DIARY_ID_FK FOREIGN KEY(DIARY_ID)
        REFERENCES DIARY(DIARY_ID)
        ON DELETE CASCADE;



--○ '첨부파일_렌탈_댓글' 테이블
ALTER TABLE ATTACHMENT_RENTAL_REPLY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈_댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_RENTAL_REPLY
    ADD CONSTRAINT ARR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
        REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID)
        ON DELETE CASCADE;



--○ '첨부파일_이벤트' 테이블
ALTER TABLE ATTACHMENT_EVENT
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (이벤트 글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EVENT
    ADD CONSTRAINT AE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
        REFERENCES EVENT(EVENT_ID)
        ON DELETE CASCADE;



--○ '첨부파일_장비_등록' 테이블
ALTER TABLE ATTACHMENT_EQUIP_REG
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (내 장비 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EQUIP_REG
    ADD CONSTRAINT AER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
        REFERENCES EQUIP_CODE(EQUIP_CODE)
        ON DELETE CASCADE;




--○ '장비등록' 테이블
ALTER TABLE EQUIPMENT_REGISTRATION
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EQUIPMENT_REGISTRATION
    ADD CONSTRAINT ER_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE EQUIPMENT_REGISTRATION
    ADD CONSTRAINT ER_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
        REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
    ADD CONSTRAINT ER_EQUIP_NAME_ID_FK FOREIGN KEY(EQUIP_NAME_ID)
        REFERENCES EQUIP_NAME(EQUIP_NAME_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
    ADD CONSTRAINT ER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
        REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (신품가격 >= 0)
ALTER TABLE EQUIPMENT_REGISTRATION
    ADD CONSTRAINT ER_ORIGINAL_PRICE_CK CHECK(ORIGINAL_PRICE >= 0);



--○ '장비명' 테이블
ALTER TABLE EQUIP_NAME
    ADD CONSTRAINT EN_BRAND_ID_FK FOREIGN KEY(BRAND_ID)
        REFERENCES BRAND(BRAND_ID);

-- 동일 브랜드 + 동일 장비명 설정 불가
ALTER TABLE EQUIP_NAME
    ADD CONSTRAINT EN_EQUIP_NAME_BRAND_ID_UK UNIQUE(EQUIP_NAME, BRAND_ID);



--○ '스토렌_장비등록' 테이블
ALTER TABLE STOREN
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN
    ADD CONSTRAINT STOREN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
        REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STOREN
    ADD CONSTRAINT STOREN_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
        REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
    ADD CONSTRAINT STOREN_STORE_MONTH_CK CHECK(STORE_MONTH BETWEEN 1 AND 12);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
    ADD CONSTRAINT STOREN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);



--○ '보관_장비등록' 테이블
ALTER TABLE STORAGE
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STORAGE
    ADD CONSTRAINT STORAGE_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
        REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STORAGE
    ADD CONSTRAINT STORAGE_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
        REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STORAGE
    ADD CONSTRAINT STORAGE_STORAGE_MONTH_CK CHECK(STORAGE_MONTH BETWEEN 1 AND 12);



--○ '렌탈_장비등록' 테이블
ALTER TABLE RENTAL
    MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL
    ADD CONSTRAINT REN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
        REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (시작일자가 종료일보다 빨라야 함)
ALTER TABLE RENTAL
    ADD CONSTRAINT REN_RENT_END_WANT_DATE_CK CHECK(RENT_END_WANT_DATE > RENT_START_WANT_DATE);

-- CK (1일 렌탈가격은 0 이상)
ALTER TABLE RENTAL
    ADD CONSTRAINT REN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);




--○ '카테고리' 테이블
ALTER TABLE CATEGORY
    ADD CONSTRAINT CAT_PARENT_CATEGORY_ID_FK FOREIGN KEY(PARENT_CATEGORY_ID)
        REFERENCES CATEGORY(CATEGORY_ID);

-- UK (카테고리명 고유해야함)
ALTER TABLE CATEGORY
    ADD CONSTRAINT CAT_CATEGORY_NAME_UK UNIQUE(CATEGORY_NAME);



--○ '브랜드' 테이블
-- UK (브랜드명 고유해야함)
ALTER TABLE BRAND
    ADD CONSTRAINT BRA_BRAND_NAME_UK UNIQUE(BRAND_NAME);



--○ '스토렌-검수결과처리' 테이블
ALTER TABLE STOREN_IRA
    ADD CONSTRAINT STOREN_IRA_IRA_ID_FK FOREIGN KEY (INSPEC_RESULT_ACTION_ID)
        REFERENCES INSPEC_RESULT_ACTION (INSPEC_RESULT_ACTION_ID);

ALTER TABLE STOREN_IRA
    ADD CONSTRAINT STOREN_IRA_STOREN_ID_FK FOREIGN KEY (STOREN_ID)
        REFERENCES STOREN (STOREN_ID);

ALTER TABLE STOREN_IRA
    ADD CONSTRAINT SI_STOREN_IRA_UNIQUE_UK
        UNIQUE (INSPEC_RESULT_ACTION_ID, STOREN_ID);



--○ '스토렌_매칭_신청' 테이블
ALTER TABLE STOREN_MATCHING_REQ
    MODIFY REQUESTED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_REQ
    ADD CONSTRAINT SMR_STOREN_IRA_ID_FK FOREIGN KEY (STOREN_IRA_ID)
        REFERENCES STOREN_IRA (STOREN_IRA_ID);

ALTER TABLE STOREN_MATCHING_REQ
    ADD CONSTRAINT SMR_STN_M_REQ_USER_ID_FK FOREIGN KEY (STOREN_MATCHING_REQ_USER_ID)
        REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE STOREN_MATCHING_REQ
    ADD CONSTRAINT SMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '스토렌_매칭_완료' 테이블
ALTER TABLE STOREN_MATCHING_DONE
    MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_DONE
    ADD CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_FK FOREIGN KEY(STOREN_MATCHING_REQ_ID)
        REFERENCES STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID);



--○ '렌탈_매칭_신청' 테이블
ALTER TABLE RENTAL_MATCHING_REQ
    MODIFY REQUESTED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 매칭 신청 함께 삭제)
ALTER TABLE RENTAL_MATCHING_REQ
    ADD CONSTRAINT RMR_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
        REFERENCES RENTAL(RENTAL_ID)
        ON DELETE CASCADE;

ALTER TABLE RENTAL_MATCHING_REQ
    ADD CONSTRAINT RMR_RENTAL_M_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQUESTER_ID)
        REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE RENTAL_MATCHING_REQ
    ADD CONSTRAINT RMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '렌탈_매칭_완료' 테이블
ALTER TABLE RENTAL_MATCHING_DONE
    MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_MATCHING_DONE
    ADD CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQ_ID)
        REFERENCES RENTAL_MATCHING_REQ(RENTAL_MATCHING_REQ_ID);



--○ '렌탈_댓글' 테이블
ALTER TABLE RENTAL_REPLY
    MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 댓글 함께 삭제)
ALTER TABLE RENTAL_REPLY
    ADD CONSTRAINT RR_RENTAL_ID_FK FOREIGN KEY (RENTAL_ID)
        REFERENCES RENTAL(RENTAL_ID)
        ON DELETE CASCADE;

ALTER TABLE RENTAL_REPLY
    ADD CONSTRAINT RR_USER_CODE_FK FOREIGN KEY(USER_CODE)
        REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY
    ADD CONSTRAINT RR_RENTAL_ROOT_REPLY_ID_FK FOREIGN KEY(RENTAL_ROOT_REPLY_ID)
        REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);



--○ '결제' 테이블

ALTER TABLE PAY
    ADD CONSTRAINT PAY_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
        REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE PAY
    ADD CONSTRAINT PAY_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
        REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE PAY
    ADD CONSTRAINT PAY_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
        REFERENCES STOREN(STOREN_ID);

ALTER TABLE PAY
    ADD CONSTRAINT PAY_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
        REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);

ALTER TABLE PAY
    ADD CONSTRAINT PAY_PAY_METHOD_ID_FK FOREIGN KEY(PAY_METHOD_ID)
        REFERENCES PAY_METHOD(PAY_METHOD_ID);

-- CK (결제금액은 0 이상)
ALTER TABLE PAY
    ADD CONSTRAINT PAY_AMOUNT_CK CHECK(PAY_AMOUNT >= 0);



--○ '결제_취소' 테이블
ALTER TABLE PAY_CANCEL
    MODIFY CANCEL_DATE DEFAULT SYSDATE;

ALTER TABLE PAY_CANCEL
    ADD CONSTRAINT PC_PAY_ID_FK FOREIGN KEY(PAY_ID)
        REFERENCES PAY(PAY_ID);

ALTER TABLE PAY_CANCEL
    ADD CONSTRAINT PC_PAY_CANCEL_REASON_ID_FK FOREIGN KEY(PAY_CANCEL_REASON_ID)
        REFERENCES PAY_CANCEL_REASON(PAY_CANCEL_REASON_ID);



--○ '플랫폼_배송' 테이블
ALTER TABLE PLATFORM_DELIVERY
    ADD CONSTRAINT PD_PAY_ID_FK FOREIGN KEY(PAY_ID)
        REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY
    ADD CONSTRAINT PD_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '플랫폼_배송_반환' 테이블
ALTER TABLE PLATFORM_DELIVERY_RETURN
    ADD CONSTRAINT PDR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
        REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY_RETURN
    ADD CONSTRAINT PDR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '거래자_택배' 테이블
ALTER TABLE USERS_DELIVERY
    ADD CONSTRAINT UD_PAY_ID_FK FOREIGN KEY (PAY_ID)
        REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY
    ADD CONSTRAINT UD_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '거래자_택배_반환' 테이블
ALTER TABLE USERS_DELIVERY_RETURN
    ADD CONSTRAINT UDR_USERS_DELIVERY_ID_FK FOREIGN KEY(USERS_DELIVERY_ID)
        REFERENCES USERS_DELIVERY(USERS_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY_RETURN
    ADD CONSTRAINT UDR_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '보관_최종_반환' 테이블
ALTER TABLE STORAGE_LAST_RETURN
    ADD CONSTRAINT SLR_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
        REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE STORAGE_LAST_RETURN
    ADD CONSTRAINT SLR_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
        REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STORAGE_LAST_RETURN
    ADD CONSTRAINT SLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '스토렌_최종_반환' 테이블 생성
ALTER TABLE STOREN_LAST_RETURN
    ADD CONSTRAINT SLR_STOREN_ID_FK FOREIGN KEY (STOREN_ID)
        REFERENCES STOREN(STOREN_ID);

ALTER TABLE STOREN_LAST_RETURN
    ADD CONSTRAINT STNLR_INSPEC_R_ACTION_ID_FK FOREIGN KEY
        (INSPEC_RESULT_ACTION_ID)
        REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STOREN_LAST_RETURN
    ADD CONSTRAINT STNLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);




--○ '검수_리스트' 테이블
ALTER TABLE INSPEC_LIST
    MODIFY INSPECTION_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_LIST
    ADD CONSTRAINT IL_CATE_INSPEC_ID_FK FOREIGN KEY(CATE_INSPEC_ID)
        REFERENCES CATE_INSPEC(CATE_INSPEC_ID);

ALTER TABLE INSPEC_LIST
    ADD CONSTRAINT IL_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
        REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_LIST
    ADD CONSTRAINT IL_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
        REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_LIST
    ADD CONSTRAINT IL_ADMIN_ID_FK FOREIGN KEY (ADMIN_ID)
        REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE INSPEC_LIST
    ADD CONSTRAINT IL_INSPEC_GRADE_ID_FK FOREIGN KEY (INSPEC_GRADE_ID)
        REFERENCES INSPEC_GRADE(INSPEC_GRADE_ID);




--○ '카테_검수항목' 테이블
ALTER TABLE CATE_INSPEC
    ADD CONSTRAINT CI_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
        REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE CATE_INSPEC
    ADD CONSTRAINT CI_INSPEC_ITEM_ID_FK FOREIGN KEY (INSPEC_ITEM_ID)
        REFERENCES INSPEC_ITEM(INSPEC_ITEM_ID);



--○ '검수항목_등급' 테이블 생성
-- CK(감점 >= 0)
ALTER TABLE INSPEC_GRADE
    ADD CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_CK CHECK(INSPEC_GRADE_DEDUCTION >= 0);




--○ '검수_결과' 테이블
ALTER TABLE INSPEC_RESULT
    ADD CONSTRAINT IR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
        REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_RESULT
    ADD CONSTRAINT IR_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
        REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_RESULT
    ADD CONSTRAINT IR_EQUIP_GRADE_ID_FK FOREIGN KEY(EQUIP_GRADE_ID)
        REFERENCES EQUIP_GRADE(EQUIP_GRADE_ID);

-- UK (한 배송ID당 검수결과 1개만 입력 가능)
ALTER TABLE INSPEC_RESULT
    ADD CONSTRAINT IR_PLATFORM_DELIVERY_ID_UK UNIQUE (PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_RESULT
    ADD CONSTRAINT IR_PLATFORM_DELIVERY_R_ID_UK UNIQUE (PLATFORM_DELIVERY_RETURN_ID);


--○ '검수_결과_처리_유형' 테이블
ALTER TABLE INSPEC_RESULT_ACTION
    MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_RESULT_ACTION
    ADD CONSTRAINT IRA_INSPEC_RESULT_ID_FK FOREIGN KEY(INSPEC_RESULT_ID)
        REFERENCES INSPEC_RESULT(INSPEC_RESULT_ID);

ALTER TABLE INSPEC_RESULT_ACTION
    ADD CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_TYPE_ID)
        REFERENCES INSPEC_RESULT_ACTION_TYPE(INSPEC_RESULT_ACTION_TYPE_ID);



--○ '사용자_문제_발생' 테이블
ALTER TABLE RENTER_PROBLEM
    MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM
    ADD CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
        REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

ALTER TABLE RENTER_PROBLEM
    ADD CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_FK FOREIGN KEY(RENTER_PROBLEM_TYPE_ID)
        REFERENCES RENTER_PROBLEM_TYPE(RENTER_PROBLEM_TYPE_ID);



--○ '사용자_문제_발생_분실' 테이블
ALTER TABLE RENTER_PROBLEM_LOST
    MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM_LOST
    ADD CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
        REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);



--○ '사용자_추가_결제' 테이블

ALTER TABLE RENTER_ADD_PAY
    ADD CONSTRAINT RAP_RENTER_PROBLEM_ID_FK FOREIGN KEY (RENTER_PROBLEM_ID)
        REFERENCES RENTER_PROBLEM(RENTER_PROBLEM_ID);

ALTER TABLE RENTER_ADD_PAY
    ADD CONSTRAINT RAP_RENTER_PROBLEM_LOST_ID_FK FOREIGN KEY (RENTER_PROBLEM_LOST_ID)
        REFERENCES RENTER_PROBLEM_LOST(RENTER_PROBLEM_LOST_ID);

-- CK (추가결제금액 >= 0)
ALTER TABLE RENTER_ADD_PAY
    ADD CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_CK CHECK (RENTER_ADD_PAY_AMOUNT >= 0);


---------------------------------------------------------------------------
---------------------------------------------------------------------------
--■■■ 시퀀스 ■■■--

CREATE SEQUENCE CATEGORY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE BRAND_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_NAME_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_SIZE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_CODE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIPMENT_REGISTRATION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STOREN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STORAGE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_REPLY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_MATCHING_REQ_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STOREN_IRA_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_MATCHING_DONE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STOREN_MATCHING_REQ_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STOREN_MATCHING_DONE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PAY_METHOD_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PAY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PAY_CANCEL_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PAY_CANCEL_REASON_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE USERS_DELIVERY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE USERS_DELIVERY_RETURN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PLATFORM_DELIVERY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PLATFORM_DELIVERY_RETURN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STORAGE_LAST_RETURN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STOREN_LAST_RETURN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE CATE_INSPEC_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_ITEM_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_GRADE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_LIST_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_GRADE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_RESULT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_RESULT_ACTION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_RESULT_ACTION_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTER_PROBLEM_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTER_PROBLEM_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTER_PROBLEM_LOST_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTER_ADD_PAY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE WISHLIST_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE SATISFACTION_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE SIGNUP_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RANK_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE BOOST_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ADDRESS_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE COUPON_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ISSUED_COUPON_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE OWNED_COUPON_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POINT_CHANGE_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POINT_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE NICKNAME_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE USER_CODE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE SUSPENDED_USER_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE BOARD_CATEGORY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE BOARD_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE WRITE_GRADE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_LABEL_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE DIARY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_VIEW_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE HOT_POST_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RECOMMEND_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE REPLY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE BOOKMARK_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EVENT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EVENT_ENTRY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE EVENT_WIN_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE NOTI_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE NOTI_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE NOTI_CHECK_LOG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STAT_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STAT_PERIOD_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE STATISTICS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE REPORT_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE REPORT_ACTION_TYPE_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_REPORT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_REPORT_ACTION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE REPLY_REPORT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE REPLY_REPORT_ACTION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_REPLY_REPORT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTAL_REPLY_REPORT_ACTION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_POST_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_REPLY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_CAMPING_DIARY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_RENTAL_REPLY_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_EVENT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ATTACHMENT_EQUIP_REG_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;











----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
--@@
--■■■ DUMMY DATA ■■■--

--▶ 최상위 테이블 ◀--

--○ CATEGORY(대분류)
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '텐트/쉘터');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '취침용품');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '캠핑가구');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '조명/전력장비');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '조리장비');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '냉/난방용품');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '수납/운반용품');
INSERT INTO CATEGORY(CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, '기타');

SELECT *
FROM CATEGORY;



--○ CATEGORY(중분류)
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '텐트');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '쉘터/타프');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '설치용 부속품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '보조 텐트류');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '바닥보호시트');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 1, '기타 텐트/쉘터');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '침낭');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '매트');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '카페트/러그');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '야전침대');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '보조 침구류');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 2, '기타 취침용품');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '테이블');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '개인용 의자');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '다인용 의자');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '해먹/스탠드');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '수납선반/랙');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 3, '기타 캠핑가구');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, '가스/오일랜턴');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, 'LED/충전식랜턴');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, '후레쉬/헤드랜턴');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, '랜턴 스탠드');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, '릴선/인버터/충전기');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 4, '기타 조명/전력장비');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '스토브/버너/화로');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '냄비/팬/그릴');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '조리도구/식기');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '가스/연료/장작/토치');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '식료품 보온보냉용품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 5, '기타 조리장비');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '연료식 난방기기');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '전기식 난방기기');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '일회용 난방용품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '전기식 냉방기기');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '착용형 냉/난방용품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 6, '기타 냉/난방용품');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '웨건/카트');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '수납박스/컨테이너');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '디팩/파우치');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '백팩');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '장비 케이스');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 7, '기타 수납/운반용품');

INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '장비설치도구');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '설치보조도구');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '안전의약품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '등산용품/의류');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '데코용품');
INSERT INTO CATEGORY(CATEGORY_ID, PARENT_CATEGORY_ID, CATEGORY_NAME) VALUES(CATEGORY_SEQ.NEXTVAL, 8, '기타 잡화');

SELECT *
FROM CATEGORY;



--○ BRAND
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '기타');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '스노우피크(SNOW PEAK)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '콜맨(COLEMAN)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '코베아(KOVEA)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '네이처하이크(NATUREHIKE)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '밀레(MILLET)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '노스페이스(THE NORTH FACE)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '로고스(LOGOS)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '컬럼비아(COLUMBIA)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '캠프타운(CAMPTOWN)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '버팔로(BUFFALO)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '아이두젠(IDOOGEN)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '카즈미(KZM)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '웨버(WEBER)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '헬리녹스(HELINOX)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '니모(NEMO)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '힐베르그(HILLEBERG)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '엠에스알(MSR)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '노르디스크(NORDISK)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '헬스포츠(HELSPORT)');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (BRAND_SEQ.NEXTVAL, '몽벨(MONTBELL)');

SELECT *
FROM BRAND;



--○ EQUIP_NAME
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 1, '기타');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '기타');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 65주년 리빙 쉘 프로 이너 룸 세트 TP-653');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드네스트 쉘터 TP-259');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드네스트 돔 M  3-4인용 SDE-260');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드락 6인용 브라운 TP-671R');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드락 6인용 아이보리 TP-671IV');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드락 프로 에어 쉴드루프세트 FES-197');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드브리즈 Pro 4 6인용 SD-644');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드브리즈 프로 에어 듀오 FES-652');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 랜드 스테이션 M 프로 에어 TP-815');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 리겔 프로 4인용 TP-950');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 리빙쉘 TP-623R');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 리빙쉘 롱프로 TP-660');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 리빙쉘 롱프로 아이보리 TP-660IV');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 볼트 3-4인용 브라운 SDE-080RH');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 볼트 돔 4인용 아이보리 SDE-080-IV-US');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 알파 브리즈 돔 SD-480-IV-US');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 어메니티 돔 L 4-5인용 탄 색상 SDE-003RD');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 어메니티 돔 S 아이보리  SDE-002-IV');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 어메니티 엘필드 AD-020');
INSERT INTO EQUIP_NAME (EQUIP_NAME_ID, BRAND_ID, EQUIP_NAME)
VALUES (EQUIP_NAME_SEQ.NEXTVAL, 2, '스노우피크 텐트 엘필드 엔트리 투룸 TP-880R');

SELECT *
FROM EQUIP_NAME;



--○ EQUIP_SIZE
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (EQUIP_SIZE_SEQ.NEXTVAL, 'XS', 1, 1000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (EQUIP_SIZE_SEQ.NEXTVAL, 'S', 2, 1500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (EQUIP_SIZE_SEQ.NEXTVAL, 'M', 3, 2000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (EQUIP_SIZE_SEQ.NEXTVAL, 'L', 4, 2500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (EQUIP_SIZE_SEQ.NEXTVAL, 'XL', 5, 3000);

SELECT *
FROM EQUIP_SIZE;



--○ PAY_METHOD
INSERT INTO PAY_METHOD (PAY_METHOD_ID, PAY_METHOD_NAME) VALUES (PAY_METHOD_SEQ.NEXTVAL, '카드 결제');
INSERT INTO PAY_METHOD (PAY_METHOD_ID, PAY_METHOD_NAME) VALUES (PAY_METHOD_SEQ.NEXTVAL, '무통장 입금');

SELECT *
FROM PAY_METHOD;



--○ PAY_CANCEL_REASON
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '소유자 단순 변심');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '사용자 단순 변심');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '사용자 결제 지연');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '소유차측 발송 지연');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '이전 사용자 연체');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '이전 사용자 파손');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (PAY_CANCEL_REASON_SEQ.NEXTVAL, '이전 사용자 분실');

SELECT *
FROM PAY_CANCEL_REASON;



--○ INSPEC_ITEM
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME, INSPEC_ITEM_DESC_HIGH, INSPEC_ITEM_DESC_MID, INSPEC_ITEM_DESC_LOW)
VALUES (INSPEC_ITEM_SEQ.NEXTVAL, '외관 보존 상태', '사용감 거의 없음, 신품 수준 외관', '색 바램/마모/주름 등 경미한 사용감 있음', '뚜렷한 사용 흔적, 외관 낡고 변색');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME, INSPEC_ITEM_DESC_HIGH, INSPEC_ITEM_DESC_MID, INSPEC_ITEM_DESC_LOW)
VALUES (INSPEC_ITEM_SEQ.NEXTVAL, '물리적 무손상 상태', '찢어짐, 휨, 파손 등 없음', '작은 손상 있음', '심각한 손상 있음');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME, INSPEC_ITEM_DESC_HIGH, INSPEC_ITEM_DESC_MID, INSPEC_ITEM_DESC_LOW)
VALUES (INSPEC_ITEM_SEQ.NEXTVAL, '청결/위생 상태', '얼룩, 냄새, 곰팡이 등 전혀 없음', '약간의 오염 있음, 세척 가능', '심한 오염이나 냄새, 곰팡이 등 있음');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME, INSPEC_ITEM_DESC_HIGH, INSPEC_ITEM_DESC_MID, INSPEC_ITEM_DESC_LOW)
VALUES (INSPEC_ITEM_SEQ.NEXTVAL, '부속품 완비', '팩, 스트링, 설치 매뉴얼 등 모두 포함', '일부 부속품 누락', '필수 부속품 누락');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME, INSPEC_ITEM_DESC_HIGH, INSPEC_ITEM_DESC_MID, INSPEC_ITEM_DESC_LOW)
VALUES (INSPEC_ITEM_SEQ.NEXTVAL, '기능 및 작동성', '방수, 지퍼, 고정력 등 모두 정상 작동', '일부 기능 약간 미흡', '기능 중 하나 이상 심각한 문제');

SELECT *
FROM INSPEC_ITEM;



--○ CATE_INSPEC
INSERT INTO CATE_INSPEC (CATE_INSPEC_ID, CATEGORY_ID, INSPEC_ITEM_ID) VALUES (CATE_INSPEC_SEQ.NEXTVAL, 9, 1);
INSERT INTO CATE_INSPEC (CATE_INSPEC_ID, CATEGORY_ID, INSPEC_ITEM_ID) VALUES (CATE_INSPEC_SEQ.NEXTVAL, 9, 2);
INSERT INTO CATE_INSPEC (CATE_INSPEC_ID, CATEGORY_ID, INSPEC_ITEM_ID) VALUES (CATE_INSPEC_SEQ.NEXTVAL, 9, 3);
INSERT INTO CATE_INSPEC (CATE_INSPEC_ID, CATEGORY_ID, INSPEC_ITEM_ID) VALUES (CATE_INSPEC_SEQ.NEXTVAL, 9, 4);
INSERT INTO CATE_INSPEC (CATE_INSPEC_ID, CATEGORY_ID, INSPEC_ITEM_ID) VALUES (CATE_INSPEC_SEQ.NEXTVAL, 9, 5);

SELECT *
FROM CATE_INSPEC;



--○ INSPEC_GRADE
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME, INSPEC_GRADE_DEDUCTION) VALUES (INSPEC_GRADE_SEQ.NEXTVAL, '상', 0);
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME, INSPEC_GRADE_DEDUCTION) VALUES (INSPEC_GRADE_SEQ.NEXTVAL, '중', 7);
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME, INSPEC_GRADE_DEDUCTION) VALUES (INSPEC_GRADE_SEQ.NEXTVAL, '하', 14);

SELECT *
FROM INSPEC_GRADE;



--○ EQUIP_GRADE
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'A', '100~90점', 0, 10);
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'B', '89~80점', 11, 20);
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'C', '79~70점', 21, 30);
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'D', '69~60점', 31, 40);
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'E', '59~50점', 41, 50);
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME, EQUIP_GRADE_DESC, MIN_DEDUCTION, MAX_DEDUCTION)
VALUES (EQUIP_GRADE_SEQ.NEXTVAL, 'F', '49점 이하(스토렌 및 렌탈 등록 불가)', 51, 70);

SELECT *
FROM EQUIP_GRADE;



--○ INSPEC_RESULT_ACTION_TYPE
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME)
VALUES (INSPEC_RESULT_ACTION_TYPE_SEQ.NEXTVAL, '스토렌 입고');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME)
VALUES (INSPEC_RESULT_ACTION_TYPE_SEQ.NEXTVAL, '보관 입고');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME)
VALUES (INSPEC_RESULT_ACTION_TYPE_SEQ.NEXTVAL, '강제 반환');

SELECT *
FROM INSPEC_RESULT_ACTION_TYPE;



-- RENTER_PROBLEM_TYPE
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (RENTER_PROBLEM_TYPE_SEQ.NEXTVAL, '연체');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (RENTER_PROBLEM_TYPE_SEQ.NEXTVAL, '파손');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (RENTER_PROBLEM_TYPE_SEQ.NEXTVAL, '연체+파손');

SELECT *
FROM RENTER_PROBLEM_TYPE;



--○ SIGNUP_TYPE
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME) VALUES(SIGNUP_TYPE_SEQ.NEXTVAL, '플랫폼');
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME) VALUES(SIGNUP_TYPE_SEQ.NEXTVAL, '네이버');
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME) VALUES(SIGNUP_TYPE_SEQ.NEXTVAL, '카카오');

SELECT *
FROM SIGNUP_TYPE;


--○ RANK
--==>> 1(도시인) : 기본 등급 → 끌어올리기 1회/주, 쿠폰 10% 1장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_QTY)
VALUES(RANK_SEQ.NEXTVAL, '도시인', 0, 99, 0, 59, 1, 1, 1);

--==>> 2(야외인) : 포인트 100점 이상 / 신뢰도 60% → 끌어올리기 2회/주, 쿠폰 10% 2장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_QTY)
VALUES(RANK_SEQ.NEXTVAL, '야외인', 100, 199, 60, 69, 2, 2, 2);

--==>> 3(방랑인) : 포인트 200점 이상  / 신뢰도 70% → 끌어올리기 3회/주, 쿠폰 10% 3장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_QTY)
VALUES(RANK_SEQ.NEXTVAL, '방랑인', 200, 299, 70, 79, 3, 3, 3);

--==>> 4(개척인) : 포인트 300점 이상 / 신뢰도 80% 이상 → 끌어올리기 4회/주, 쿠폰 10% 4장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_QTY)
VALUES(RANK_SEQ.NEXTVAL, '개척인', 300, 499, 80, 89, 4, 4, 4);

--==>> 5(자연인) : 포인트 500점 이상 / 신뢰도 90% 이상 → 끌어올리기 5회/주, 쿠폰 10% 5장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_QTY)
VALUES(RANK_SEQ.NEXTVAL, '자연인', 500, 999, 90, 999, 5, 5, 5);

SELECT *
FROM RANK;



--○ COUPON_TYPE
INSERT INTO COUPON_TYPE(COUPON_TYPE_ID, COUPON_TYPE_NAME) VALUES(COUPON_TYPE_SEQ.NEXTVAL, '할인');

SELECT *
FROM COUPON_TYPE;



--○ POINT_CHANGE_TYPE
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME) VALUES(POINT_CHANGE_TYPE_SEQ.NEXTVAL, '게시글 작성');
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME) VALUES(POINT_CHANGE_TYPE_SEQ.NEXTVAL, '인기글 지정');
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME) VALUES(POINT_CHANGE_TYPE_SEQ.NEXTVAL, '이벤트 응모');
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME) VALUES(POINT_CHANGE_TYPE_SEQ.NEXTVAL, '신고 처벌');
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME) VALUES(POINT_CHANGE_TYPE_SEQ.NEXTVAL, '허위 신고 처벌');

SELECT *
FROM POINT_CHANGE_TYPE;



--○ REPORT_TYPE
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME) VALUES(REPORT_TYPE_SEQ.NEXTVAL, '중복 글');
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME) VALUES(REPORT_TYPE_SEQ.NEXTVAL, '게시판 오지정');
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME) VALUES(REPORT_TYPE_SEQ.NEXTVAL, '부적절 표현');
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME) VALUES(REPORT_TYPE_SEQ.NEXTVAL, '플랫폼 밖 대화 유도');

SELECT *
FROM REPORT_TYPE;



--○ REPORT_ACTION_TYPE
INSERT INTO REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID, REPORT_ACTION_TYPE_NAME) VALUES(REPORT_ACTION_TYPE_SEQ.NEXTVAL, '작성자 처벌');
INSERT INTO REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID, REPORT_ACTION_TYPE_NAME) VALUES(REPORT_ACTION_TYPE_SEQ.NEXTVAL, '신고자 처벌');

SELECT *
FROM REPORT_ACTION_TYPE;



--○ WRITE_GRADE
INSERT INTO WRITE_GRADE(WRITE_GRADE_ID, WRITE_GRADE_NAME) VALUES(WRITE_GRADE_SEQ.NEXTVAL, '관리자');
INSERT INTO WRITE_GRADE(WRITE_GRADE_ID, WRITE_GRADE_NAME) VALUES(WRITE_GRADE_SEQ.NEXTVAL, '관리자+회원');

SELECT *
FROM WRITE_GRADE;



--○ BOARD_CATEGORY
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME)
VALUES(BOARD_CATEGORY_SEQ.NEXTVAL, '공지');
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME)
VALUES(BOARD_CATEGORY_SEQ.NEXTVAL, '이벤트');
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME)
VALUES(BOARD_CATEGORY_SEQ.NEXTVAL, '고객센터');
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME)
VALUES(BOARD_CATEGORY_SEQ.NEXTVAL, '커뮤니티');

SELECT *
FROM BOARD_CATEGORY;


--○ BOARD
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 1, 1, '공지사항');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 1, 1, '서비스 소개');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 1, 2, '진행 중 이벤트');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 1, 2, '종료된 이벤트');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 1, 3, 'FAQ');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME)
VALUES(BOARD_SEQ.NEXTVAL, 2, 3, 'Q' || CHR(38) || 'A');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME, BOARD_DESC)
VALUES(BOARD_SEQ.NEXTVAL, 2, 4, '자유 게시판', '자유 주제로 글을 올릴 수 있는 게시판입니다.');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME, BOARD_DESC)
VALUES(BOARD_SEQ.NEXTVAL, 2, 4, '장비 정보', '장비 정보를 공유하는 게시판입니다.');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME, BOARD_DESC)
VALUES(BOARD_SEQ.NEXTVAL, 2, 4, '캠핑장 정보', '캠핑장 정보를 공유하는 게시판입니다.');
INSERT INTO BOARD(BOARD_ID, WRITE_GRADE_ID, BOARD_CATE_ID, BOARD_NAME, BOARD_DESC)
VALUES(BOARD_SEQ.NEXTVAL, 2, 4, '고독한 캠핑방', '사진만 올릴 수 있는 게시판입니다.');

SELECT *
FROM BOARD;



--○ POST_LABEL
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 5, '회원정보');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 5, '커뮤니티');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 5, '거래');

INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 6, '회원정보');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 6, '커뮤니티');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 6, '거래');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 6, '브랜드 등록 신청');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 6, '장비명 등록 신청');

INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 7, '아무말대잔치');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 7, '묻고답하기');

INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 8, '신제품정보');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 8, '장비추천');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 8, '장비후기');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 8, '렌탈후기');

INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 9, '신규캠핑장정보');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 9, '캠핑장추천');
INSERT INTO POST_LABEL(POST_LABEL_ID, BOARD_ID, POST_LABEL_NAME)
VALUES(POST_LABEL_SEQ.NEXTVAL, 9, '캠핑장후기');

SELECT *
FROM POST_LABEL;



--○ NOTI_TYPE
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '인기글 지정', '회원님의 게시글이 인기글로 지정되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '댓글 등록', '회원님의 게시글에 댓글이 등록되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '이벤트 당첨', '응모하신 이벤트에 당첨되셨습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '게시글 블라인드(작성자)', '회원님의 게시글이 신고 접수되어 블라인드 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '댓글/렌탈댓글 블라인드(작성자)', '회원님의 댓글이 신고 접수되어 블라인드 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '게시글 신고처리(작성자)', '신고 접수된 게시글을 검토한 결과, 규정 위반으로 포인트 차감하였습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '댓글/렌탈댓글 신고처리(작성자)', '신고 접수된 댓글을 검토한 결과, 규정 위반으로 포인트 차감하였습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '게시글 블라인드 해제(작성자)', '신고 접수된 게시글을 검토한 결과, 문제 없으므로 블라인드 해제하였습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '댓글/렌탈댓글 블라인드 해제(작성자)', '신고 접수된 댓글을 검토한 결과, 문제 없으므로 블라인드 해제하였습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '허위신고(신고자)', '회원님의 신고가 허위로 판단됨에 따라 포인트 차감하였습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '활동정지', '회원님의 계정이 규정 위반 활동으로 인해 활동 정지 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '등급변경', '회원님의 등급이 변경되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '만족도평가', '회원님의 대한 거래 만족도 평가가 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '렌탈 댓글 등록', '회원님의 렌탈 장비에 댓글이 등록되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '렌탈/스토렌 매칭 신청', '회원님의 장비에 매칭 신청이 접수되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '렌탈/스토렌 매칭 완료', '회원님이 신청하신 장비가 매칭 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '결제', '결제 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '결제 취소', '결제 취소되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '플랫폼 배송시작', '플랫폼 배송이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '플랫폼 배송완료', '플랫폼 배송이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '플랫폼 배송 반환시작', '플랫폼 반환 배송이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '플랫폼 배송 반환완료', '플랫폼 반환 배송이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '거래자 택배', '렌탈 배송이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '거래자 택배 반환', '렌탈 반환 배송이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '검수결과', '회원님의 장비등급이 확정되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '검수결과 입고처리', '회원님의 장비가 입고 처리 되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '검수결과 반환처리', '회원님의 장비가 반환 처리 되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '사용자 문제 발생(사용자)', '회원님이 렌탈하신 장비에 문제 접수되어, 추가 결제가 필요합니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '사용자 문제 발생(소유자)', '회원님의 장비에 문제가 접수되어, 직전 사용자에게 추가 결제 요청 및 이후 거래 취소 예정입니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(NOTI_TYPE_SEQ.NEXTVAL, '사용자 추가 결제', '추가 결제가 완료되었습니다.');

SELECT *
FROM NOTI_TYPE;



--○ STAT_TYPE
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(STAT_TYPE_SEQ.NEXTVAL, '접속자 수');
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(STAT_TYPE_SEQ.NEXTVAL, '회원 수');
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(STAT_TYPE_SEQ.NEXTVAL, '거래수');

SELECT *
FROM STAT_TYPE;



--○ STAT_PERIOD
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(STAT_PERIOD_SEQ.NEXTVAL, '상반기');
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(STAT_PERIOD_SEQ.NEXTVAL, '하반기');
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(STAT_PERIOD_SEQ.NEXTVAL, '연간');

SELECT *
FROM STAT_PERIOD;










-------------------------------------------------------------------------
--▶ 테스트용 DUMMY DATA ◀--
/*
<거래 요약>
- EQUIP_ID=1 : 1스토렌 (렌탈 후 장비 반납 완료 / 매칭 후 1-1스토렌 글 등록)
- EQUIP_ID=2 : 2스토렌 (렌탈 후 사용자 파손으로 추가 결제 / 이후 매칭된 글 결제 취소, 신규 글 삭제)
- EQUIP_ID=3 : 3스토렌 (렌탈 매칭 건 없이 보관 중)
- EQUIP_ID=4 : 4보관 (보관 후 최종 반납까지 완료)
- EQUIP_ID=5 : 5렌탈 (렌탈 후 장비 반납 완료 / 매칭 후 5-1렌탈 글 등록 / 만족도 평가(소유자만 완료))
*/

--○ USER_CODE
INSERT INTO USER_CODE(USER_CODE) VALUES(USER_CODE_SEQ.NEXTVAL);
INSERT INTO USER_CODE(USER_CODE) VALUES(USER_CODE_SEQ.NEXTVAL);
INSERT INTO USER_CODE(USER_CODE) VALUES(USER_CODE_SEQ.NEXTVAL);
INSERT INTO USER_CODE(USER_CODE) VALUES(USER_CODE_SEQ.NEXTVAL);
INSERT INTO USER_CODE(USER_CODE) VALUES(USER_CODE_SEQ.NEXTVAL);

SELECT *
FROM USER_CODE;



--○ ADMINS
INSERT INTO ADMINS(ADMIN_ID, USER_CODE, ADMIN_PW, ADMIN_TEL, CREATED_DATE)
VALUES('ADMIN1', 1, '1234', '02-0000-0001', TO_DATE('2025-01-01', 'YYYY-MM-DD'));

SELECT *
FROM ADMINS;



--○ USERS
INSERT INTO USERS(USER_ID, USER_CODE, SIGNUP_TYPE_ID, USER_PW, USER_NAME, USER_TEL, USER_EMAIL, EMAIL_CONSENT, CREATED_DATE)
VALUES('USER1', 2, 1, '1234', '고길동', '010-0000-0001', 'user1@TestController.com', 1, TO_DATE('2025-02-01', 'YYYY-MM-DD'));
INSERT INTO USERS(USER_ID, USER_CODE, SIGNUP_TYPE_ID, USER_PW, USER_NAME, USER_TEL, USER_EMAIL, CREATED_DATE)
VALUES('USER2', 3, 2, '1234', '고희동', '010-0000-0002', 'user2@TestController.com', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO USERS(USER_ID, USER_CODE, SIGNUP_TYPE_ID, USER_PW, USER_NAME, USER_TEL, USER_EMAIL, EMAIL_CONSENT, CREATED_DATE)
VALUES('USER3', 4, 3, '1234', '고둘리', '010-0000-0003', 'user3@TestController.com', 1, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO USERS(USER_ID, USER_CODE, SIGNUP_TYPE_ID, USER_PW, USER_NAME, USER_TEL, USER_EMAIL, CREATED_DATE)
VALUES('USER4', 5, 1, '1234', '고또치', '010-0000-0004', 'user4@TestController.com', TO_DATE('2025-02-08', 'YYYY-MM-DD'));

SELECT *
FROM USERS;



--★ 닉네임 : 한글로만 2글자 이상~8글자 이하, 중복 불가
--○ NICKNAME_LOG
INSERT INTO NICKNAME_LOG(NICKNAME_LOG_ID, USER_CODE, NICKNAME, LAST_UPDATED_DATE)
VALUES(NICKNAME_LOG_SEQ.NEXTVAL, 1, '관리자넘버원', TO_DATE('2025-01-01', 'YYYY-MM-DD'));
INSERT INTO NICKNAME_LOG(NICKNAME_LOG_ID, USER_CODE, NICKNAME, LAST_UPDATED_DATE)
VALUES(NICKNAME_LOG_SEQ.NEXTVAL, 2, '가나초콜릿', TO_DATE('2025-02-01', 'YYYY-MM-DD'));
INSERT INTO NICKNAME_LOG(NICKNAME_LOG_ID, USER_CODE, NICKNAME, LAST_UPDATED_DATE)
VALUES(NICKNAME_LOG_SEQ.NEXTVAL, 3, '스키틀즈', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO NICKNAME_LOG(NICKNAME_LOG_ID, USER_CODE, NICKNAME, LAST_UPDATED_DATE)
VALUES(NICKNAME_LOG_SEQ.NEXTVAL, 4, '청포도사탕', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO NICKNAME_LOG(NICKNAME_LOG_ID, USER_CODE, NICKNAME, LAST_UPDATED_DATE)
VALUES(NICKNAME_LOG_SEQ.NEXTVAL, 5, '말랑카우', TO_DATE('2025-02-08', 'YYYY-MM-DD'));

SELECT *
FROM NICKNAME_LOG;



--○ ADDRESS_LOG
INSERT INTO ADDRESS_LOG(ADDRESS_ID, USER_CODE, ZIPCODE, ADDRESS, LAST_UPDATED_DATE)
VALUES(ADDRESS_LOG_SEQ.NEXTVAL, 2, '00001', '서울특별시 마포구', TO_DATE('2025-02-01', 'YYYY-MM-DD'));
INSERT INTO ADDRESS_LOG(ADDRESS_ID, USER_CODE, ZIPCODE, ADDRESS, LAST_UPDATED_DATE)
VALUES(ADDRESS_LOG_SEQ.NEXTVAL, 3, '00002', '서울특별시 서대문구', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO ADDRESS_LOG(ADDRESS_ID, USER_CODE, ZIPCODE, ADDRESS, LAST_UPDATED_DATE)
VALUES(ADDRESS_LOG_SEQ.NEXTVAL, 4, '00003', '서울특별시 영등포구', TO_DATE('2025-02-08', 'YYYY-MM-DD'));

SELECT *
FROM ADDRESS_LOG;


--○ ISSUED_COUPON
INSERT INTO ISSUED_COUPON(ISSUED_COUPON_ID, ADMIN_ID, COUPON_TYPE_ID, COUPON_NAME, COUPON_DISCOUNT, COUPON_MONTH, ISSUED_DATE)
VALUES(ISSUED_COUPON_SEQ.NEXTVAL, 'ADMIN1', 1, '등급 쿠폰(10% 할인)', 10, 12, TO_DATE('2025-01-01', 'YYYY-MM-DD'));
INSERT INTO ISSUED_COUPON(ISSUED_COUPON_ID, ADMIN_ID, COUPON_TYPE_ID, COUPON_NAME, COUPON_DISCOUNT, COUPON_MONTH, ISSUED_DATE)
VALUES(ISSUED_COUPON_SEQ.NEXTVAL, 'ADMIN1', 1, '가입 기념 쿠폰(보관비 30% 할인)', 30, 6, TO_DATE('2025-01-01', 'YYYY-MM-DD'));

SELECT *
FROM ISSUED_COUPON;



--○ OWNED_COUPON
INSERT INTO OWNED_COUPON(OWNED_COUPON_ID, USER_CODE, ISSUED_COUPON_ID)
VALUES(OWNED_COUPON_SEQ.NEXTVAL, 2, 1);
INSERT INTO OWNED_COUPON(OWNED_COUPON_ID, USER_CODE, ISSUED_COUPON_ID)
VALUES(OWNED_COUPON_SEQ.NEXTVAL, 2, 2);
INSERT INTO OWNED_COUPON(OWNED_COUPON_ID, USER_CODE, ISSUED_COUPON_ID)
VALUES(OWNED_COUPON_SEQ.NEXTVAL, 3, 1);
INSERT INTO OWNED_COUPON(OWNED_COUPON_ID, USER_CODE, ISSUED_COUPON_ID)
VALUES(OWNED_COUPON_SEQ.NEXTVAL, 4, 1);
INSERT INTO OWNED_COUPON(OWNED_COUPON_ID, USER_CODE, ISSUED_COUPON_ID)
VALUES(OWNED_COUPON_SEQ.NEXTVAL, 5, 1);

SELECT *
FROM OWNED_COUPON;



--○ POINT_LOG
INSERT INTO POINT_LOG(POINT_LOG_ID, USER_CODE, POINT_CHANGE_TYPE_ID, POINT_CHANGE, CREATED_DATE)
VALUES(POINT_LOG_SEQ.NEXTVAL, 2, 1, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POINT_LOG(POINT_LOG_ID, USER_CODE, POINT_CHANGE_TYPE_ID, POINT_CHANGE, CREATED_DATE)
VALUES(POINT_LOG_SEQ.NEXTVAL, 2, 1, 1, TO_DATE('2025-02-03', 'YYYY-MM-DD'));
INSERT INTO POINT_LOG(POINT_LOG_ID, USER_CODE, POINT_CHANGE_TYPE_ID, POINT_CHANGE, CREATED_DATE)
VALUES(POINT_LOG_SEQ.NEXTVAL, 2, 2, 5, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POINT_LOG(POINT_LOG_ID, USER_CODE, POINT_CHANGE_TYPE_ID, POINT_CHANGE, CREATED_DATE)
VALUES(POINT_LOG_SEQ.NEXTVAL, 2, 3, 10, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POINT_LOG(POINT_LOG_ID, USER_CODE, POINT_CHANGE_TYPE_ID, POINT_CHANGE, CREATED_DATE)
VALUES(POINT_LOG_SEQ.NEXTVAL, 2, 4, -5, TO_DATE('2025-02-05', 'YYYY-MM-DD'));

SELECT *
FROM POINT_LOG;



--○ EQUIP_CODE
INSERT INTO EQUIP_CODE(EQUIP_CODE) VALUES(EQUIP_CODE_SEQ.NEXTVAL);
INSERT INTO EQUIP_CODE(EQUIP_CODE) VALUES(EQUIP_CODE_SEQ.NEXTVAL);
INSERT INTO EQUIP_CODE(EQUIP_CODE) VALUES(EQUIP_CODE_SEQ.NEXTVAL);
INSERT INTO EQUIP_CODE(EQUIP_CODE) VALUES(EQUIP_CODE_SEQ.NEXTVAL);
INSERT INTO EQUIP_CODE(EQUIP_CODE) VALUES(EQUIP_CODE_SEQ.NEXTVAL);

SELECT *
FROM EQUIP_CODE;



--○ EQUIPMENT_REGISTRATION
INSERT INTO EQUIPMENT_REGISTRATION(EQUIP_ID, EQUIP_CODE, USER_CODE, CATEGORY_ID, EQUIP_NAME_ID, ORIGINAL_PRICE, CREATED_DATE)
VALUES(EQUIPMENT_REGISTRATION_SEQ.NEXTVAL, 1, 2, 9, 3, 3050000, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO EQUIPMENT_REGISTRATION(EQUIP_ID, EQUIP_CODE, USER_CODE, CATEGORY_ID, EQUIP_NAME_ID, ORIGINAL_PRICE, CREATED_DATE)
VALUES(EQUIPMENT_REGISTRATION_SEQ.NEXTVAL, 2, 2, 9, 2, 2000000, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO EQUIPMENT_REGISTRATION(EQUIP_ID, EQUIP_CODE, USER_CODE, CATEGORY_ID, EQUIP_NAME_ID, ORIGINAL_PRICE, CREATED_DATE)
VALUES(EQUIPMENT_REGISTRATION_SEQ.NEXTVAL, 3, 2, 9, 1, 100000, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO EQUIPMENT_REGISTRATION(EQUIP_ID, EQUIP_CODE, USER_CODE, CATEGORY_ID, EQUIP_NAME_ID, ORIGINAL_PRICE, CREATED_DATE)
VALUES(EQUIPMENT_REGISTRATION_SEQ.NEXTVAL, 4, 3, 9, 4, 600000, TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO EQUIPMENT_REGISTRATION(EQUIP_ID, EQUIP_CODE, USER_CODE, CATEGORY_ID, EQUIP_NAME_ID, ORIGINAL_PRICE, CREATED_DATE)
VALUES(EQUIPMENT_REGISTRATION_SEQ.NEXTVAL, 5, 3, 9, 5, 1500000, TO_DATE('2025-02-10', 'YYYY-MM-DD'));

SELECT *
FROM EQUIPMENT_REGISTRATION;



--○ STOREN
INSERT INTO STOREN(STOREN_ID, EQUIP_CODE, SIZE_ID, STORE_MONTH, CREATED_DATE)
VALUES(STOREN_SEQ.NEXTVAL, 1, 5, 6, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO STOREN(STOREN_ID, EQUIP_CODE, SIZE_ID, STORE_MONTH, CREATED_DATE)
VALUES(STOREN_SEQ.NEXTVAL, 2, 4, 3, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO STOREN(STOREN_ID, EQUIP_CODE, SIZE_ID, STORE_MONTH, CREATED_DATE)
VALUES(STOREN_SEQ.NEXTVAL, 3, 3, 3, TO_DATE('2025-02-05', 'YYYY-MM-DD'));

SELECT *
FROM STOREN;



--○ STORAGE
INSERT INTO STORAGE(STORAGE_ID, EQUIP_CODE, SIZE_ID, STORAGE_MONTH, CREATED_DATE)
VALUES(STORAGE_SEQ.NEXTVAL, 4, 4, 3, TO_DATE('2025-02-10', 'YYYY-MM-DD'));

SELECT *
FROM STORAGE;



--○ RENTAL
INSERT INTO RENTAL(RENTAL_ID, EQUIP_CODE, RENTAL_TITLE, RENT_CONTENT, RENT_START_WANT_DATE
                  , RENT_END_WANT_DATE, DAILY_RENT_PRICE, CREATED_DATE)
VALUES(RENTAL_SEQ.NEXTVAL, 5, '안녕하세요', '개인 렌탈입니다. 궁금하신 점 댓글로 문의주세요.'
      , TO_DATE('2025-02-10', 'YYYY-MM-DD'), TO_DATE('2025-04-30', 'YYYY-MM-DD'), 1000
      , TO_DATE('2025-02-10', 'YYYY-MM-DD'));


SELECT *
FROM RENTAL;



--○ RENTAL_REPLY
INSERT INTO RENTAL_REPLY(RENTAL_REPLY_ID, RENTAL_ID, USER_CODE, RENTAL_REPLY_CONTENT, CREATED_DATE)
VALUES(RENTAL_REPLY_SEQ.NEXTVAL, 1, 2, '개인렌탈 관심 있습니다. 사진 더 올려주세요', TO_DATE('2025-02-11', 'YYYY-MM-DD'));
INSERT INTO RENTAL_REPLY(RENTAL_REPLY_ID, RENTAL_ROOT_REPLY_ID, RENTAL_ID, USER_CODE, RENTAL_REPLY_CONTENT, CREATED_DATE)
VALUES(RENTAL_REPLY_SEQ.NEXTVAL, 1, 1, 3, '추가 사진 보시고 궁금한 거 있으시면 말씀주세요', TO_DATE('2025-02-12', 'YYYY-MM-DD'));

SELECT *
FROM RENTAL_REPLY;



--○ RENTAL_MATCHING_REQ
INSERT INTO RENTAL_MATCHING_REQ(RENTAL_MATCHING_REQ_ID, RENTAL_ID, RENTAL_MATCHING_REQUESTER_ID
                               , RENTAL_START_DATE, RENTAL_END_DATE, REQUESTED_DATE)
VALUES(RENTAL_MATCHING_REQ_SEQ.NEXTVAL, 1, 2, TO_DATE('2025-02-21', 'YYYY-MM-DD')
      , TO_DATE('2025-02-27', 'YYYY-MM-DD'), TO_DATE('2025-02-12', 'YYYY-MM-DD'));

SELECT *
FROM RENTAL_REPLY;



--○ RENTAL_MATCHING_DONE
INSERT INTO RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID, RENTAL_MATCHING_REQ_ID, APPROVED_DATE)
VALUES(RENTAL_MATCHING_DONE_SEQ.NEXTVAL, 1, TO_DATE('2025-02-13', 'YYYY-MM-DD'));

SELECT *
FROM RENTAL_MATCHING_DONE;



--○ RENTAL
-- 5-1렌탈(매칭 완료 후 글 재등록)
INSERT INTO RENTAL(
    RENTAL_ID, EQUIP_CODE, RENTAL_TITLE, RENT_CONTENT,
    RENT_START_WANT_DATE, RENT_END_WANT_DATE,
    DAILY_RENT_PRICE, CREATED_DATE
)
SELECT
    RENTAL_SEQ.NEXTVAL, R.EQUIP_CODE, R.RENTAL_TITLE,
    R.RENT_CONTENT, R.RENT_START_WANT_DATE, R.RENT_END_WANT_DATE,
    R.DAILY_RENT_PRICE, TO_DATE('2025-02-13', 'YYYY-MM-DD')
FROM RENTAL R
         JOIN RENTAL_MATCHING_REQ REQ ON R.RENTAL_ID = REQ.RENTAL_ID
         JOIN RENTAL_MATCHING_DONE RMD ON RMD.RENTAL_MATCHING_REQ_ID = REQ.RENTAL_MATCHING_REQ_ID
WHERE RMD.RENTAL_MATCHING_DONE_ID = 1;

SELECT *
FROM RENTAL;



--○ PAY
-- 1스토렌(보관비)
INSERT INTO PAY(PAY_ID, PAY_METHOD_ID, STOREN_ID, PAY_AMOUNT, PAY_DATE)
SELECT
    PAY_SEQ.NEXTVAL, 1, S.STOREN_ID, ES.DAILY_STORAGE_FEE * 30 * S.STORE_MONTH,
    TO_DATE('2025-02-05', 'YYYY-MM-DD')
FROM STOREN S
         JOIN EQUIP_SIZE ES ON S.SIZE_ID = ES.EQUIP_SIZE_ID
WHERE S.STOREN_ID = 1;

-- 2스토렌(보관비)
INSERT INTO PAY(PAY_ID, PAY_METHOD_ID, STOREN_ID, PAY_AMOUNT, PAY_DATE)
SELECT
    PAY_SEQ.NEXTVAL, 1, S.STOREN_ID, ES.DAILY_STORAGE_FEE * 30 * S.STORE_MONTH,
    TO_DATE('2025-02-05', 'YYYY-MM-DD')
FROM STOREN S
         JOIN EQUIP_SIZE ES ON S.SIZE_ID = ES.EQUIP_SIZE_ID
WHERE S.STOREN_ID = 2;

-- 3스토렌(보관비)
INSERT INTO PAY(PAY_ID, PAY_METHOD_ID, STOREN_ID, PAY_AMOUNT, PAY_DATE)
SELECT
    PAY_SEQ.NEXTVAL, 1, S.STOREN_ID, ES.DAILY_STORAGE_FEE * 30 * S.STORE_MONTH,
    TO_DATE('2025-02-05', 'YYYY-MM-DD')
FROM STOREN S
         JOIN EQUIP_SIZE ES ON S.SIZE_ID = ES.EQUIP_SIZE_ID
WHERE S.STOREN_ID = 3;

-- 4보관
INSERT INTO PAY(PAY_ID, PAY_METHOD_ID, STOREN_ID, PAY_AMOUNT, PAY_DATE)
SELECT
    PAY_SEQ.NEXTVAL, 1, S.STORAGE_ID, ES.DAILY_STORAGE_FEE * 30 * S.STORAGE_MONTH,
    TO_DATE('2025-02-10', 'YYYY-MM-DD')
FROM STORAGE S
         JOIN EQUIP_SIZE ES ON S.SIZE_ID = ES.EQUIP_SIZE_ID
WHERE S.STORAGE_ID = 1;

-- 5렌탈
INSERT INTO PAY(PAY_ID, PAY_METHOD_ID, RENTAL_MATCHING_DONE_ID, PAY_AMOUNT, PAY_DATE)
SELECT
    PAY_SEQ.NEXTVAL, 1, RMD.RENTAL_MATCHING_DONE_ID,
    R.DAILY_RENT_PRICE * (REQ.RENTAL_END_DATE - REQ.RENTAL_START_DATE),
    TO_DATE('2025-02-13', 'YYYY-MM-DD')
FROM RENTAL_MATCHING_DONE RMD
         JOIN RENTAL_MATCHING_REQ REQ ON RMD.RENTAL_MATCHING_REQ_ID = REQ.RENTAL_MATCHING_REQ_ID
         JOIN RENTAL R ON REQ.RENTAL_ID = R.RENTAL_ID
WHERE RMD.RENTAL_MATCHING_DONE_ID = 1;

SELECT *
FROM PAY;



--○ USERS_DELIVERY
INSERT INTO USERS_DELIVERY(USERS_DELIVERY_ID, PAY_ID, CARRIER_NAME, WAYBILL_NUMBER, WAYBILL_ENTRY_DATE)
VALUES(USERS_DELIVERY_SEQ.NEXTVAL, 5, '우체국택배', '0000000001', TO_DATE('2025-02-17', 'YYYY-MM-DD'));

SELECT *
FROM USERS_DELIVERY;



--○ USERS_DELIVERY_RETURN
INSERT INTO USERS_DELIVERY_RETURN(USERS_DELIVERY_RETURN_ID, USERS_DELIVERY_ID, CARRIER_NAME, WAYBILL_ENTRY_DATE)
VALUES(USERS_DELIVERY_RETURN_SEQ.NEXTVAL, 1, '대면 전달', TO_DATE('2025-02-28', 'YYYY-MM-DD'));

SELECT *
FROM USERS_DELIVERY_RETURN;



--○ SATISFACTION_LOG
INSERT INTO SATISFACTION_LOG(SATIS_LOG_ID, RENTAL_MATCHING_DONE_ID, REVIEWER_ID, REVIEWEE_ID, SATIS_SCORE, SATIS_COMMENT, CREATED_DATE)
VALUES(SATISFACTION_LOG_SEQ.NEXTVAL, 1, 2, 3, 4, '빠르게 결제해주시고, 반환해주셔서 감사합니다', TO_DATE('2025-02-28', 'YYYY-MM-DD'));

SELECT *
FROM SATISFACTION_LOG;



--○ PLATFORM_DELIVERY
-- 1스토렌(최초입고)
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 1, TO_DATE('2025-02-06', 'YYYY-MM-DD'));

UPDATE PLATFORM_DELIVERY
SET DELIVERY_END_DATE = TO_DATE('2025-02-10', 'YYYY-MM-DD')
WHERE PLATFORM_DELIVERY_ID = 1;

-- 2스토렌(최초입고)
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 2, TO_DATE('2025-02-06', 'YYYY-MM-DD'));

UPDATE PLATFORM_DELIVERY
SET DELIVERY_END_DATE = TO_DATE('2025-02-10', 'YYYY-MM-DD')
WHERE PLATFORM_DELIVERY_ID = 2;

-- 3스토렌(최초입고)
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 3, TO_DATE('2025-02-06', 'YYYY-MM-DD'));

UPDATE PLATFORM_DELIVERY
SET DELIVERY_END_DATE = TO_DATE('2025-02-10', 'YYYY-MM-DD')
WHERE PLATFORM_DELIVERY_ID = 3;

-- 4보관
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 4, TO_DATE('2025-02-11', 'YYYY-MM-DD'));

UPDATE PLATFORM_DELIVERY
SET DELIVERY_END_DATE = TO_DATE('2025-02-15', 'YYYY-MM-DD')
WHERE PLATFORM_DELIVERY_ID = 4;

SELECT *
FROM PLATFORM_DELIVERY;



--○ INSPEC_LIST
-- 1스토렌(최초입고)
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 1, 'ADMIN1', 2, '외관에 주름이 약간 있음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 1, 'ADMIN1', 2, '텐트 하단 약간 찢어짐', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 1, 'ADMIN1', 1, '청결도 우수함', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 1, 'ADMIN1', 1, '부속품 모두 포함되어 있음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 1, 'ADMIN1', 2, '지퍼가 약간 뻑뻑함', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 2스토렌(최초입고)
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 2, 'ADMIN1', 2, '사용감 약간 있고 천 일부 마모됨', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 2, 'ADMIN1', 3, '심각한 휨 있음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 2, 'ADMIN1', 2, '내부에 곰팡이가 약간 있음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 2, 'ADMIN1', 1, '부속품 모두 포함되어 있음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 2, 'ADMIN1', 2, '고정력 떨어짐', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 3스토렌(최초입고)
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 3, 'ADMIN1', 1, '사용감 없음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 3, 'ADMIN1', 1, '손상 없음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 3, 'ADMIN1', 1, '청결함', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 3, 'ADMIN1', 2, '스트링 없음', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 3, 'ADMIN1', 1, '기능 정상', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 4보관
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 4, 'ADMIN1', 2, '사용감 있으며 변색', TO_DATE('2025-02-15', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 4, 'ADMIN1', 1, '손상 없음', TO_DATE('2025-02-15', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 4, 'ADMIN1', 2, '겉면에 큰 얼룩이 있음', TO_DATE('2025-02-15', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 4, 'ADMIN1', 1, '부속품 누락 없음', TO_DATE('2025-02-15', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 4, 'ADMIN1', 1, '기능 정상', TO_DATE('2025-02-15', 'YYYY-MM-DD'));

SELECT *
FROM INSPEC_LIST;



--○ INSPEC_RESULT
-- 1스토렌(최초입고)
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 1, 3);
-- 2스토렌(최초입고)
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 2, 4);
-- 3스토렌(최초입고)
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 3, 1);
-- 4보관
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 4, 2);

SELECT *
FROM INSPEC_RESULT;



--○ INSPEC_RESULT_ACTION
-- 1스토렌(최초입고)
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 1, 1, TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 2스토렌(최초입고)
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 2, 1, TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 3스토렌(최초입고)
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 3, 1, TO_DATE('2025-02-10', 'YYYY-MM-DD'));
-- 4보관
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 4, 2, TO_DATE('2025-02-15', 'YYYY-MM-DD'));

SELECT *
FROM INSPEC_RESULT_ACTION;



--○ STOREN_IRA (검수처리결과를 기존 STOREN_ID에 연결)
-- 1스토렌
INSERT INTO STOREN_IRA (STOREN_IRA_ID, INSPEC_RESULT_ACTION_ID, STOREN_ID)
VALUES (STOREN_IRA_SEQ.NEXTVAL, 1, 1);
-- 2스토렌
INSERT INTO STOREN_IRA (STOREN_IRA_ID, INSPEC_RESULT_ACTION_ID, STOREN_ID)
VALUES (STOREN_IRA_SEQ.NEXTVAL, 2, 2);
-- 3스토렌
INSERT INTO STOREN_IRA (STOREN_IRA_ID, INSPEC_RESULT_ACTION_ID, STOREN_ID)
VALUES (STOREN_IRA_SEQ.NEXTVAL, 3, 3);

SELECT *
FROM STOREN_IRA;



--○ STOREN (렌탈 관련 내용 업데이트)
-- 1스토렌(최초입고)
UPDATE STOREN
SET STOREN_TITLE = '스토렌 장비 렌탈 제목 1'
  , STOREN_CONTENT = '스토렌 장비 렌탈 내용 1'
  , DAILY_RENT_PRICE = 25000
WHERE STOREN_ID = 1;

-- 2스토렌(최초입고)
UPDATE STOREN
SET STOREN_TITLE = '스토렌 장비 렌탈 제목 2'
  , STOREN_CONTENT = '스토렌 장비 렌탈 내용 2'
  , DAILY_RENT_PRICE = 20000
WHERE STOREN_ID = 2;

-- 3스토렌(최초입고)
UPDATE STOREN
SET STOREN_TITLE = '스토렌 장비 렌탈 제목 3'
  , STOREN_CONTENT = '스토렌 장비 렌탈 내용 3'
  , DAILY_RENT_PRICE = 5000
WHERE STOREN_ID = 3;

SELECT *
FROM STOREN;



--○ STORAGE_LAST_RETURN
-- 4보관
INSERT INTO STORAGE_LAST_RETURN(
    STORAGE_LAST_RETURN_ID, STORAGE_ID, INSPEC_RESULT_ACTION_ID, DELIVERY_START_DATE
)
VALUES (
           STORAGE_LAST_RETURN_SEQ.NEXTVAL, 1, 4,
           TO_DATE('2025-02-15', 'YYYY-MM-DD') + (
               SELECT STORAGE_MONTH * 30 FROM STORAGE
               WHERE STORAGE_ID = 1
           )
       );

UPDATE STORAGE_LAST_RETURN
SET DELIVERY_END_DATE = TO_DATE('2025-05-20', 'YYYY-MM-DD')
WHERE STORAGE_LAST_RETURN_ID = 1;

SELECT *
FROM STORAGE_LAST_RETURN;



--○ STOREN_MATCHING_REQ
-- 1스토렌
INSERT INTO STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID, STOREN_MATCHING_REQ_USER_ID
                               , STOREN_IRA_ID, RENTAL_START_DATE, RENTAL_END_DATE, REQUESTED_DATE)
VALUES(STOREN_MATCHING_REQ_SEQ.NEXTVAL, 3, 1, TO_DATE('2025-04-01', 'YYYY-MM-DD')
      , TO_DATE('2025-04-07', 'YYYY-MM-DD'), TO_DATE('2025-03-20', 'YYYY-MM-DD'));
-- 2스토렌
INSERT INTO STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID, STOREN_MATCHING_REQ_USER_ID
                               , STOREN_IRA_ID, RENTAL_START_DATE, RENTAL_END_DATE, REQUESTED_DATE)
VALUES(STOREN_MATCHING_REQ_SEQ.NEXTVAL, 3, 2, TO_DATE('2025-04-10', 'YYYY-MM-DD')
      , TO_DATE('2025-04-15', 'YYYY-MM-DD'), TO_DATE('2025-03-25', 'YYYY-MM-DD'));

SELECT *
FROM STOREN_MATCHING_REQ;



--○ STOREN_MATCHING_DONE
-- 1스토렌
INSERT INTO STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID, STOREN_MATCHING_REQ_ID, APPROVED_DATE)
VALUES(STOREN_MATCHING_DONE_SEQ.NEXTVAL, 1, TO_DATE('2025-03-21', 'YYYY-MM-DD'));
-- 2스토렌
INSERT INTO STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID, STOREN_MATCHING_REQ_ID, APPROVED_DATE)
VALUES(STOREN_MATCHING_DONE_SEQ.NEXTVAL, 2, TO_DATE('2025-03-26', 'YYYY-MM-DD'));

SELECT *
FROM STOREN_MATCHING_DONE;



--○ STOREN
-- 1-1스토렌(매칭 완료 후 글 재등록)
INSERT INTO STOREN
( STOREN_ID,EQUIP_CODE, SIZE_ID, STORE_MONTH, STOREN_TITLE, STOREN_CONTENT, DAILY_RENT_PRICE, CREATED_DATE)
SELECT
    STOREN_SEQ.NEXTVAL, S.EQUIP_CODE, S.SIZE_ID, S.STORE_MONTH,
    S.STOREN_TITLE, S.STOREN_CONTENT, S.DAILY_RENT_PRICE,
    TO_DATE('2025-03-21', 'YYYY-MM-DD')
FROM STOREN S
         JOIN STOREN_IRA SI ON S.STOREN_ID = SI.STOREN_ID
         JOIN INSPEC_RESULT_ACTION IRA ON IRA.INSPEC_RESULT_ACTION_ID = SI.INSPEC_RESULT_ACTION_ID
         JOIN STOREN_MATCHING_REQ SMR ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         JOIN STOREN_MATCHING_DONE SMD ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
WHERE SMD.STOREN_MATCHING_DONE_ID = 1;
-- 2-1스토렌(매칭 완료 후 글 재등록)
INSERT INTO STOREN
( STOREN_ID,EQUIP_CODE, SIZE_ID, STORE_MONTH, STOREN_TITLE, STOREN_CONTENT, DAILY_RENT_PRICE, CREATED_DATE)
SELECT
    STOREN_SEQ.NEXTVAL, S.EQUIP_CODE, S.SIZE_ID, S.STORE_MONTH,
    S.STOREN_TITLE, S.STOREN_CONTENT, S.DAILY_RENT_PRICE,
    TO_DATE('2025-03-26', 'YYYY-MM-DD')
FROM STOREN S
         JOIN STOREN_IRA SI ON S.STOREN_ID = SI.STOREN_ID
         JOIN INSPEC_RESULT_ACTION IRA ON IRA.INSPEC_RESULT_ACTION_ID = SI.INSPEC_RESULT_ACTION_ID
         JOIN STOREN_MATCHING_REQ SMR ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         JOIN STOREN_MATCHING_DONE SMD ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
WHERE SMD.STOREN_MATCHING_DONE_ID = 2;

SELECT *
FROM STOREN;



--○ STOREN_IRA (검수처리결과를 신규 STOREN_ID에 연결)
-- 1-1스토렌
INSERT INTO STOREN_IRA (STOREN_IRA_ID, INSPEC_RESULT_ACTION_ID, STOREN_ID)
VALUES (STOREN_IRA_SEQ.NEXTVAL, 1, 4);
-- 2-1스토렌
INSERT INTO STOREN_IRA (STOREN_IRA_ID, INSPEC_RESULT_ACTION_ID, STOREN_ID)
VALUES (STOREN_IRA_SEQ.NEXTVAL, 2, 5);

SELECT *
FROM STOREN_IRA;



--○ STOREN_MATCHING_REQ
-- 2-1스토렌
INSERT INTO STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID, STOREN_MATCHING_REQ_USER_ID,
                                STOREN_IRA_ID, RENTAL_START_DATE, RENTAL_END_DATE, REQUESTED_DATE)
VALUES(STOREN_MATCHING_REQ_SEQ.NEXTVAL, 3, 5, TO_DATE('2025-05-01', 'YYYY-MM-DD')
      , TO_DATE('2025-05-07', 'YYYY-MM-DD'), TO_DATE('2025-03-26', 'YYYY-MM-DD'));

SELECT *
FROM STOREN_MATCHING_REQ;



--○ STOREN_MATCHING_DONE
-- 2-1스토렌
INSERT INTO STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID, STOREN_MATCHING_REQ_ID, APPROVED_DATE)
VALUES(STOREN_MATCHING_DONE_SEQ.NEXTVAL, 3, TO_DATE('2025-03-26', 'YYYY-MM-DD'));

SELECT *
FROM STOREN_MATCHING_DONE;



--○ STOREN
-- 2-2스토렌(매칭 완료 후 글 재등록)
INSERT INTO STOREN
( STOREN_ID,EQUIP_CODE, SIZE_ID, STORE_MONTH, STOREN_TITLE, STOREN_CONTENT, DAILY_RENT_PRICE, CREATED_DATE)
SELECT
    STOREN_SEQ.NEXTVAL, S.EQUIP_CODE, S.SIZE_ID, S.STORE_MONTH,
    S.STOREN_TITLE, S.STOREN_CONTENT, S.DAILY_RENT_PRICE,
    TO_DATE('2025-03-26', 'YYYY-MM-DD')
FROM STOREN S
         JOIN STOREN_IRA SI ON S.STOREN_ID = SI.STOREN_ID
         JOIN INSPEC_RESULT_ACTION IRA ON IRA.INSPEC_RESULT_ACTION_ID = SI.INSPEC_RESULT_ACTION_ID
         JOIN STOREN_MATCHING_REQ SMR ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         JOIN STOREN_MATCHING_DONE SMD ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
WHERE SMD.STOREN_MATCHING_DONE_ID = 3;

SELECT *
FROM STOREN;



--○ PAY
-- 1스토렌(렌탈비)
INSERT INTO PAY (PAY_ID, PAY_METHOD_ID, PAY_AMOUNT, PAY_DATE, STOREN_ID, STOREN_MATCHING_DONE_ID)
SELECT PAY_SEQ.NEXTVAL, 1, S.DAILY_RENT_PRICE * (TRUNC(SMR.RENTAL_END_DATE) - TRUNC(SMR.RENTAL_START_DATE)),
       TO_DATE('2025-03-22', 'YYYY-MM-DD'), S.STOREN_ID, SMD.STOREN_MATCHING_DONE_ID
FROM
    STOREN_MATCHING_DONE SMD
        JOIN STOREN_MATCHING_REQ SMR ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
        JOIN STOREN_IRA SI ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
        JOIN STOREN S ON SI.STOREN_ID = S.STOREN_ID
WHERE
    SMD.STOREN_MATCHING_DONE_ID = 1;
-- 2스토렌(렌탈비)
INSERT INTO PAY (PAY_ID, PAY_METHOD_ID, PAY_AMOUNT, PAY_DATE, STOREN_ID, STOREN_MATCHING_DONE_ID)
SELECT PAY_SEQ.NEXTVAL, 1, S.DAILY_RENT_PRICE * (TRUNC(SMR.RENTAL_END_DATE) - TRUNC(SMR.RENTAL_START_DATE)),
       TO_DATE('2025-03-27', 'YYYY-MM-DD'), S.STOREN_ID, SMD.STOREN_MATCHING_DONE_ID
FROM
    STOREN_MATCHING_DONE SMD
        JOIN STOREN_MATCHING_REQ SMR ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
        JOIN STOREN_IRA SI ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
        JOIN STOREN S ON SI.STOREN_ID = S.STOREN_ID
WHERE
    SMD.STOREN_MATCHING_DONE_ID = 2;
-- 2-1스토렌(렌탈비)
INSERT INTO PAY (PAY_ID, PAY_METHOD_ID, PAY_AMOUNT, PAY_DATE, STOREN_ID, STOREN_MATCHING_DONE_ID)
SELECT PAY_SEQ.NEXTVAL, 1, S.DAILY_RENT_PRICE * (TRUNC(SMR.RENTAL_END_DATE) - TRUNC(SMR.RENTAL_START_DATE)),
       TO_DATE('2025-03-28', 'YYYY-MM-DD'), S.STOREN_ID, SMD.STOREN_MATCHING_DONE_ID
FROM
    STOREN_MATCHING_DONE SMD
        JOIN STOREN_MATCHING_REQ SMR ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
        JOIN STOREN_IRA SI ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
        JOIN STOREN S ON SI.STOREN_ID = S.STOREN_ID
WHERE
    SMD.STOREN_MATCHING_DONE_ID = 3;

SELECT *
FROM PAY;



--○ PLATFORM_DELIVERY
-- 1스토렌(렌탈 배송)
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE, DELIVERY_END_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 6, TO_DATE('2025-03-28', 'YYYY-MM-DD'), TO_DATE('2025-03-31', 'YYYY-MM-DD'));
-- 2스토렌(렌탈 배송)
INSERT INTO PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID, PAY_ID, DELIVERY_START_DATE, DELIVERY_END_DATE)
VALUES(PLATFORM_DELIVERY_SEQ.NEXTVAL, 7, TO_DATE('2025-04-05', 'YYYY-MM-DD'), TO_DATE('2025-04-09', 'YYYY-MM-DD'));

SELECT *
FROM PLATFORM_DELIVERY;



--○ PLATFORM_DELIVERY_RETURN
-- 1스토렌(렌탈 후 반납)
INSERT INTO PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID, PLATFORM_DELIVERY_ID, DELIVERY_START_DATE, DELIVERY_END_DATE)
VALUES(PLATFORM_DELIVERY_RETURN_SEQ.NEXTVAL, 5, TO_DATE('2025-04-08', 'YYYY-MM-DD'), TO_DATE('2025-04-12', 'YYYY-MM-DD'));
-- 2스토렌(렌탈 후 반납)
INSERT INTO PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID, PLATFORM_DELIVERY_ID, DELIVERY_START_DATE, DELIVERY_END_DATE)
VALUES(PLATFORM_DELIVERY_RETURN_SEQ.NEXTVAL, 6, TO_DATE('2025-04-16', 'YYYY-MM-DD'), TO_DATE('2025-04-18', 'YYYY-MM-DD'));

SELECT *
FROM PLATFORM_DELIVERY_RETURN;



--○ INSPEC_LIST
-- 1스토렌(렌탈 후 반납)
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 1, 'ADMIN1', 2, '외관에 주름이 약간 있음', TO_DATE('2025-04-13', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 1, 'ADMIN1', 2, '텐트 하단 약간 찢어짐', TO_DATE('2025-04-13', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 1, 'ADMIN1', 2, '약간의 얼룩 있음', TO_DATE('2025-04-13', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 1, 'ADMIN1', 1, '부속품 모두 포함되어 있음', TO_DATE('2025-04-13', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 1, 'ADMIN1', 2, '지퍼가 약간 뻑뻑함', TO_DATE('2025-04-13', 'YYYY-MM-DD'));
-- 2스토렌(렌탈 후 반납)
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 1, 2, 'ADMIN1', 2, '사용감 약간 있고 천 일부 마모됨', TO_DATE('2025-04-17', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 2, 2, 'ADMIN1', 3, '심각한 휨 있음', TO_DATE('2025-04-17', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 3, 2, 'ADMIN1', 2, '내부에 곰팡이가 약간 있음', TO_DATE('2025-04-17', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 4, 2, 'ADMIN1', 3, '팩 대부분과 매뉴얼 없어짐', TO_DATE('2025-04-17', 'YYYY-MM-DD'));
INSERT INTO INSPEC_LIST(INSPEC_LIST_ID, CATE_INSPEC_ID, PLATFORM_DELIVERY_RETURN_ID, ADMIN_ID, INSPEC_GRADE_ID, INSPEC_COMMENT, INSPECTION_DATE)
VALUES(INSPEC_LIST_SEQ.NEXTVAL, 5, 2, 'ADMIN1', 2, '고정력 떨어짐', TO_DATE('2025-04-17', 'YYYY-MM-DD'));

SELECT *
FROM INSPEC_LIST;



--○ INSPEC_RESULT
-- 1스토렌(렌탈 후 반납)
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_RETURN_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 1, 3);
-- 2스토렌(렌탈 후 반납)
INSERT INTO INSPEC_RESULT(INSPEC_RESULT_ID, PLATFORM_DELIVERY_RETURN_ID, EQUIP_GRADE_ID)
VALUES(INSPEC_RESULT_SEQ.NEXTVAL, 2, 5);

SELECT *
FROM INSPEC_RESULT;



--○ INSPEC_RESULT_ACTION
-- 1스토렌(렌탈 후 반납)
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 5, 1, TO_DATE('2025-04-13', 'YYYY-MM-DD'));
-- 2스토렌(렌탈 후 반납)
INSERT INTO INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID, INSPEC_RESULT_ID, INSPEC_RESULT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(INSPEC_RESULT_ACTION_SEQ.NEXTVAL, 6, 1, TO_DATE('2025-04-17', 'YYYY-MM-DD'));

SELECT *
FROM INSPEC_RESULT_ACTION;



--○ RENTER_PROBLEM
-- 2스토렌(파손 문제 확인)
INSERT INTO RENTER_PROBLEM(RENTER_PROBLEM_ID, INSPEC_RESULT_ACTION_ID, RENTER_PROBLEM_TYPE_ID, PROBLEM_REPORTED_DATE)
VALUES(RENTER_PROBLEM_SEQ.NEXTVAL, 6, 2, TO_DATE('2025-04-17', 'YYYY-MM-DD'));

SELECT *
FROM RENTER_PROBLEM;



--○ PAY_CANCEL
-- 2-1스토렌(결제 취소)
INSERT INTO PAY_CANCEL(PAY_CANCEL_ID, PAY_ID, PAY_CANCEL_REASON_ID, CANCEL_DATE)
VALUES(PAY_CANCEL_SEQ.NEXTVAL, 7, 6, TO_DATE('2025-04-17', 'YYYY-MM-DD'));

SELECT *
FROM PAY_CANCEL;



--○ STOREN
-- 2-2스토렌(미매칭된 렌탈 글 삭제)
DELETE
FROM STOREN
WHERE STOREN_ID=6;



--○ RENTER_ADD_PAY
-- 2스토렌(추가 비용 결제)
INSERT INTO RENTER_ADD_PAY (RENTER_ADD_PAY_ID, RENTER_PROBLEM_ID, RENTER_ADD_PAY_AMOUNT, PAY_DATE)
SELECT
    RENTER_ADD_PAY_SEQ.NEXTVAL,
    RP.RENTER_PROBLEM_ID,
    ROUND(ER.ORIGINAL_PRICE * 0.2 * (IR_RETURN.EQUIP_GRADE_ID - IR_PREV.EQUIP_GRADE_ID)),
    TO_DATE('2025-04-20', 'YYYY-MM-DD')
FROM RENTER_PROBLEM RP
         JOIN INSPEC_RESULT_ACTION IRA_RETURN
              ON RP.INSPEC_RESULT_ACTION_ID = IRA_RETURN.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT IR_RETURN
              ON IRA_RETURN.INSPEC_RESULT_ID = IR_RETURN.INSPEC_RESULT_ID
         JOIN PLATFORM_DELIVERY_RETURN PDR
              ON IR_RETURN.PLATFORM_DELIVERY_RETURN_ID = PDR.PLATFORM_DELIVERY_RETURN_ID
         JOIN PLATFORM_DELIVERY PD
              ON PDR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         JOIN PAY PAY_RENTAL
              ON PD.PAY_ID = PAY_RENTAL.PAY_ID
         JOIN STOREN_MATCHING_DONE SMD
              ON PAY_RENTAL.STOREN_MATCHING_DONE_ID = SMD.STOREN_MATCHING_DONE_ID
         JOIN STOREN_MATCHING_REQ SMR
              ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
         JOIN STOREN_IRA SI
              ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         JOIN INSPEC_RESULT_ACTION IRA_PREV
              ON IRA_PREV.INSPEC_RESULT_ACTION_ID = SI.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT IR_PREV
              ON IRA_PREV.INSPEC_RESULT_ID = IR_PREV.INSPEC_RESULT_ID
         JOIN PLATFORM_DELIVERY PD_PREV
              ON IR_PREV.PLATFORM_DELIVERY_ID = PD_PREV.PLATFORM_DELIVERY_ID
         JOIN PAY PAY_STOREN
              ON PD_PREV.PAY_ID = PAY_STOREN.PAY_ID
         JOIN STOREN S
              ON PAY_STOREN.STOREN_ID = S.STOREN_ID
         JOIN EQUIPMENT_REGISTRATION ER
              ON ER.EQUIP_CODE = S.EQUIP_CODE
WHERE RP.RENTER_PROBLEM_ID = 1;

SELECT *
FROM RENTER_ADD_PAY;


---------------------------------
--○ WISHLIST
INSERT INTO WISHLIST(WISHLIST_ID, USER_CODE, RENTAL_ID, CREATED_DATE)
VALUES(WISHLIST_SEQ.NEXTVAL, 2, 1, TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO WISHLIST(WISHLIST_ID, USER_CODE, STOREN_ID, CREATED_DATE)
VALUES(WISHLIST_SEQ.NEXTVAL, 3, 1, TO_DATE('2025-02-09', 'YYYY-MM-DD'));
INSERT INTO WISHLIST(WISHLIST_ID, USER_CODE, STOREN_ID, CREATED_DATE)
VALUES(WISHLIST_SEQ.NEXTVAL, 3, 2, TO_DATE('2025-02-09', 'YYYY-MM-DD'));

SELECT *
FROM WISHLIST;



--○ BOOST_LOG
INSERT INTO BOOST_LOG(BOOST_LOG_ID, STOREN_ID, BOOST_LOG_DATE)
VALUES(BOOST_LOG_SEQ.NEXTVAL, 1, TO_DATE('2025-02-06', 'YYYY-MM-DD'));
INSERT INTO BOOST_LOG(BOOST_LOG_ID, RENTAL_ID, BOOST_LOG_DATE)
VALUES(BOOST_LOG_SEQ.NEXTVAL, 1, TO_DATE('2025-02-11', 'YYYY-MM-DD'));
INSERT INTO BOOST_LOG(BOOST_LOG_ID, STOREN_ID, BOOST_LOG_DATE)
VALUES(BOOST_LOG_SEQ.NEXTVAL, 3, TO_DATE('2025-02-11', 'YYYY-MM-DD'));

SELECT *
FROM BOOST_LOG;



--○ POST
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 1, 1, '공지사항 제목입니다', '공지사항 내용(수정 예정)', TO_DATE('2025-01-01', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 1, 2, '서비스 소개 제목입니다', '서비스 소개 내용(수정 예정)', TO_DATE('2025-01-01', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_LABEL_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 2, 7, 9, '첫 인사드립니다', '잘 부탁 드려요', TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_LABEL_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 3, 7, 10, '이렇게 쓰는 거 맞나요', '안녕하세요, 게시글 처음 작성해봐요', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_TITLE, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 2, 10, '고독한 한 컷', TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_LABEL_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 2, 8, 12, '좋은 캠핑장 추천 드립니다', 'OO캠핑장 좋아요', TO_DATE('2025-02-10', 'YYYY-MM-DD'));
INSERT INTO POST(POST_ID, USER_CODE, BOARD_ID, POST_LABEL_ID, POST_TITLE, POST_CONTENT, CREATED_DATE)
VALUES(POST_SEQ.NEXTVAL, 3, 2, 10, '초보 캠퍼 질문 드립니다', '입문자용으로 OO텐트 괜찮을까요?', TO_DATE('2025-02-15', 'YYYY-MM-DD'));


SELECT *
FROM POST;

SELECT *
FROM BOARD;

SELECT *
FROM POST_LABEL;



--○ DIARY
INSERT INTO DIARY(DIARY_ID, USER_CODE, DIARY_TITLE, DIARY_CONTENT, CAMPING_DATE, LATITUDE, LONGITUDE, DIARY_WEATHER, CREATED_DATE)
VALUES(DIARY_SEQ.NEXTVAL, 2, '캠핑일지 제목입니다', '캠핑일지 내용입니다', TO_DATE('2025-01-31', 'YYYY-MM-DD'), 37.556544, 126.919548, '춥지도 덥지도 않은 좋은 날씨', TO_DATE('2025-02-05', 'YYYY-MM-DD'));

SELECT *
FROM DIARY;



--○ HOT_POST_LOG
INSERT INTO HOT_POST_LOG(HOT_POST_LOG_ID, POST_ID, CREATED_DATE)
VALUES(HOT_POST_LOG_SEQ.NEXTVAL, 3, TO_DATE('2025-02-03', 'YYYY-MM-DD'));

SELECT *
FROM HOT_POST_LOG;



--○ POST_VIEW_LOG
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 2, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 2, 2, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 3, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 2, 3, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 2, 5, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 3, 3, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO POST_VIEW_LOG(POST_VIEW_LOG_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(POST_VIEW_LOG_SEQ.NEXTVAL, 3, 4, TO_DATE('2025-02-08', 'YYYY-MM-DD'));

SELECT *
FROM POST_VIEW_LOG;



--○ RECOMMEND
INSERT INTO RECOMMEND(RECOMMEND_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(RECOMMEND_SEQ.NEXTVAL, 3, 3, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO RECOMMEND(RECOMMEND_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(RECOMMEND_SEQ.NEXTVAL, 3, 5, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO RECOMMEND(RECOMMEND_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(RECOMMEND_SEQ.NEXTVAL, 2, 4, TO_DATE('2025-02-10', 'YYYY-MM-DD'));

SELECT *
FROM RECOMMEND;



--○ REPLY
INSERT INTO REPLY(REPLY_ID, USER_CODE, POST_ID, REPLY_CONTENT, CREATED_DATE)
VALUES(REPLY_SEQ.NEXTVAL, 3, 3, '반갑습니다~', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO REPLY(REPLY_ID, ROOT_REPLY_ID, USER_CODE, POST_ID, REPLY_CONTENT, CREATED_DATE)
VALUES(REPLY_SEQ.NEXTVAL, 1, 2, 3, '넵 댓글 감사합니다!', TO_DATE('2025-02-09', 'YYYY-MM-DD'));
INSERT INTO REPLY(REPLY_ID, USER_CODE, POST_ID, REPLY_CONTENT, CREATED_DATE)
VALUES(REPLY_SEQ.NEXTVAL, 3, 5, '멋진 사진이네요', TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO REPLY(REPLY_ID, USER_CODE, POST_ID, REPLY_CONTENT, CREATED_DATE)
VALUES(REPLY_SEQ.NEXTVAL, 3, 7, '다들 답변 많이 달아주세요~', TO_DATE('2025-02-15', 'YYYY-MM-DD'));

SELECT *
FROM REPLY;



--○ BOOKMARK
INSERT INTO BOOKMARK(BOOKMARK_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(BOOKMARK_SEQ.NEXTVAL, 2, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));
INSERT INTO BOOKMARK(BOOKMARK_ID, USER_CODE, POST_ID, CREATED_DATE)
VALUES(BOOKMARK_SEQ.NEXTVAL, 3, 5, TO_DATE('2025-02-08', 'YYYY-MM-DD'));

SELECT *
FROM BOOKMARK;



--○ EVENT
INSERT INTO EVENT(EVENT_ID, ADMIN_ID, BOARD_ID, EVENT_TITLE, EVENT_CONTENT, EVENT_START_DATE, EVENT_END_DATE, CREATED_DATE)
VALUES(EVENT_SEQ.NEXTVAL, 'ADMIN1', 3, '첫번째 이벤트 제목입니다', '첫번째 이벤트 내용(수정 예정)'
      , TO_DATE('2025-01-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'), TO_DATE('2025-01-01', 'YYYY-MM-DD'));
INSERT INTO EVENT(EVENT_ID, ADMIN_ID, BOARD_ID, EVENT_TITLE, EVENT_CONTENT, EVENT_START_DATE, EVENT_END_DATE, CREATED_DATE)
VALUES(EVENT_SEQ.NEXTVAL, 'ADMIN1', 3, '두번째 이벤트 제목입니다', '두번째 이벤트 내용(수정 예정)'
      , TO_DATE('2025-02-01', 'YYYY-MM-DD'), TO_DATE('2025-04-30', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'));

SELECT *
FROM EVENT;



--○ EVENT_ENTRY
INSERT INTO EVENT_ENTRY(EVENT_ENTRY_ID, EVENT_ID, USER_CODE, EVENT_ENTRY_POINT, CREATED_DATE)
VALUES(EVENT_ENTRY_SEQ.NEXTVAL, 1, 2, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));

SELECT *
FROM EVENT_ENTRY;



--○ EVENT_WIN
INSERT INTO EVENT_WIN(EVENT_WIN_ID, EVENT_ENTRY_ID)
VALUES(EVENT_WIN_SEQ.NEXTVAL, 1);

SELECT *
FROM EVENT_WIN;



--○ NOTI
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 2, 1, TO_DATE('2025-02-03', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 2, 2, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 2, 4, TO_DATE('2025-02-11', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 2, 6, TO_DATE('2025-02-13', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 3, 5, TO_DATE('2025-02-16', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 3, 8, TO_DATE('2025-02-18', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 4, 10, TO_DATE('2025-02-18', 'YYYY-MM-DD'));
INSERT INTO NOTI(NOTI_ID, USER_CODE, NOTI_TYPE_ID, CREATED_DATE)
VALUES(NOTI_SEQ.NEXTVAL, 2, 2, TO_DATE('2025-03-01', 'YYYY-MM-DD'));

SELECT *
FROM NOTI;

SELECT *
FROM NOTI_TYPE;



--○ NOTI_CHECK_LOG
INSERT INTO NOTI_CHECK_LOG(NOTI_CHECK_LOG_ID, NOTI_ID, CHECKED_DATE)
VALUES(NOTI_CHECK_LOG_SEQ.NEXTVAL, 1, TO_DATE('2025-02-04', 'YYYY-MM-DD'));
INSERT INTO NOTI_CHECK_LOG(NOTI_CHECK_LOG_ID, NOTI_ID, CHECKED_DATE)
VALUES(NOTI_CHECK_LOG_SEQ.NEXTVAL, 2, TO_DATE('2025-02-08', 'YYYY-MM-DD'));
INSERT INTO NOTI_CHECK_LOG(NOTI_CHECK_LOG_ID, NOTI_ID, CHECKED_DATE)
VALUES(NOTI_CHECK_LOG_SEQ.NEXTVAL, 3, TO_DATE('2025-02-17', 'YYYY-MM-DD'));

SELECT *
FROM NOTI_CHECK_LOG;



--○ POST_REPORT
INSERT INTO POST_REPORT(POST_REPORT_ID, REPORTER_ID, POST_ID, REPORT_TYPE_ID, REPORT_CONTENT, REPORTED_DATE)
VALUES(POST_REPORT_SEQ.NEXTVAL, 4, 6, 2, '장비 게시판인데 캠핑장 추천 내용이 작성되어있습니다.', TO_DATE('2025-02-11', 'YYYY-MM-DD'));

SELECT *
FROM POST_REPORT;

SELECT *
FROM REPORT_TYPE;

SELECT *
FROM POST;



--○ POST_REPORT_ACTION
INSERT INTO POST_REPORT_ACTION(POST_REPORT_ACTION_ID, ADMIN_ID, POST_REPORT_ID, REPORT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(POST_REPORT_ACTION_SEQ.NEXTVAL, 'ADMIN1', 1, 1, TO_DATE('2025-02-13', 'YYYY-MM-DD'));

SELECT *
FROM POST_REPORT_ACTION;

SELECT *
FROM REPORT_ACTION_TYPE;



--○ REPLY_REPORT
INSERT INTO REPLY_REPORT(REPLY_REPORT_ID, REPORTER_ID, REPLY_ID, REPORT_TYPE_ID, REPORT_CONTENT, REPORTED_DATE)
VALUES(REPLY_REPORT_SEQ.NEXTVAL, 4, 4, 3, '무의미한 내용으로 본인 글에 댓글 단 것 신고합니다', TO_DATE('2025-02-16', 'YYYY-MM-DD'));

SELECT *
FROM REPLY_REPORT;

SELECT *
FROM REPLY;



--○ REPLY_REPORT_ACTION
INSERT INTO REPLY_REPORT_ACTION(REPLY_REPORT_ACTION_ID, ADMIN_ID, REPLY_REPORT_ID, REPORT_ACTION_TYPE_ID, COMPLETED_DATE)
VALUES(REPLY_REPORT_ACTION_SEQ.NEXTVAL, 'ADMIN1', 1, 2, TO_DATE('2025-02-13', 'YYYY-MM-DD'));

SELECT *
FROM REPLY_REPORT_ACTION;



--○ ATTACHMENT_EQUIP_REG
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 1, 'example01.jpg', '임시경로명', 1, 1, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example02.jpg', '임시경로명', 1, 2, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example03.jpg', '임시경로명', 1, 3, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example04.jpg', '임시경로명', 1, 4, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example05.jpg', '임시경로명', 1, 5, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example06.jpg', '임시경로명', 1, 6, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example07.jpg', '임시경로명', 1, 7, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_EQUIP_REG(ATTACHMENT_EQUIP_REG_ID, EQUIP_CODE, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EQUIP_REG_SEQ.NEXTVAL, 2, 'example08.jpg', '임시경로명', 1, 8, TO_DATE('2025-02-05', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_EQUIP_REG;



--○ ATTACHMENT_RENTAL_REPLY
INSERT INTO ATTACHMENT_RENTAL_REPLY(ATTACHMENT_RENTAL_REPLY_ID, RENTAL_REPLY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_RENTAL_REPLY_SEQ.NEXTVAL, 2, 'example09.jpg', '임시경로명', 1, 1, TO_DATE('2025-02-12', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_RENTAL_REPLY(ATTACHMENT_RENTAL_REPLY_ID, RENTAL_REPLY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_RENTAL_REPLY_SEQ.NEXTVAL, 2, 'example10.jpg', '임시경로명', 1, 2, TO_DATE('2025-02-12', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_RENTAL_REPLY;

SELECT *
FROM REPLY;



--○ ATTACHMENT_POST
INSERT INTO ATTACHMENT_POST(ATTACHMENT_POST_ID, POST_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_POST_SEQ.NEXTVAL, 5, 'example11.jpg', '임시경로명', 1, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_POST;



--○ ATTACHMENT_REPLY
INSERT INTO ATTACHMENT_REPLY(ATTACHMENT_REPLY_ID, REPLY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_REPLY_SEQ.NEXTVAL, 2, 'example12.jpg', '임시경로명', 1, 1, TO_DATE('2025-02-02', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_REPLY;



--○ ATTACHMENT_CAMPING_DIARY
INSERT INTO ATTACHMENT_CAMPING_DIARY(ATTACHMENT_CAMPING_DIARY_ID, DIARY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_CAMPING_DIARY_SEQ.NEXTVAL, 1, 'example13.jpg', '임시경로명', 1, 1, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_CAMPING_DIARY(ATTACHMENT_CAMPING_DIARY_ID, DIARY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_CAMPING_DIARY_SEQ.NEXTVAL, 1, 'example14.jpg', '임시경로명', 1, 2, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_CAMPING_DIARY(ATTACHMENT_CAMPING_DIARY_ID, DIARY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_CAMPING_DIARY_SEQ.NEXTVAL, 1, 'example15.jpg', '임시경로명', 1, 3, TO_DATE('2025-02-05', 'YYYY-MM-DD'));
INSERT INTO ATTACHMENT_CAMPING_DIARY(ATTACHMENT_CAMPING_DIARY_ID, DIARY_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_CAMPING_DIARY_SEQ.NEXTVAL, 1, 'example16.jpg', '임시경로명', 1, 4, TO_DATE('2025-02-05', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_CAMPING_DIARY;



--○ ATTACHMENT_EVENT
INSERT INTO ATTACHMENT_EVENT(ATTACHMENT_EVENT_ID, EVENT_ID, ATTACHMENT_NAME, ATTACHMENT_PATH, ATTACHMENT_SIZE, ATTACHMENT_ORDER, CREATED_DATE)
VALUES(ATTACHMENT_EVENT_SEQ.NEXTVAL, 1, 'example17.jpg', '임시경로명', 1, 1, TO_DATE('2025-01-01', 'YYYY-MM-DD'));

SELECT *
FROM ATTACHMENT_EVENT;



























----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--@@
--○ 전체 테이블 목록 확인
SELECT *
FROM TAB;


--○ 세션 단위 기본 날짜 출력 형식
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

--○ 시퀀스 확인
SELECT SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY, LAST_NUMBER, CACHE_SIZE, CYCLE_FLAG, ORDER_FLAG
FROM USER_SEQUENCES;

--○ 테이블 갯수 확인
SELECT COUNT(*) AS TABLE_COUNT
FROM USER_TABLES;

--○ 전체 제약조건 확인
SELECT *
FROM ALL_CONTSTRAINTS;

--○ 테이블 구조 확인
DESC WRITE_GRADE;

--○ LOCK 문제 해결 방법
SELECT *
FROM v$access
WHERE object = 'ADMINS';

SELECT *
FROM dba_ddl_locks
WHERE name = 'ADMINS';

SELECT l.session_id AS sid, s.serial#, s.username, s.program
FROM v$locked_object l
         JOIN dba_objects o ON l.object_id = o.object_id
         JOIN v$session s ON l.session_id = s.sid
WHERE o.object_name = 'ADMINS';

SELECT sid, serial#, username, program, status
FROM v$session
WHERE sid = 114 AND serial# = 73;

ALTER SYSTEM KILL SESSION '114,73' IMMEDIATE;


---------------------------------------------------------------------------------
--○ 제약조건 조회 VIEW (전체 테이블)
SELECT
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
     , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
     , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
         JOIN USER_CONS_COLUMNS UCC
              ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
         JOIN USER_TAB_COLUMNS UTC
              ON UCC.TABLE_NAME = UTC.TABLE_NAME
                  AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 조회 VIEW (개별 테이블)
SELECT
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
     , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
     , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
         JOIN USER_CONS_COLUMNS UCC
              ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
         JOIN USER_TAB_COLUMNS UTC
              ON UCC.TABLE_NAME = UTC.TABLE_NAME
                  AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
WHERE UC.TABLE_NAME = 'STOREN_MATCHING_REQ'
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (전체 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (개별별 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DIARY_OPEN_LOG'
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;


















---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
--■■■ View ■■■--


제훈작업 0328 (주요통계뷰,회원 상세정보 뷰)
=====================================================================================================

/*
      ████████
     ██▓▓▓▓▓▓██    Lv.0 박제훈
     █▓▓▓██▓▓▓█
     █▓▓▓██▓▓▓█
     █▓██████▓█
      █▓▓▓▓▓▓█
    ██▒▒▒▒▒▒▒▒██
   █▒▒██▒▒▒▒██▒▒█
   █▒▒▒▒████▒▒▒▒█
   █▒▒▒▒▒▒▒▒▒▒▒▒█
   █▒▒████████▒▒█
    ███▓▓██▓▓███
    █▓▓▓▓██▓▓▓▓█
    ███████████
    ███████████
     █▓▓█  █▓▓█
    ██▓▓██ ██▓▓██
   ██▓▓███ ███▓▓██
  ██▓▓██     ██▓▓██
  █████       █████

 */







--○ 주요 통계 뷰
CREATE OR REPLACE VIEW V_ALL_USER_VIEW
AS
SELECT VTW.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID, 검수_결과_처리일, 게시글_신고접수_ID, 게시글_신고일, 댓글_신고_접수_ID, 댓글_신고일, 렌탈_댓글_신고_접수_ID, 렌탈_댓글_신고일
     , U.USER_ID AS 회원_ID
FROM V_TODAY_USER_WARRING VTW JOIN USERS U
                                   ON VTW.회원_코드 = U.USER_CODE;
-- 일일 신규 사용자 수,(USER_COUNT)
-- 일일 거래(결제) 건수 및 금액(TODAY_RICE_ALL)
-- 일일 검수 건수(IR_STOREN), 진행 중인 배송현황(스토렌,보관)(PDR_STOREN)
-- 신규 신고 건수 (V_TODAY_WARRING)
-- , 활성 사용자 수, 회원 수(USER_CODE) , 사유별 탈퇴 회원 수(USER_CODE)


------------------------------------------------------------------------------------------------------------------------
-- 단계별 뷰문 작성


DROP VIEW USER_COUNT;
-- 회원_가입 = 회원_코드
CREATE OR REPLACE VIEW USER_COUNT
AS
SELECT UC.USER_CODE AS 회원_코드,US.CREATED_DATE,US.USER_ID AS 회원_ID
FROM USERS US JOIN USER_CODE UC
                   ON US.USER_CODE = UC.USER_CODE;



--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액
CREATE OR REPLACE VIEW TODAY_USER_SUM
AS
SELECT TPA.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자
     ,UC.CREATED_DATE AS 회원가입일
FROM USER_COUNT UC JOIN TODAY_PRICE_ALL TPA
                        ON UC.회원_코드 = TPA.회원_코드;


DROP VIEW V_TODAY_USER_RESTORE;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수
CREATE OR REPLACE VIEW V_TODAY_USER_RESTORE
AS
SELECT TUS.회원_코드, TUS.스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일
     ,IST.검수_결과_ID, IST.검수_결과_처리일
FROM IRA_STOREN IST JOIN TODAY_USER_SUM TUS
                         ON IST.회원_코드 = TUS.회원_코드;


DROP VIEW V_TODAY_USER_RESOTR_DELIVERY;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수 + 진행중인 배송 현황
CREATE OR REPLACE VIEW V_TODAY_USER_RESOTR_DELIVERY
AS
SELECT VT.회원_코드, VT.스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID,검수_결과_처리일
     ,PS.배송_시작일,PS.배송_종료일
FROM V_TODAY_USER_RESTORE VT JOIN PDR_STOREN PS
                                  ON VT.회원_코드 = PS.회원_코드;


DROP VIEW V_TODAY_USER_RESTORE;
--일일 신규 사용자수 + 일일 거래(결제) 건수 및 금액 + 일일 검수 건수 + 신규 신고건수
CREATE OR REPLACE VIEW V_TODAY_USER_WARRING
AS
SELECT VT.회원_코드, 스토렌_ID, 스토렌_매칭_완료_ID, 스토렌_결제_금액, 보관_결제_금액, 보관_결제_일자, 렌탈_결제_금액, 렌탈_결제_일자, 회원가입일, 검수_결과_ID, 검수_결과_처리일
     ,VTW.게시글_신고접수_ID, VTW.게시글_신고일,VTW.댓글_신고_접수_ID,VTW.댓글_신고일,VTW.렌탈_댓글_신고_접수_ID,VTW.렌탈_댓글_신고일
FROM V_TODAY_USER_RESTORE VT JOIN V_TODAY_WARRING VTW
                                  ON VT.회원_코드 = VTW.회원코드;




-- 일일 신규 사용자 수 + 장비_코드
CREATE OR REPLACE VIEW T_PRICE
AS
SELECT UC.회원_코드, ER.EQUIP_CODE AS 장비등록_장비코드
FROM USER_COUNT UC JOIN EQUIPMENT_REGISTRATION ER
                        ON UC.회원_코드 = ER.USER_CODE;

-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록
CREATE OR REPLACE VIEW USER_STOREN
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, ST.STOREN_ID AS 스토렌_ID
FROM T_PRICE TP JOIN STOREN ST
                     ON TP.장비등록_장비코드 = ST.EQUIP_CODE;


-- 일일 신규 사용자 수 + 장비_코드 + 보관_장비등록
CREATE OR REPLACE VIEW USER_STORAGE
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, SR.STORAGE_ID AS 보관_ID
FROM T_PRICE TP JOIN STORAGE SR
                     ON TP.장비등록_장비코드 = SR.EQUIP_CODE;


-- 일일 신규 사용자 수 + 장비_코드 + 렌탈_장비등록
CREATE OR REPLACE VIEW USER_RENTAL
AS
SELECT TP.회원_코드, TP.장비등록_장비코드, RT.RENTAL_ID AS 렌탈_ID
FROM T_PRICE TP JOIN RENTAL RT
                     ON TP.장비등록_장비코드 = RT.EQUIP_CODE;







-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 (스토렌 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_STOREN
AS
SELECT US.회원_코드,US.장비등록_장비코드,US.스토렌_ID,PAY_AMOUNT AS 결제_금액, PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_STOREN US JOIN PAY P
                         ON US.스토렌_ID = P.STOREN_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 보관_장비등록 + 결제 (보관 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_STORAGE
AS
SELECT US.보관_ID, US.장비등록_장비코드, US.회원_코드, P.PAY_AMOUNT AS 결제_금액, P.PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_STORAGE US JOIN PAY P
                          ON US.보관_ID = P.PAY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 렌탈_장비등록 + 결제 (렌탈 일일 결제 건수)
CREATE OR REPLACE VIEW PAY_RENTAL
AS
SELECT UR.회원_코드, UR.장비등록_장비코드, UR.렌탈_ID, P.PAY_AMOUNT AS 결제_금액, P.PAY_DATE AS 결제_일자, PAY_ID AS 결제_ID
FROM USER_RENTAL UR JOIN PAY P
                         ON UR.렌탈_ID = P.PAY_ID;




-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송
CREATE OR REPLACE VIEW PD_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, PLATFORM_DELIVERY_ID AS 플랫폼_배송_ID
     ,DELIVERY_START_DATE AS 배송_시작일, DELIVERY_END_DATE AS 배송_종료일
FROM PAY_STOREN PS JOIN PLATFORM_DELIVERY PD
                        ON PS.결제_ID = PD.PAY_ID;


-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환
CREATE OR REPLACE VIEW PDR_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일
     ,PLATFORM_DELIVERY_RETURN_ID AS 플랫폼_배송_반환_ID, DELIVERY_START_DATE AS PS_배송_시작일, DELIVERY_END_DATE AS PS_배송_종료일
FROM PD_STOREN PS JOIN PLATFORM_DELIVERY_RETURN PDR
                       ON PS.플랫폼_배송_ID = PDR.PLATFORM_DELIVERY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트
CREATE OR REPLACE VIEW IL_STOREN
AS
SELECT PS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일
     ,IL.INSPEC_LIST_ID AS 검수리스트_ID
FROM PDR_STOREN PS JOIN INSPEC_LIST IL
                        ON PS.플랫폼_배송_ID = IL.PLATFORM_DELIVERY_ID;




-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과(일일 검사 견수)
CREATE OR REPLACE VIEW IR_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID
     ,IR.INSPEC_RESULT_ID AS 검수_결과_ID
FROM IL_STOREN IST JOIN INSPEC_RESULT IR
                        ON IST.플랫폼_배송_ID = IR.PLATFORM_DELIVERY_ID;



-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과 + 검수_결과_처리
CREATE OR REPLACE VIEW IRA_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID
     ,INSPEC_RESULT_ACTION_ID AS 검수_결과_처리_ID, COMPLETED_DATE AS 검수_결과_처리일
FROM IR_STOREN IST JOIN INSPEC_RESULT_ACTION IRA
                        ON IST.검수_결과_ID = IRA.INSPEC_RESULT_ID;


-- 일일 신규 사용자 수 + 장비_코드 + 스토렌_장비등록 + 결제 + 플랫폼 배송 + 플랫폼_배송_반환 + 검수_리스트 + 검수_결과 + 검수_결과_처리 + 스토렌_매칭_신청
CREATE OR REPLACE VIEW SMR_STOREN
AS
SELECT IST.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID, 검수_결과_처리_ID
     ,STOREN_MATCHING_REQ_ID AS 스토렌_매칭_신청_ID,RENTAL_START_DATE AS 렌탈_시작일,RENTAL_END_DATE AS 렌탈_종료일,REQUESTED_DATE AS 신청일
FROM IRA_STOREN IST JOIN STOREN_MATCHING_REQ SMR
                         ON IST.검수_결과_처리_ID = SMR.INSPEC_RESULT_ACTION_ID;












-- 일일 거래(결제) 건수 및 금액(스토렌)
CREATE OR REPLACE VIEW STOREN_PAY
AS
SELECT SS.회원_코드, 장비등록_장비코드, 스토렌_ID, 결제_금액, 결제_일자, 결제_ID, 플랫폼_배송_ID, 배송_시작일, 배송_종료일, 플랫폼_배송_반환_ID, PS_배송_시작일, PS_배송_종료일, 검수리스트_ID, 검수_결과_ID, 검수_결과_처리_ID, 스토렌_매칭_신청_ID, 렌탈_시작일, 렌탈_종료일, 신청일
     , STOREN_MATCHING_DONE_ID AS 스토렌_매칭_완료_ID,APPROVED_DATE AS 승인_일자
FROM SMR_STOREN SS JOIN STOREN_MATCHING_DONE SMD
                        ON SS.스토렌_매칭_신청_ID = SMD.STOREN_MATCHING_REQ_ID;





-- 렌탈 일일 결제 건수 + 렌탈_매칭_신청
CREATE OR REPLACE VIEW P_RENTAL
AS
SELECT PR.회원_코드, PR.장비등록_장비코드, PR.렌탈_ID, PR.결제_금액, PR.결제_일자, PR.결제_ID
     ,RMR.RENTAL_MATCHING_REQ_ID AS 렌탈_매칭_신청_ID,RMR.RENTAL_START_DATE AS 매칭_렌탈_시작일,RMR.RENTAL_END_DATE AS 매칭_렌탈_종료일,RMR.REQUESTED_DATE AS 렌탈_매칭_신청일
FROM PAY_RENTAL PR JOIN RENTAL_MATCHING_REQ RMR
                        ON PR.렌탈_ID = RMR.RENTAL_ID;





-- 렌탈 일일 결제 건수 + 렌탈_매칭_신청 +. 렌탈_매칭_완료
CREATE OR REPLACE VIEW RENTAL_MATCHING
AS
SELECT PR.회원_코드, 장비등록_장비코드, 렌탈_ID, 결제_금액, 결제_일자, 결제_ID, 렌탈_매칭_신청_ID, 매칭_렌탈_시작일, 매칭_렌탈_종료일, 렌탈_매칭_신청일
     ,RENTAL_MATCHING_DONE_ID AS 렌탈_매칭_완료_ID,APPROVED_DATE AS 승인_일자
FROM P_RENTAL PR JOIN RENTAL_MATCHING_DONE RMD
                      ON PR.렌탈_매칭_신청_ID = RMD.RENTAL_MATCHING_REQ_ID;








--회원_가입 + 회원_코드
CREATE OR REPLACE VIEW USER_CODE_SUM
AS
SELECT U.USER_CODE AS 회원코드
FROM USERS U JOIN USER_CODE UC
                  ON U.USER_CODE = UC.USER_CODE;

--회원_가입 + 회원_코드 + 관리자_등록
CREATE OR REPLACE VIEW ADMIN_CODE_SUM
AS
SELECT U.회원코드, A.ADMIN_ID AS 관리자_ID
FROM USER_CODE_SUM U JOIN ADMINS A
                          ON U.회원코드 = A.USER_CODE;






-- 일일 신고 건수 확인
CREATE OR REPLACE VIEW V_TODAY_WARRING
AS
SELECT PRS.회원코드,PRS.게시글_신고접수_ID, PRS.게시글_신고일,RRS.댓글_신고_접수_ID,RRS.신고일 AS 댓글_신고일,RRSS.렌탈_댓글_신고_접수_ID,RRSS.렌탈_댓글_신고일
FROM POST_REPORT_SUM PRS JOIN REPLY_REPORT_SUM RRS
                              ON PRS.회원코드 = RRS.회원코드
                         JOIN RENTAL_REPLY_SUM RRSS
                              ON RRSS.회원코드 = RRS.회원코드;









--회원_가입 + 회원_코드 + 관리자_등록 + 게시글_신고_접수
CREATE OR REPLACE VIEW POST_REPORT_SUM
AS
SELECT ACS.회원코드, 관리자_ID, PR.POST_REPORT_ID AS 게시글_신고접수_ID,PR.REPORTER_ID AS 게시글_신고접수자_ID,PR.POST_ID AS 게시물_ID,PR.REPORT_TYPE_ID AS 게시글_신고유형_ID,PR.REPORT_CONTENT AS 게시글_신고_내용_ID,PR.REPORTED_DATE AS 게시글_신고일
FROM ADMIN_CODE_SUM ACS JOIN POST_REPORT PR
                             ON ACS.회원코드 = PR.REPORTER_ID;


--회원_가입 + 회원_코드 + 관리자_등록 + 게시글_신고_접수 + 게시글_신고_처리
CREATE OR REPLACE VIEW POST_REPORT_SUM2
AS
SELECT PRS.회원코드, 관리자_ID, 게시글_신고접수_ID, 게시글_신고접수자_ID, 게시물_ID, 게시글_신고유형_ID, 게시글_신고_내용_ID, 게시글_신고일
     ,PRA.POST_REPORT_ACTION_ID AS 신고_처리_ID,PRA.ADMIN_ID AS 처리_관리자_ID,PRA.POST_REPORT_ID AS 게시글_신고_접수_ID,PRA.REPORT_ACTION_TYPE_ID AS 신고_처리_유형_ID,PRA.COMPLETED_DATE AS 처리일
FROM POST_REPORT_SUM PRS JOIN POST_REPORT_ACTION PRA
                              ON PRS.관리자_ID = PRA.ADMIN_ID;


DROP VIEW REPLY_REPORT_SUM;
--회원_가입 + 회원_코드 + 댓글_신고_접수
CREATE OR REPLACE VIEW REPLY_REPORT_SUM
AS
SELECT UCS.회원코드, RR.REPORTER_ID AS 댓글_신고접수자_ID, REPLY_ID AS 댓글_ID,REPORT_TYPE_ID AS 신고_유형_ID
     ,RR.REPORT_CONTENT AS 댓글_신고_내용,RR.REPORTED_DATE AS 신고일,RR.REPLY_REPORT_ID AS 댓글_신고_접수_ID
FROM USER_CODE_SUM UCS JOIN REPLY_REPORT RR
                            ON UCS.회원코드 = RR.REPORTER_ID;



--회원_가입 + 회원_코드 + 댓글_신고_접수 + 댓글_신고_처리
CREATE OR REPLACE VIEW REPLY_REPORT_ACTION_SUM
AS
SELECT RRS.회원코드, 댓글_신고접수자_ID, 댓글_ID, 신고_유형_ID, 댓글_신고_내용, 신고일, 댓글_신고_접수_ID
     ,RRA.REPLY_REPORT_ACTION_ID AS 댓글_신고처리_ID,RRA.REPORT_ACTION_TYPE_ID AS 댓글_신고_처리_유형_ID,RRA.COMPLETED_DATE AS 댓글_신고_처리일
     ,RRA.ADMIN_ID AS 댓글_처리_관리자_ID
FROM REPLY_REPORT_SUM RRS JOIN REPLY_REPORT_ACTION RRA
                               ON RRS.댓글_신고_접수_ID = RRA.REPLY_REPORT_ID;


DROP VIEW RENTAL_REPLY_SUM;
--회원_가입 + 회원_코드 + 렌탈_댓글_신고_접수
CREATE OR REPLACE VIEW RENTAL_REPLY_SUM
AS
SELECT UCS.회원코드,RRR.REPORTER_ID AS 렌탈_신고접수자_ID,RRR.RENTAL_REPLY_ID AS 렌탈_댓글_ID,RRR.REPORT_TYPE_ID AS 렌탈_댓글_신고_유형_ID
     ,RRR.REPORT_CONTENT AS 렌탈_댓글_신고_내용,RRR.REPORTED_DATE AS 렌탈_댓글_신고일, RENTAL_REPLY_REPORT_ID AS 렌탈_댓글_신고_접수_ID
FROM USER_CODE_SUM UCS JOIN RENTAL_REPLY_REPORT RRR
                            ON UCS.회원코드 = RRR.REPORTER_ID;



--회원_가입 + 회원_코드 + 렌탈_댓글_신고_접수 + 렌탈_신고_처리
CREATE OR REPLACE VIEW RENTAL_REPLY_ACTION_SUM
AS
SELECT RRS.회원코드, 렌탈_신고접수자_ID, 렌탈_댓글_ID, 렌탈_댓글_신고_유형_ID, 렌탈_댓글_신고_내용, 렌탈_댓글_신고일, 렌탈_댓글_신고_접수_ID
     ,RRRA.ADMIN_ID AS 렌탈_처리_관리자_ID,RRRA.REPORT_ACTION_TYPE_ID AS 렌탈_댓글_처리_유형_ID,RRRA.COMPLETED_DATE AS 렌탈_댓글_신고_처리일
FROM RENTAL_REPLY_SUM RRS JOIN RENTAL_REPLY_REPORT_ACTION RRRA
                               ON RRS.렌탈_댓글_신고_접수_ID = RRRA.RENTAL_REPLY_REPORT_ID;













--○ 회원 상세 정보 뷰
-- 개인 정보,활동 내역 (게시물, 댓글, 결제 이력),포인트 내역 (POINT_LOG),만족도 평가 내역 (SATISFACTION_LOG)


CREATE OR REPLACE VIEW USER_INFO
AS
SELECT UC.USER_CODE AS 회원코드,U.USER_ID AS 회원_ID,U.USER_NAME AS 회원_이름
     ,U.USER_TEL AS 회원_전화번호,U.USER_EMAIL AS 회원_이메일,U.CREATED_DATE AS 회원가입일
     ,P.POST_ID AS 게시물_ID,P.USER_CODE AS 게시물_회원_코드,P.BOARD_ID AS 게시판_ID,P.POST_LABEL_ID AS 말머리_ID,P.POST_TITLE AS 게시물_제목,P.POST_CONTENT AS 게시물_내용,P.CREATED_DATE AS 게시물_생성일
     ,R.REPLY_ID AS 댓글_ID,R.ROOT_REPLY_ID AS 상윗댓글_ID,R.USER_CODE AS 댓글_회원_코드,R.POST_ID AS 댓글_게시물_ID,REPLY_CONTENT AS 댓글_내용,R.CREATED_DATE AS 댓글_생성일
     ,PL.POINT_LOG_ID AS 포인트_로그_ID,PL.USER_CODE AS 포인트_변동_회원_코드,PL.POINT_CHANGE_TYPE_ID AS 포인트_변동_유형_ID,PL.POINT_CHANGE AS 변동_포인트,PL.CREATED_DATE AS 포인트_변동_생성일
     ,SL.SATIS_LOG_ID AS 만족도_평가_로그_ID,SL.RENTAL_MATCHING_DONE_ID AS 만족도_평가_렌탈_완료,SL.REVIEWEE_ID AS 피평가자_ID,SL.REVIEWER_ID AS 평가자_ID
     ,SL.SATIS_SCORE AS 만족도_점수,SL.SATIS_COMMENT AS 만족도_코멘트,SL.CREATED_DATE AS 만족도_평가_생성일
FROM USER_CODE UC JOIN USERS U
                       ON UC.USER_CODE = U.USER_CODE
                  JOIN POST P
                       ON U.USER_CODE = P.USER_CODE
                  JOIN REPLY R
                       ON P.USER_CODE = R.USER_CODE
                  JOIN POINT_LOG PL
                       ON R.USER_CODE = PL.USER_CODE
                  JOIN SATISFACTION_LOG SL
                       ON PL.USER_CODE = SL.REVIEWEE_ID;









CREATE OR REPLACE VIEW USER_INFO AS
SELECT
    UC.USER_CODE AS "회원코드",
    U.USER_ID AS "회원_ID",
    U.USER_NAME AS "회원_이름",
    U.USER_TEL AS "회원_전화번호",
    U.USER_EMAIL AS "회원_이메일",
    ST.SIGNUP_TYPE_NAME AS "가입유형",
    U.CREATED_DATE AS "회원가입일",
    (SELECT NICKNAME
     FROM NICKNAME_LOG NL
     WHERE NL.USER_CODE = UC.USER_CODE
       AND NL.LAST_UPDATED_DATE = (SELECT MAX(LAST_UPDATED_DATE)
                                   FROM NICKNAME_LOG
                                   WHERE USER_CODE = UC.USER_CODE)) AS "현재_닉네임",
    (SELECT MAX(RANK_NAME)
     FROM RANK R
     WHERE (SELECT NVL(SUM(POINT_CHANGE),0)
            FROM POINT_LOG
            WHERE USER_CODE = UC.USER_CODE) BETWEEN R.MIN_POINT AND R.MAX_POINT) AS "현재_등급",
    (SELECT NVL(SUM(POINT_CHANGE),0)
     FROM POINT_LOG
     WHERE USER_CODE = UC.USER_CODE) AS "총_보유_포인트",
    (SELECT COUNT(*)
     FROM POST
     WHERE USER_CODE = UC.USER_CODE) AS "게시물_수",
    (SELECT COUNT(*)
     FROM REPLY
     WHERE USER_CODE = UC.USER_CODE) AS "댓글_수",
    (SELECT COUNT(*)
     FROM BOOKMARK
     WHERE USER_CODE = UC.USER_CODE) AS "북마크_수",
    (SELECT COUNT(*)
     FROM RECOMMEND
     WHERE USER_CODE = UC.USER_CODE) AS "추천_수",
    (SELECT COUNT(*)
     FROM EQUIPMENT_REGISTRATION
     WHERE USER_CODE = UC.USER_CODE) AS "장비등록_수",
    (SELECT COUNT(*)
     FROM RENTAL
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                          FROM EQUIPMENT_REGISTRATION
                          WHERE USER_CODE = UC.USER_CODE)) AS "렌탈_등록_수",
    (SELECT COUNT(*)
     FROM STOREN
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                          FROM EQUIPMENT_REGISTRATION
                          WHERE USER_CODE = UC.USER_CODE)) AS "스토렌_등록_수",
    (SELECT COUNT(*)
     FROM STORAGE
     WHERE EQUIP_CODE IN (SELECT EQUIP_CODE
                          FROM EQUIPMENT_REGISTRATION
                          WHERE USER_CODE = UC.USER_CODE)) AS "보관_등록_수",
    (SELECT AVG(SATIS_SCORE)
     FROM SATISFACTION_LOG
     WHERE REVIEWEE_ID = UC.USER_CODE) AS "평균_만족도_점수",
    (SELECT COUNT(*)
     FROM OWNED_COUPON
     WHERE USER_CODE = UC.USER_CODE AND COMPLETED_DATE IS NULL) AS "보유_쿠폰_수",
    (SELECT ADDRESS
     FROM ADDRESS_LOG
     WHERE USER_CODE = UC.USER_CODE
       AND LAST_UPDATED_DATE = (SELECT MAX(LAST_UPDATED_DATE)
                                FROM ADDRESS_LOG
                                WHERE USER_CODE = UC.USER_CODE)) AS "현재_주소",
    CASE
        WHEN EXISTS (SELECT 1 FROM SUSPENDED_USER SU WHERE SU.USER_CODE = UC.USER_CODE AND SU.SUSPENDED_START_DATE <= SYSDATE)
            THEN '활동정지'
        WHEN UC.EXIT_DATE IS NOT NULL
            THEN '탈퇴'
        ELSE '활동중'
        END AS "회원_상태",
    UC.EXIT_DATE AS "탈퇴일자"
FROM
    USER_CODE UC
        LEFT JOIN USERS U ON UC.USER_CODE = U.USER_CODE
        LEFT JOIN SIGNUP_TYPE ST ON U.SIGNUP_TYPE_ID = ST.SIGNUP_TYPE_ID
ORDER BY
    UC.USER_CODE;





--○ 회원 제제 관리 뷰
-- 활동 정지 관리 (SUSPENDED_USER), 제재 이력 조회

-- 회원 제재 관리 뷰 생성
CREATE OR REPLACE VIEW VW_USER_SUSPENSION AS
SELECT
    SU.SUSPENDED_USER_ID,
    UC.USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    U.USER_TEL,
    U.USER_EMAIL,
    SU.SUSPENDED_START_DATE,
    SU.ADMIN_ID AS SUSPENDED_BY_ADMIN,
    -- 신고 처리 정보
    (SELECT COUNT(*) FROM POST_REPORT_ACTION PRA
                              JOIN POST_REPORT PR ON PRA.POST_REPORT_ID = PR.POST_REPORT_ID
     WHERE PR.REPORTER_ID = UC.USER_CODE) AS POST_REPORT_COUNT,

    (SELECT COUNT(*) FROM REPLY_REPORT_ACTION RRA
                              JOIN REPLY_REPORT RR ON RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
     WHERE RR.REPORTER_ID = UC.USER_CODE) AS REPLY_REPORT_COUNT,

    (SELECT COUNT(*) FROM RENTAL_REPLY_REPORT_ACTION RRRA
                              JOIN RENTAL_REPLY_REPORT RRR ON RRRA.RENTAL_REPLY_REPORT_ID = RRR.RENTAL_REPLY_REPORT_ID
     WHERE RRR.REPORTER_ID = UC.USER_CODE) AS RENTAL_REPLY_REPORT_COUNT
FROM
    SUSPENDED_USER SU
        JOIN
    USER_CODE UC ON SU.USER_CODE = UC.USER_CODE
        JOIN
    USERS U ON UC.USER_CODE = U.USER_CODE
        JOIN
    ADMINS A ON SU.ADMIN_ID = A.ADMIN_ID
ORDER BY
    SU.SUSPENDED_START_DATE DESC;

-- 회원 제재 히스토리 뷰 (제재 관련 모든 활동)
CREATE OR REPLACE VIEW VW_USER_SUSPENSION_HISTORY AS
SELECT
    'POST_REPORT' AS REPORT_TYPE,
    PR.POST_REPORT_ID AS REPORT_ID,
    PR.REPORTER_ID AS USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    PRA.ADMIN_ID,
    RAT.REPORT_ACTION_TYPE_NAME AS ACTION_TYPE,
    PR.REPORTED_DATE AS REPORT_DATE,
    PRA.COMPLETED_DATE AS ACTION_DATE,
    RT.REPORT_TYPE_NAME,
    PR.REPORT_CONTENT
FROM
    POST_REPORT PR
        JOIN
    POST_REPORT_ACTION PRA ON PR.POST_REPORT_ID = PRA.POST_REPORT_ID
        JOIN
    USER_CODE UC ON PR.REPORTER_ID = UC.USER_CODE
        JOIN
    USERS U ON UC.USER_CODE = U.USER_CODE
        JOIN
    ADMINS A ON PRA.ADMIN_ID = A.ADMIN_ID
        JOIN
    REPORT_ACTION_TYPE RAT ON PRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
        JOIN
    REPORT_TYPE RT ON PR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID

UNION ALL

SELECT
    'REPLY_REPORT' AS REPORT_TYPE,
    RR.REPLY_REPORT_ID AS REPORT_ID,
    RR.REPORTER_ID AS USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    RRA.ADMIN_ID,
    RAT.REPORT_ACTION_TYPE_NAME AS ACTION_TYPE,
    RR.REPORTED_DATE AS REPORT_DATE,
    RRA.COMPLETED_DATE AS ACTION_DATE,
    RT.REPORT_TYPE_NAME,
    RR.REPORT_CONTENT
FROM
    REPLY_REPORT RR
        JOIN
    REPLY_REPORT_ACTION RRA ON RR.REPLY_REPORT_ID = RRA.REPLY_REPORT_ID
        JOIN
    USER_CODE UC ON RR.REPORTER_ID = UC.USER_CODE
        JOIN
    USERS U ON UC.USER_CODE = U.USER_CODE
        JOIN
    ADMINS A ON RRA.ADMIN_ID = A.ADMIN_ID
        JOIN
    REPORT_ACTION_TYPE RAT ON RRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
        JOIN
    REPORT_TYPE RT ON RR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID

UNION ALL

SELECT
    'RENTAL_REPLY_REPORT' AS REPORT_TYPE,
    RRR.RENTAL_REPLY_REPORT_ID AS REPORT_ID,
    RRR.REPORTER_ID AS USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    RRRA.ADMIN_ID,
    RAT.REPORT_ACTION_TYPE_NAME AS ACTION_TYPE,
    RRR.REPORTED_DATE AS REPORT_DATE,
    RRRA.COMPLETED_DATE AS ACTION_DATE,
    RT.REPORT_TYPE_NAME,
    RRR.REPORT_CONTENT
FROM
    RENTAL_REPLY_REPORT RRR
        JOIN
    RENTAL_REPLY_REPORT_ACTION RRRA ON RRR.RENTAL_REPLY_REPORT_ID = RRRA.RENTAL_REPLY_REPORT_ID
        JOIN
    USER_CODE UC ON RRR.REPORTER_ID = UC.USER_CODE
        JOIN
    USERS U ON UC.USER_CODE = U.USER_CODE
        JOIN
    ADMINS A ON RRRA.ADMIN_ID = A.ADMIN_ID
        JOIN
    REPORT_ACTION_TYPE RAT ON RRRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
        JOIN
    REPORT_TYPE RT ON RRR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID

UNION ALL

SELECT
    'USER_SUSPENSION' AS REPORT_TYPE,
    SU.SUSPENDED_USER_ID AS REPORT_ID,
    SU.USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    SU.ADMIN_ID,
    '활동정지' AS ACTION_TYPE,
    SU.SUSPENDED_START_DATE AS REPORT_DATE,
    SU.SUSPENDED_START_DATE AS ACTION_DATE,
    '회원제재' AS REPORT_TYPE_NAME,
    NULL AS REPORT_CONTENT
FROM
    SUSPENDED_USER SU
        JOIN
    USER_CODE UC ON SU.USER_CODE = UC.USER_CODE
        JOIN
    USERS U ON UC.USER_CODE = U.USER_CODE
        JOIN
    ADMINS A ON SU.ADMIN_ID = A.ADMIN_ID

ORDER BY
    ACTION_DATE DESC, REPORT_DATE DESC;








--○ 회원 등급 조회

-- 회원 등급 조회 뷰 생성
CREATE OR REPLACE VIEW VW_USER_RANK AS
WITH 사용자_포인트 AS (
    SELECT USER_CODE, NVL(SUM(POINT_CHANGE), 0) AS 총포인트
    FROM POINT_LOG
    GROUP BY USER_CODE
),
     사용자_신용점수 AS (
         SELECT REVIEWEE_ID AS USER_CODE, NVL(AVG(SATIS_SCORE), 0) AS 신용점수
         FROM SATISFACTION_LOG
         GROUP BY REVIEWEE_ID
     ),
     닉네임_변경횟수 AS (
         SELECT USER_CODE, COUNT(*) - 1 AS 닉네임변경횟수
         FROM NICKNAME_LOG
         GROUP BY USER_CODE
     ),
     보유쿠폰_수 AS (
         SELECT USER_CODE, COUNT(*) AS 사용가능쿠폰수
         FROM OWNED_COUPON
         WHERE COMPLETED_DATE IS NULL
         GROUP BY USER_CODE
     ),
     현재_닉네임 AS (
         SELECT USER_CODE, NICKNAME
         FROM (
                  SELECT USER_CODE, NICKNAME,
                         ROW_NUMBER() OVER (PARTITION BY USER_CODE ORDER BY LAST_UPDATED_DATE DESC) AS RN
                  FROM NICKNAME_LOG
              )
         WHERE RN = 1
     )
SELECT
    U.USER_CODE,
    U.USER_ID,
    U.USER_NAME,
    CN.NICKNAME AS 현재닉네임,
    R.RANK_ID,
    R.RANK_NAME,
    R.RANK_ATTACHMENT_PATH,
    NVL(UP.총포인트, 0) AS 총포인트,
    NVL(UC.신용점수, 0) AS 신용점수,
    NVL(NC.닉네임변경횟수, 0) AS 닉네임변경횟수,
    U.CREATED_DATE AS 가입일,
    NVL(CC.사용가능쿠폰수, 0) AS 사용가능쿠폰수,
    CASE
        WHEN EXISTS (SELECT 1 FROM SUSPENDED_USER SU WHERE SU.USER_CODE = U.USER_CODE) THEN '활동정지'
        WHEN UCD.EXIT_DATE IS NOT NULL THEN '탈퇴회원'
        ELSE '정상회원'
        END AS 회원상태
FROM
    USERS U
        JOIN USER_CODE UCD ON U.USER_CODE = UCD.USER_CODE
        LEFT JOIN 현재_닉네임 CN ON U.USER_CODE = CN.USER_CODE
        LEFT JOIN 사용자_포인트 UP ON U.USER_CODE = UP.USER_CODE
        LEFT JOIN 사용자_신용점수 UC ON U.USER_CODE = UC.USER_CODE
        LEFT JOIN 닉네임_변경횟수 NC ON U.USER_CODE = NC.USER_CODE
        LEFT JOIN 보유쿠폰_수 CC ON U.USER_CODE = CC.USER_CODE
        LEFT JOIN RANK R ON (
        NVL(UP.총포인트, 0) BETWEEN R.MIN_POINT AND R.MAX_POINT
            AND NVL(UC.신용점수, 0) BETWEEN R.MIN_CREDIT AND R.MAX_CREDIT
        )
WHERE
    UCD.EXIT_DATE IS NULL
ORDER BY
    NVL(UP.총포인트, 0) DESC,
    NVL(UC.신용점수, 0) DESC,
    U.CREATED_DATE ASC;



SELECT *
FROM VW_USER_RANK;


--○ 렌탈 요청 시 기존 예약과 날짜 중복 없도록 관리(할줄모르겠음)




=====================================================================================================


-- 영식 view

--○ 댓글 뷰
CREATE OR REPLACE VIEW VW_REPLY
AS
SELECT REP.REPLY_ID AS "댓글 ID"
     , REP.ROOT_REPLY_ID AS "상위댓글 ID"
     , UC.USER_CODE AS "회원코드"
     , NL.NICKNAME AS "회원닉네임"
     , REP.POST_ID AS "게시물 ID"
     , REP.REPLY_CONTENT AS "댓글내용"
     , REP.CREATED_DATE AS "작성일"
     , CASE WHEN REP.ROOT_REPLY_ID IS NULL
                THEN 0 ELSE 1
    END AS "대댓글여부"
FROM REPLY REP
         JOIN USER_CODE UC
              ON REP.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL
              ON UC.USER_CODE = NL.USER_CODE
                  AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                            FROM NICKNAME_LOG
                                            WHERE USER_CODE = UC.USER_CODE)
ORDER BY CASE WHEN REP.ROOT_REPLY_ID IS NULL
                  THEN REP.REPLY_ID ELSE REP.ROOT_REPLY_ID
             END ASC, REP.CREATED_DATE ASC;



--○ 게시판 관리 뷰(게시판, 말머리)
CREATE OR REPLACE VIEW VW_BOARD
AS
SELECT BOA.BOARD_ID AS "게시판 ID"
     , BC.BOARD_CATE_NAME AS "카테고리명"
     , WG.WRITE_GRADE_NAME AS "관리등급"
     , BOA.BOARD_NAME AS "게시판"
     , PL.POST_LABEL_NAME AS "말머리"
FROM POST_LABEL PL
         JOIN BOARD BOA
              ON PL.BOARD_ID = BOA.BOARD_ID
         JOIN BOARD_CATEGORY BC
              ON BOA.BOARD_CATE_ID = BC.BOARD_CATE_ID
         JOIN WRITE_GRADE WG
              ON BOA.WRITE_GRADE_ID = WG.WRITE_GRADE_ID;



--○ 고독한 캠핑방 게시글 뷰
CREATE OR REPLACE VIEW VW_LONELY_CAMPING_POST
AS
SELECT POS.POST_ID AS "게시글 ID"
     , UC.USER_CODE AS "회원코드"
     , PL.POST_LABEL_NAME AS "말머리"
     , POS.POST_TITLE AS "제목"
     , AP.ATTACHMENT_PATH AS "첨부파일 경로"
     , POS.CREATED_DATE AS "작성일"
     , NL.NICKNAME AS "작성자"
     , (SELECT COUNT(*)
        FROM POST_VIEW_LOG PVL
        WHERE PVL.POST_ID = POS.POST_ID) AS "조회수"
     , (SELECT COUNT(*)
        FROM RECOMMEND REC
        WHERE REC.POST_ID = POS.POST_ID) AS "추천"
FROM POST POS
         JOIN USER_CODE UC
              ON POS.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL
              ON UC.USER_CODE = NL.USER_CODE
         JOIN BOARD BOA
              ON POS.BOARD_ID = BOA.BOARD_ID
         JOIN POST_LABEL PL
              ON POS.POST_LABEL_ID = PL.POST_LABEL_ID
         JOIN ATTACHMENT_POST AP
              ON POS.POST_ID = AP.POST_ID;



--○ 신고 관리 뷰(통합)
CREATE OR REPLACE VIEW VW_REPORT_MANAGEMENT
AS
SELECT PR.POST_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , POS.POST_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , PR.REPORT_CONTENT AS "신고내용"
     , PR.REPORTED_DATE AS "신고일"
     , PRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN PRA.POST_REPORT_ACTION_ID IS NOT NULL
                THEN '처리완료'
            ELSE '접수'
    END AS "처리상태"
     , PRA.COMPLETED_DATE AS "처리일"
FROM POST_REPORT PR
         JOIN USER_CODE UC_REPORTER
              ON PR.REPORTER_ID = UC_REPORTER.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTER
              ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
                  AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTER.USER_CODE)
         JOIN POST POS
              ON PR.POST_ID = POS.POST_ID
         JOIN USER_CODE UC_REPORTED
              ON POS.USER_CODE = UC_REPORTED.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTED
              ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
                  AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTED.USER_CODE)
         JOIN REPORT_TYPE RT
              ON PR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
         JOIN POST_REPORT_ACTION PRA
              ON PR.POST_REPORT_ID = PRA.POST_REPORT_ID

UNION ALL

SELECT RR.REPLY_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , RR.REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RR.REPORT_CONTENT AS "신고내용"
     , RR.REPORTED_DATE AS "신고일"
     , RRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN RRA.REPLY_REPORT_ACTION_ID IS NOT NULL
                THEN '처리완료'
            ELSE '접수'
    END AS "처리상태"
     , RRA.COMPLETED_DATE AS "처리일"
FROM REPLY_REPORT RR
         JOIN USER_CODE UC_REPORTER
              ON RR.REPORTER_ID = UC_REPORTER.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTER
              ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
                  AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTER.USER_CODE)
         JOIN REPLY REP
              ON RR.REPLY_ID = REP.REPLY_ID
         JOIN USER_CODE UC_REPORTED
              ON REP.USER_CODE = UC_REPORTED.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTED
              ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
                  AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTED.USER_CODE)
         JOIN REPORT_TYPE RT
              ON RR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
         JOIN REPLY_REPORT_ACTION RRA
              ON RR.REPLY_REPORT_ID = RRA.REPLY_REPORT_ID

UNION ALL

SELECT RRR.RENTAL_REPLY_REPORT_ID AS "신고접수 ID"
     , NL_REPORTER.NICKNAME AS "신고자 닉네임"
     , NL_REPORTED.NICKNAME AS "피신고자 닉네임"
     , RRR.RENTAL_REPLY_ID AS "분류"
     , RT.REPORT_TYPE_NAME AS "신고유형"
     , RRR.REPORT_CONTENT AS "신고내용"
     , RRR.REPORTED_DATE AS "신고일"
     , RRRA.ADMIN_ID AS "관리자 ID"
     , CASE WHEN RRRA.RENTAL_REPLY_REPORT_ACTION_ID IS NOT NULL
                THEN '처리완료'
            ELSE '접수'
    END AS "처리상태"
     , RRRA.COMPLETED_DATE AS "처리일"
FROM RENTAL_REPLY_REPORT RRR
         JOIN USER_CODE UC_REPORTER
              ON RRR.REPORTER_ID = UC_REPORTER.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTER
              ON UC_REPORTER.USER_CODE = NL_REPORTER.USER_CODE
                  AND NL_REPORTER.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTER.USER_CODE)
         JOIN RENTAL_REPLY RR
              ON RRR.RENTAL_REPLY_ID = RR.RENTAL_REPLY_ID
         JOIN USER_CODE UC_REPORTED
              ON RR.USER_CODE = UC_REPORTED.USER_CODE
         JOIN NICKNAME_LOG NL_REPORTED
              ON UC_REPORTED.USER_CODE = NL_REPORTED.USER_CODE
                  AND NL_REPORTED.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                                     FROM NICKNAME_LOG
                                                     WHERE USER_CODE = UC_REPORTED.USER_CODE)
         JOIN REPORT_TYPE RT
              ON RRR.REPORT_TYPE_ID = RT.REPORT_TYPE_ID
         JOIN RENTAL_REPLY_REPORT_ACTION RRRA
              ON RRR.RENTAL_REPLY_REPORT_ID = RRRA.RENTAL_REPLY_REPORT_ID;



--○ 장비명병 평균 렌탈가 조회 뷰
CREATE OR REPLACE VIEW VW_RENTAL_PRICE
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(PRICE.PAY_ID) AS "렌탈건수"
     , ROUND(AVG(PRICE.PAY_AMOUNT), 0) AS "평균 렌탈가"
FROM
    CATEGORY CAT
        JOIN EQUIPMENT_REGISTRATION ER
             ON CAT.CATEGORY_ID = ER.CATEGORY_ID
        JOIN EQUIP_NAME EN
             ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
        JOIN BRAND BRA
             ON EN.BRAND_ID = BRA.BRAND_ID
        JOIN EQUIP_CODE EC
             ON ER.EQUIP_CODE = EC.EQUIP_CODE
        LEFT JOIN (SELECT REN.EQUIP_CODE, PAY.PAY_ID, PAY.PAY_AMOUNT
                   FROM RENTAL REN
                            JOIN RENTAL_MATCHING_REQ RMR
                                 ON REN.RENTAL_ID = RMR.RENTAL_ID
                            JOIN RENTAL_MATCHING_DONE RMD
                                 ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
                            JOIN PAY PAY
                                 ON RMD.RENTAL_MATCHING_DONE_ID = PAY.RENTAL_MATCHING_DONE_ID
                            LEFT JOIN PAY_CANCEL PC
                                      ON PAY.PAY_ID = PC.PAY_ID
                   WHERE PC.PAY_CANCEL_ID IS NULL

                   UNION ALL

                   SELECT STOREN.EQUIP_CODE, PAY.PAY_ID, PAY.PAY_AMOUNT
                   FROM STOREN STOREN
                            JOIN PAY PAY_STOREN_FEE
                                 ON STOREN.STOREN_ID = PAY_STOREN_FEE.STOREN_ID
                            JOIN PLATFORM_DELIVERY PL
                                 ON PAY_STOREN_FEE.PAY_ID = PL.PAY_ID
                            JOIN INSPEC_LIST IL
                                 ON PL.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
                            JOIN INSPEC_RESULT IR
                                 ON PL.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
                            JOIN INSPEC_RESULT_ACTION IRA
                                 ON IR.INSPEC_RESULT_ID = IRA.INSPEC_RESULT_ID
                            JOIN STOREN_MATCHING_REQ SMR
                                 ON IRA.INSPEC_RESULT_ACTION_ID = SMR.INSPEC_RESULT_ACTION_ID
                            JOIN STOREN_MATCHING_DONE SMD
                                 ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
                            JOIN PAY PAY
                                 ON SMD.STOREN_MATCHING_DONE_ID = PAY.STOREN_MATCHING_DONE_ID
                            LEFT JOIN PAY_CANCEL PC
                                      ON PAY.PAY_ID = PC.PAY_ID
                   WHERE PC.PAY_CANCEL_ID IS NULL
    ) PRICE
                  ON EC.EQUIP_CODE = PRICE.EQUIP_CODE
WHERE PRICE.PAY_ID IS NOT NULL
GROUP BY BRA.BRAND_NAME, EN.EQUIP_NAME, CAT.CATEGORY_NAME
ORDER BY CAT.CATEGORY_NAME, "평균 렌탈가";



--○ 장비명별 평균 신품가 조회 뷰
CREATE OR REPLACE VIEW VW_EQUIP_ORIGINAL_PRICE
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(ER.EQUIP_ID) AS "장비 등록건수"
     , ROUND(AVG(ER.ORIGINAL_PRICE), 0) AS "평균 신품가"
FROM EQUIPMENT_REGISTRATION ER
         JOIN EQUIP_NAME EN
              ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         JOIN BRAND BRA
              ON EN.BRAND_ID = BRA.BRAND_ID
         JOIN CATEGORY CAT
              ON ER.CATEGORY_ID = CAT.CATEGORY_ID
         JOIN EQUIP_CODE EC
              ON ER.EQUIP_CODE = EC.EQUIP_CODE
WHERE EC.OWN_END_DATE IS NULL
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME;



--○ 게시판 활성도 뷰
CREATE OR REPLACE VIEW VW_BOARD_ACTIVITY
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "게시글수"
     , COUNT(REP.REPLY_ID) AS "댓글수"
     , COUNT(PVL.POST_VIEW_LOG_ID) AS "조회수"
FROM BOARD BOA
         LEFT JOIN POST POS
                   ON POS.BOARD_ID = BOA.BOARD_ID
         LEFT JOIN REPLY REP
                   ON POS.POST_ID = REP.POST_ID
         LEFT JOIN POST_VIEW_LOG PVL
                   ON POS.POST_ID = PVL.POST_ID
GROUP BY BOA.BOARD_NAME;



--○ 신고유형 분석 뷰
CREATE OR REPLACE VIEW VW_REPORT_TYPE_ANALYSIS
AS
SELECT RT.REPORT_TYPE_NAME AS "신고유형"
     , COUNT(PR.POST_REPORT_ID) AS "게시글 신고수"
     , COUNT(RR.REPLY_REPORT_ID) AS "댓글 신고수"
     , (COUNT(PR.POST_REPORT_ID) + COUNT(RR.REPLY_REPORT_ID)) AS "총 신고수"
FROM REPORT_TYPE RT
         LEFT JOIN POST_REPORT PR
                   ON RT.REPORT_TYPE_ID = PR.REPORT_TYPE_ID
         LEFT JOIN REPLY_REPORT RR
                   ON RT.REPORT_TYPE_ID = RR.REPORT_TYPE_ID
GROUP BY RT.REPORT_TYPE_NAME;



--○ 게시판별 신규게시글수
CREATE OR REPLACE VIEW VW_NEW_POST_DATA
AS
SELECT BOA.BOARD_NAME AS "게시판명"
     , COUNT(POS.POST_ID) AS "신규 게시글수"
FROM POST POS
         LEFT JOIN BOARD BOA
                   ON POS.BOARD_ID = BOA.BOARD_ID
WHERE TRUNC(POS.CREATED_DATE) = TRUNC(SYSDATE)
GROUP BY BOA.BOARD_NAME;



--○ 카테고리별 인기 장비 통계 뷰
CREATE OR REPLACE VIEW VW_POPULAR_EQUIP
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME AS "장비명"
     , COUNT(RENTAL_MATCHING.RENTAL_MATCHING_ID) AS "일반 렌탈건수"
     , COUNT(STOREN_MATCHING.STOREN_MATCHING_ID) AS "스토렌 렌탈건수"
     , COUNT(RENTAL_MATCHING.RENTAL_MATCHING_ID) + COUNT(STOREN_MATCHING.STOREN_MATCHING_ID) AS "총 렌탈수"
FROM CATEGORY CAT
         JOIN EQUIPMENT_REGISTRATION ER
              ON CAT.CATEGORY_ID = ER.CATEGORY_ID
         JOIN EQUIP_NAME EN
              ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         JOIN BRAND BRA
              ON EN.BRAND_ID = BRA.BRAND_ID
         JOIN EQUIP_CODE EC
              ON ER.EQUIP_CODE = EC.EQUIP_CODE
         LEFT JOIN (SELECT REN.EQUIP_CODE, RMD.RENTAL_MATCHING_DONE_ID AS RENTAL_MATCHING_ID
                    FROM RENTAL REN
                             JOIN RENTAL_MATCHING_REQ RMR
                                  ON REN.RENTAL_ID = RMR.RENTAL_ID
                             JOIN RENTAL_MATCHING_DONE RMD
                                  ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
) RENTAL_MATCHING
                   ON EC.EQUIP_CODE = RENTAL_MATCHING.EQUIP_CODE

         LEFT JOIN (SELECT STOREN.EQUIP_CODE, SMD.STOREN_MATCHING_DONE_ID AS STOREN_MATCHING_ID
                    FROM STOREN STOREN
                             JOIN PAY PAY_STOREN_FEE
                                  ON STOREN.STOREN_ID = PAY_STOREN_FEE.STOREN_ID
                             JOIN PLATFORM_DELIVERY PD
                                  ON PAY_STOREN_FEE.PAY_ID = PD.PAY_ID
                             JOIN INSPEC_LIST IL
                                  ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
                             JOIN INSPEC_RESULT IR
                                  ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
                             JOIN INSPEC_RESULT_ACTION IRA
                                  ON IR.INSPEC_RESULT_ID = IRA.INSPEC_RESULT_ID
                             JOIN STOREN_MATCHING_REQ SMR
                                  ON IRA.INSPEC_RESULT_ACTION_ID = SMR.INSPEC_RESULT_ACTION_ID
                             JOIN STOREN_MATCHING_DONE SMD
                                  ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
) STOREN_MATCHING
                   ON EC.EQUIP_CODE = STOREN_MATCHING.EQUIP_CODE
GROUP BY CAT.CATEGORY_NAME, BRA.BRAND_NAME, EN.EQUIP_NAME
ORDER BY "총 렌탈수" DESC, CAT.CATEGORY_NAME;



--○ 등급별 장비 분포 통계 뷰
CREATE OR REPLACE VIEW VW_EQUIP_GRADE_DISTRIBUTION
AS
SELECT CAT.CATEGORY_NAME AS "카테고리명"
     , EG.EQUIP_GRADE_NAME AS "장비등급"
     , COUNT(EC.EQUIP_CODE) AS "장비수"
FROM EQUIP_CODE EC
         JOIN EQUIPMENT_REGISTRATION ER
              ON EC.EQUIP_CODE = ER.EQUIP_CODE
         JOIN CATEGORY CAT
              ON ER.CATEGORY_ID = CAT.CATEGORY_ID
         LEFT JOIN (SELECT STOREN.EQUIP_CODE, IR.EQUIP_GRADE_ID
                    FROM STOREN STOREN
                             JOIN PAY PAY
                                  ON STOREN.STOREN_ID = PAY.STOREN_ID
                             JOIN PLATFORM_DELIVERY PD
                                  ON PAY.PAY_ID = PD.PAY_ID
                             JOIN INSPEC_LIST IL
                                  ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
                             JOIN INSPEC_RESULT IR
                                  ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID

                    UNION

                    SELECT STORAGE.EQUIP_CODE, IR.EQUIP_GRADE_ID
                    FROM STORAGE STORAGE
                             JOIN PAY PAY
                                  ON STORAGE.STORAGE_ID = PAY.STORAGE_ID
                             JOIN PLATFORM_DELIVERY PD
                                  ON PAY.PAY_ID = PD.PAY_ID
                             JOIN INSPEC_LIST IL
                                  ON PD.PLATFORM_DELIVERY_ID = IL.PLATFORM_DELIVERY_ID
                             JOIN INSPEC_RESULT IR
                                  ON PD.PLATFORM_DELIVERY_ID = IR.PLATFORM_DELIVERY_ID
) IRG ON EC.EQUIP_CODE = IRG.EQUIP_CODE
         JOIN EQUIP_GRADE EG
              ON IRG.EQUIP_GRADE_ID = EG.EQUIP_GRADE_ID
GROUP BY CAT.CATEGORY_NAME, EG.EQUIP_GRADE_NAME
ORDER BY CAT.CATEGORY_NAME, EG.EQUIP_GRADE_NAME;



--○ 전체 인기글 조회 뷰
CREATE OR REPLACE VIEW VW_HOT_POST
AS
SELECT HPL.HOT_POST_LOG_ID AS "인기 게시글 ID"
     , BOA.BOARD_NAME AS "게시판명"
     , PL.POST_LABEL_NAME AS "말머리"
     , POS.POST_TITLE AS "게시글 제목"
     , POS.POST_CONTENT AS "게시글 내용"
     , AP.ATTACHMENT_PATH AS "첨부파일 경로"
     , NL.NICKNAME AS "작성자"
     , POS.CREATED_DATE AS "작성일"
     , (SELECT COUNT(*)
        FROM POST_VIEW_LOG PVL
        WHERE PVL.POST_ID = POS.POST_ID) AS "조회수"
     , (SELECT COUNT(*)
        FROM RECOMMEND REC
        WHERE REC.POST_ID = POS.POST_ID) AS "추천"
FROM HOT_POST_LOG HPL
         JOIN POST POS
              ON HPL.POST_ID = POS.POST_ID
         JOIN USER_CODE UC
              ON POS.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL
              ON UC.USER_CODE = NL.USER_CODE
                  AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                            FROM NICKNAME_LOG
                                            WHERE USER_CODE = UC.USER_CODE)
         JOIN POST_LABEL PL
              ON POS.POST_LABEL_ID = PL.POST_LABEL_ID
         JOIN BOARD BOA
              ON PL.BOARD_ID = BOA.BOARD_ID
         JOIN ATTACHMENT_POST AP
              ON POS.POST_ID = AP.POST_ID;



--○ 브랜드 & 장비명 목록 조회
CREATE OR REPLACE VIEW VW_BRAND_EQUIP_NAME
AS
SELECT BRA.BRAND_ID AS "브랜드 ID"
     , BRA.BRAND_NAME AS "브랜드명"
     , EN.EQUIP_NAME_ID AS "장비명 ID"
     , EN.EQUIP_NAME AS "장비명"
FROM EQUIP_NAME EN
         JOIN BRAND BRA
              ON EN.BRAND_ID = BRA.BRAND_ID
ORDER BY BRA.BRAND_NAME;



--○ 이벤트 관리 뷰(이벤트 응모 현황)
CREATE OR REPLACE VIEW VW_EVENT
AS
SELECT EVE.EVENT_ID AS "이벤트 ID"
     , ADM.ADMIN_ID AS "관리자 ID"
     , EVE.EVENT_TITLE AS "이벤트명"
     , EVE.EVENT_START_DATE AS "이벤트 시작일"
     , EVE.EVENT_END_DATE AS "이벤트 종료일"
     , EE.USER_CODE AS "응모한 회원코드"
     , NL.NICKNAME AS "응모한 회원닉네임"
     , EE.EVENT_ENTRY_POINT AS "이벤트 응모 포인트"
     , EE.CREATED_DATE AS "응모일"
FROM EVENT_ENTRY EE
         JOIN EVENT EVE
              ON EE.EVENT_ID = EVE.EVENT_ID
         JOIN ADMINS ADM
              ON EVE.ADMIN_ID = ADM.ADMIN_ID
         JOIN USER_CODE UC
              ON EE.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL
              ON UC.USER_CODE = NL.USER_CODE
                  AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                            FROM NICKNAME_LOG
                                            WHERE USER_CODE = UC.USER_CODE);



--○ 이벤트 관리 뷰(당첨자 조회)
CREATE OR REPLACE VIEW VW_EVENT_WIN
AS
SELECT EVE.EVENT_ID AS "이벤트 ID"
     , ADM.ADMIN_ID AS "관리자 ID"
     , EVE.EVENT_TITLE AS "이벤트명"
     , EVE.EVENT_START_DATE AS "이벤트 시작일"
     , EVE.EVENT_END_DATE AS "이벤트 종료일"
     , EW.EVENT_ENTRY_ID AS "당첨된 응모ID"
     , EE.USER_CODE AS "당첨된 회원코드"
     , NL.NICKNAME AS "당첨된 회원닉네임"
FROM EVENT_WIN EW
         JOIN EVENT_ENTRY EE
              ON EW.EVENT_ENTRY_ID = EE.EVENT_ENTRY_ID
         JOIN USER_CODE UC
              ON EE.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL
              ON UC.USER_CODE = NL.USER_CODE
                  AND NL.NICKNAME_LOG_ID = (SELECT MAX(NICKNAME_LOG_ID)
                                            FROM NICKNAME_LOG
                                            WHERE USER_CODE = UC.USER_CODE)
         JOIN EVENT EVE
              ON EE.EVENT_ID = EVE.EVENT_ID
         JOIN ADMINS ADM
              ON EVE.ADMIN_ID = ADM.ADMIN_ID;






---------------------------------------------------------------------------------------
-------------------------■■■ 뷰 조회 ■■■-------------------------


-------------------------※ 커뮤니티 관련 뷰 ※-------------------------

--○ 댓글 뷰
SELECT *
FROM VW_REPLY;

--○ 게시판 뷰(게시판, 말머리)
SELECT *
FROM VW_BOARD;

--○ 고독한 캠핑방 게시글 뷰
SELECT *
FROM VW_LONELY_CAMPING_POST;

--○ 전체 인기글 조회 뷰
SELECT *
FROM VW_HOT_POST;

--○ 게시판별 활성도 조회 뷰
SELECT *
FROM VW_BOARD_ACTIVITY;

--○ 신규 게시글수
SELECT *
FROM VW_NEW_POST_DATA;


-------------------------※ 신고 관련 뷰 ※-------------------------

--○ 통합 신고 관리 뷰
SELECT *
FROM VW_REPORT_MANAGEMENT;

--○ 신고 유형별 분석 뷰
SELECT *
FROM VW_REPORT_TYPE_ANALYSIS;



-------------------------※ 장비 관련 뷰 ※-------------------------

--○ 장비명별 평균 렌탈가 조회 
SELECT *
FROM VW_RENTAL_PRICE;

--○ 장비명별 평균 신품가 조회 
SELECT *
FROM VW_EQUIP_ORIGINAL_PRICE;

--○ 카테고리별 인기 장비 조회 뷰
SELECT *
FROM VW_POPULAR_EQUIP;

--○ 장비등급별 분포 통계 뷰
SELECT *
FROM VW_EQUIP_GRADE_DISTRIBUTION;

--○ 브랜드 & 장비명 목록 조회
SELECT *
FROM VW_BRAND_EQUIP_NAME;



-------------------------※ 이벤트 관련 뷰 ※-------------------------

--○ 이벤트 관리 뷰(이벤트 응모 현황)
SELECT *
FROM VW_EVENT;

--○ 이벤트 관리 뷰(당첨자 조회)
SELECT *
FROM VW_EVENT_WIN;

-------------------------------------------------------------------------------------------------------------------------------------------------

-- 유진 view


--○ PAY_ID를 알면 장비코드를 알 수 있는 뷰
CREATE OR REPLACE VIEW VW_PAY_ID_TO_EQUIP_CODE
AS
SELECT
    p.PAY_ID,
    -- 결제종류 컬럼
    CASE
        -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 '렌탈_렌탈비결제'
        WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL
            THEN '렌탈_렌탈비결제'
        -- STORAGE_ID가 NULL이 아니면 '보관관_보관비결제'
        WHEN p.STORAGE_ID IS NOT NULL
            THEN '보관_보관비결제'
        -- STOREN_ID가 NULL이 아니면 '스토렌_보관비결제'
        WHEN p.STOREN_ID IS NOT NULL
            THEN '스토렌_보관비결제'
        -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 '스토렌_렌탈비결제'
        WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL
            THEN '스토렌_렌탈비결제'
        -- 위의 모든 조건이 만족되지 않으면 NULL 반환
        ELSE NULL
        END AS 결제종류,

    -- 장비코드 컬럼럼
    CASE
        -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 RENTAL 테이블에서 EQUIP_CODE를 찾는다
        WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL THEN
            (
                SELECT r.EQUIP_CODE
                FROM RENTAL_MATCHING_REQ rmq
                         JOIN RENTAL r ON rmq.RENTAL_ID = r.RENTAL_ID
                WHERE rmq.RENTAL_MATCHING_REQ_ID = p.RENTAL_MATCHING_DONE_ID
            )
        -- STORAGE_ID가 NULL이 아니면 STORAGE 테이블에서 EQUIP_CODE를 찾는다
        WHEN p.STORAGE_ID IS NOT NULL THEN
            (
                SELECT s.EQUIP_CODE
                FROM STORAGE s
                WHERE s.STORAGE_ID = p.STORAGE_ID
            )
        -- STOREN_ID가 NULL이 아니면 STOREN 테이블에서 EQUIP_CODE를 찾는다
        WHEN p.STOREN_ID IS NOT NULL THEN
            (
                SELECT st.EQUIP_CODE
                FROM STOREN st
                WHERE st.STOREN_ID = p.STOREN_ID
            )
        -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 INSPEC_RESULT_ACTION을 거쳐 EQUIP_CODE를 찾는다
        WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL THEN
            (
                SELECT st.EQUIP_CODE
                FROM STOREN_MATCHING_REQ smr
                         JOIN INSPEC_RESULT_ACTION ira ON smr.STOREN_IRA_ID = ira.INSPEC_RESULT_ACTION_ID
                         JOIN INSPEC_RESULT ir ON ira.INSPEC_RESULT_ID = ir.INSPEC_RESULT_ID
                         LEFT JOIN PLATFORM_DELIVERY pd ON ir.PLATFORM_DELIVERY_ID = pd.PLATFORM_DELIVERY_ID
                         LEFT JOIN PLATFORM_DELIVERY_RETURN pdr ON ir.PLATFORM_DELIVERY_RETURN_ID = pdr.PLATFORM_DELIVERY_RETURN_ID
                         LEFT JOIN PAY p2 ON pd.PAY_ID = p2.PAY_ID OR pdr.PLATFORM_DELIVERY_ID = p2.PAY_ID
                         LEFT JOIN STOREN st ON p2.STOREN_ID = st.STOREN_ID
                WHERE smr.STOREN_MATCHING_REQ_ID = p.STOREN_MATCHING_DONE_ID
            )
        -- 위의 모든 조건이 만족되지 않으면 NULL 반환
        ELSE NULL
        END AS 장비코드
FROM
    PAY p;




--○ 거래상품과 만족도 묶기
CREATE OR REPLACE VIEW VW_RENTAL_AND_SAT
AS
SELECT SL.REVIEWER_ID "평가자_ID"
     , SL.REVIEWEE_ID "피평가자_ID"
     , SL.SATIS_SCORE "만족도_점수"
     , SL.SATIS_COMMENT "만족도_코멘트"
     , SL.CREATED_DATE "만족도_생성일"
     , RMD.RENTAL_MATCHING_DONE_ID "렌탈매칭완료_ID", R.RENTAL_TITLE "렌탈제목", R.RENTAL_ID "렌탈ID", EC.EQUIP_CODE "장비코드"
FROM SATISFACTION_LOG SL
         LEFT JOIN RENTAL_MATCHING_DONE RMD
                   ON SL.RENTAL_MATCHING_DONE_ID = RMD.RENTAL_MATCHING_DONE_ID
         LEFT JOIN RENTAL_MATCHING_REQ RMR
                   ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
         LEFT JOIN RENTAL R
                   ON RMR.RENTAL_ID = R.RENTAL_ID
         LEFT JOIN EQUIP_CODE EC
                   ON R.EQUIP_CODE = EC.EQUIP_CODE;




--○ 관리자 작업 이력 조회 뷰(활동정지회원)
CREATE OR REPLACE VIEW VW_SUSPENDED_USER_AND_ADMINS
AS
SELECT T.*, CASE WHEN T."활동정지시작일" - SYSDATE >= 30 THEN '정지해제'
                 ELSE '정지 중' END "활동정지상태"
FROM
    (
        SELECT A.USER_CODE "관리자회원코드", A.ADMIN_ID "관리자ID"
             , SU.USER_CODE "활동정지유저코드", SU.SUSPENDED_START_DATE "활동정지시작일"
        FROM SUSPENDED_USER SU
                 JOIN ADMINS A
                      ON SU.ADMIN_ID = A.ADMIN_ID
    ) T;




--○ 매칭 관리 뷰(렌탈)
CREATE OR REPLACE VIEW VW_RENTAL_AND_MATCHING
AS
SELECT R.RENTAL_ID "렌탈ID"
     , R.EQUIP_CODE "장비_코드"
     , R.RENTAL_TITLE "렌탈_제목"
     , RMR.RENTAL_MATCHING_REQUESTER_ID "렌탈매칭신청자코드"
     , RMR.RENTAL_START_DATE "렌탈_시작일"
     , RMR.RENTAL_END_DATE "렌탈_종료일"
     , RMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(RMD.RENTAL_MATCHING_REQ_ID) > 0 THEN '승인'
            ELSE '미승인'
    END "승인여부"
     , RMD.APPROVED_DATE "승인_일자"
FROM RENTAL_MATCHING_REQ RMR
         LEFT JOIN RENTAL_MATCHING_DONE RMD
                   ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
         LEFT JOIN RENTAL R
                   ON RMR.RENTAL_ID = R.RENTAL_ID
GROUP BY R.RENTAL_ID
       , R.EQUIP_CODE
       , R.RENTAL_TITLE
       , RMR.RENTAL_MATCHING_REQUESTER_ID
       , RMR.RENTAL_START_DATE
       , RMR.RENTAL_END_DATE
       , RMR.REQUESTED_DATE
       , RMD.APPROVED_DATE;



--○ 매칭 관리 뷰(스토렌)
CREATE OR REPLACE VIEW VW_STOREN_AND_MATCHING
AS
SELECT S.STOREN_ID "스토렌ID"
     , S.EQUIP_CODE "장비_코드"
     , S.STOREN_TITLE "스토렌_제목"
     , SMR.STOREN_MATCHING_REQ_USER_ID "스토렌매칭신청자코드"
     , SMR.RENTAL_START_DATE "렌탈_시작일"
     , SMR.RENTAL_END_DATE "렌탈_종료일"
     , SMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(SMD.STOREN_MATCHING_REQ_ID) > 0 THEN '승인'
            ELSE '미승인'
    END "승인여부"
     , SMD.APPROVED_DATE "승인_일자"
FROM STOREN_MATCHING_REQ SMR
         LEFT JOIN STOREN_MATCHING_DONE SMD
                   ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
         LEFT JOIN STOREN_IRA SI
                   ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         LEFT JOIN INSPEC_RESULT_ACTION IRA
                   ON SI.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
         LEFT JOIN INSPEC_RESULT IR
                   ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
         LEFT JOIN PLATFORM_DELIVERY PD
                   ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         LEFT JOIN PAY P
                   ON PD.PAY_ID = P.PAY_ID
         LEFT JOIN STOREN S
                   ON P.STOREN_ID = S.STOREN_ID
GROUP BY SMR.STOREN_MATCHING_REQ_USER_ID
       , SMR.RENTAL_START_DATE
       , SMR.RENTAL_END_DATE
       , SMR.REQUESTED_DATE
       , SMD.APPROVED_DATE
       , S.STOREN_ID
       , S.EQUIP_CODE
       , S.STOREN_TITLE;




--○ 수익 조회(렌탈)
create or replace view VW_RENTAL_AND_PAY
AS
select R.EQUIP_CODE "장비코드"
     , EN.EQUIP_NAME "장비명"
     , ER.USER_CODE "소유자회원코드"
     , R.RENTAL_ID "렌탈ID"
     , R.RENTAL_TITLE "렌탈제목"
     , P.PAY_AMOUNT "결제금액"
     , CASE WHEN COUNT(PC.PAY_ID) > 0 THEN '결제취소'
            ELSE '결제완료'
    END "결제여부"
     , P.PAY_DATE "결제일자"
from RENTAL_MATCHING_DONE RMD
         LEFT JOIN RENTAL_MATCHING_REQ RMR
                   ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
         LEFT JOIN RENTAL R
                   ON RMR.RENTAL_ID = R.RENTAL_ID
         LEFT JOIN EQUIPMENT_REGISTRATION ER
                   ON R.EQUIP_CODE = ER.EQUIP_CODE
         LEFT JOIN EQUIP_NAME EN
                   ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         LEFT JOIN PAY P
                   ON RMD.RENTAL_MATCHING_DONE_ID = P.RENTAL_MATCHING_DONE_ID
         LEFT JOIN PAY_CANCEL PC
                   ON P.PAY_ID = PC.PAY_ID
GROUP BY R.EQUIP_CODE
       , EN.EQUIP_NAME
       , ER.USER_CODE
       , R.RENTAL_ID
       , R.RENTAL_TITLE
       , P.PAY_AMOUNT
       , P.PAY_DATE;




--○ 수익 조회(스토렌)
create or replace view VW_STOREN_AND_PAY
AS
select S.EQUIP_CODE "장비코드"
     , EN.EQUIP_NAME "장비명"
     , ER.USER_CODE "소유자회원코드"
     , S.STOREN_ID "스토렌ID"
     , S.STOREN_TITLE "렌탈제목"
     , P.PAY_AMOUNT "결제금액"
     , CASE WHEN COUNT(PC.PAY_ID) > 0 THEN '결제취소'
            ELSE '결제완료'
    END "결제여부"
     , P.PAY_DATE "결제일자"
from STOREN_MATCHING_DONE SMD
         LEFT JOIN STOREN_MATCHING_REQ SMR
                   ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
         LEFT JOIN INSPEC_RESULT_ACTION IRA
                   ON SMR.STOREN_IRA_ID = IRA.INSPEC_RESULT_ACTION_ID
         LEFT JOIN INSPEC_RESULT IR
                   ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
         LEFT JOIN PLATFORM_DELIVERY PD
                   ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         LEFT JOIN VW_PAY_ID_TO_EQUIP_CODE VWP
                   ON PD.PAY_ID = VWP.PAY_ID
         LEFT JOIN STOREN S
                   ON VWP.장비코드 = S.EQUIP_CODE
         LEFT JOIN EQUIPMENT_REGISTRATION ER
                   ON S.EQUIP_CODE = ER.EQUIP_CODE
         LEFT JOIN EQUIP_NAME EN
                   ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         LEFT JOIN PAY P
                   ON SMD.STOREN_MATCHING_DONE_ID = P.STOREN_MATCHING_DONE_ID
         LEFT JOIN PAY_CANCEL PC
                   ON P.PAY_ID = PC.PAY_ID
GROUP BY S.EQUIP_CODE
       , EN.EQUIP_NAME
       , ER.USER_CODE
       , S.STOREN_ID
       , S.STOREN_TITLE
       , P.PAY_AMOUNT
       , P.PAY_DATE;




--○ 검수 목록 뷰(플랫폼배송 -> '입고검수')
CREATE OR REPLACE VIEW VW_INSPEC_LIST_AND_PD
AS
SELECT VWP.장비코드 "장비코드"
     , '입고검수' "검수유형"
     , EN.EQUIP_NAME "장비명"
     , C.CATEGORY_NAME "카테고리명"
     , II.INSPEC_ITEM_NAME "검수항목"
     , A.ADMIN_ID "관리자ID"
     , IG.INSPEC_GRADE_NAME "검수결과"
     , IL.INSPEC_COMMENT "검수코멘트"
     , CASE WHEN IL.INSPEC_GRADE_ID IS NULL THEN '검수미완료'
            ELSE '검수완료'
    END "검수상태"
FROM INSPEC_LIST IL
         JOIN CATE_INSPEC CI
              ON IL.CATE_INSPEC_ID = CI.CATE_INSPEC_ID
         JOIN CATEGORY C
              ON CI.CATEGORY_ID = C.CATEGORY_ID
         JOIN INSPEC_ITEM II
              ON CI.INSPEC_ITEM_ID = II.INSPEC_ITEM_ID
         JOIN INSPEC_GRADE IG
              ON IL.INSPEC_GRADE_ID = IG.INSPEC_GRADE_ID
         RIGHT JOIN PLATFORM_DELIVERY PD
                    ON IL.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         RIGHT JOIN VW_PAY_ID_TO_EQUIP_CODE VWP
                    ON PD.PAY_ID = VWP.PAY_ID
         RIGHT JOIN EQUIPMENT_REGISTRATION ER
                    ON VWP.장비코드 = ER.EQUIP_CODE
         RIGHT JOIN EQUIP_NAME EN
                    ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         RIGHT JOIN ADMINS A
                    ON IL.ADMIN_ID = A.ADMIN_ID
WHERE IL.PLATFORM_DELIVERY_ID IS NOT NULL AND IL.PLATFORM_DELIVERY_RETURN_ID IS NULL;




--○ 검수 목록 뷰(플랫폼배송반환 -> '스토렌반환검수')
CREATE OR REPLACE VIEW VW_INSPEC_LIST_AND_PDR
AS
SELECT VWP.장비코드 AS "장비코드"
     , '스토렌반환' "검수유형"
     , EN.EQUIP_NAME "장비명"
     , C.CATEGORY_NAME "카테고리명"
     , II.INSPEC_ITEM_NAME "검수항목"
     , A.ADMIN_ID "관리자ID"
     , IG.INSPEC_GRADE_NAME "검수결과"
     , IL.INSPEC_COMMENT "검수코멘트"
     , CASE WHEN IL.INSPEC_GRADE_ID IS NULL THEN '검수미완료'
            ELSE '검수완료'
    END "검수상태"
FROM INSPEC_LIST IL
         JOIN CATE_INSPEC CI
              ON IL.CATE_INSPEC_ID = CI.CATE_INSPEC_ID
         JOIN CATEGORY C
              ON CI.CATEGORY_ID = C.CATEGORY_ID
         JOIN INSPEC_ITEM II
              ON CI.INSPEC_ITEM_ID = II.INSPEC_ITEM_ID
         JOIN INSPEC_GRADE IG
              ON IL.INSPEC_GRADE_ID = IG.INSPEC_GRADE_ID
         JOIN PLATFORM_DELIVERY_RETURN PDR
              ON IL.PLATFORM_DELIVERY_RETURN_ID = PDR.PLATFORM_DELIVERY_RETURN_ID
         JOIN PLATFORM_DELIVERY PD
              ON PDR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         JOIN VW_PAY_ID_TO_EQUIP_CODE VWP
              ON PD.PAY_ID = VWP.PAY_ID
         JOIN EQUIPMENT_REGISTRATION ER
              ON VWP.장비코드 = ER.EQUIP_CODE
         JOIN EQUIP_NAME EN
              ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         JOIN ADMINS A
              ON IL.ADMIN_ID = A.ADMIN_ID;




--○ 문제 관리 뷰(분실)
CREATE OR REPLACE VIEW VW_STOREN_AND_LOST
AS
SELECT ER.EQUIP_CODE "장비코드"
     , EN.EQUIP_NAME "장비명"
     , P.STOREN_MATCHING_DONE_ID "스토렌매칭완료ID"
     , '분실' "문제유형"
     , SMR.STOREN_MATCHING_REQ_USER_ID "청구대상자코드"
     , RAP.RENTER_ADD_PAY_AMOUNT "추가결제금액"
     , RAP.PAY_DATE "결제일"
FROM RENTER_PROBLEM_LOST RRL
         JOIN STOREN_MATCHING_DONE SMD
              ON RRL.STOREN_MATCHING_DONE_ID = SMD.STOREN_MATCHING_DONE_ID
         JOIN STOREN_MATCHING_REQ SMR
              ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
         JOIN INSPEC_RESULT_ACTION IRA
              ON SMR.STOREN_IRA_ID = IRA.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT IR
              ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
         JOIN PLATFORM_DELIVERY PD
              ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         JOIN PAY P
              ON PD.PAY_ID = P.PAY_ID
         JOIN VW_PAY_ID_TO_EQUIP_CODE VWP
              ON VWP.PAY_ID = P.PAY_ID
         JOIN EQUIPMENT_REGISTRATION ER
              ON VWP.장비코드 = ER.EQUIP_CODE
         JOIN EQUIP_NAME EN
              ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
         JOIN RENTER_ADD_PAY RAP
              ON RRL.RENTER_PROBLEM_LOST_ID = RAP.RENTER_PROBLEM_LOST_ID;




--○ 문제 관리 뷰(연체+파손)
CREATE OR REPLACE VIEW VW_STOREN_AND_PROBLEM
AS
SELECT S.EQUIP_CODE "장비코드"
     , EN.EQUIP_NAME "장비명"
     , SI.STOREN_IRA_ID "스토렌ID"
     , RPT.RENTER_PROBLEM_TYPE_NAME "문제유형"
     , SMR.RENTAL_END_DATE "기존렌탈종료일"
     , PDR.DELIVERY_START_DATE "배송시작일"
     , IR1.EQUIP_GRADE_ID "기존장비등급"
     , IR2.EQUIP_GRADE_ID "변경된장비등급"
     , SMR.STOREN_MATCHING_REQ_USER_ID "청구대상자코드"
     , RAP.RENTER_ADD_PAY_AMOUNT "추가결제금액"
     , RAP.PAY_DATE "결제일"
FROM RENTER_PROBLEM RP
         JOIN RENTER_ADD_PAY RAP
              ON RP.RENTER_PROBLEM_ID = RAP.RENTER_PROBLEM_ID
         JOIN RENTER_PROBLEM_TYPE RPT
              ON RP.RENTER_PROBLEM_TYPE_ID = RPT.RENTER_PROBLEM_TYPE_ID
         JOIN INSPEC_RESULT_ACTION IRA
              ON RP.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT IR2                                  --2차 검수 결과 처리(렌탈 후 반환 시 등급)
              ON IRA.INSPEC_RESULT_ID = IR2.INSPEC_RESULT_ID
         JOIN PLATFORM_DELIVERY_RETURN PDR                       --렌탈 후 반환 배송정보
              ON IR2.PLATFORM_DELIVERY_RETURN_ID = PDR.PLATFORM_DELIVERY_RETURN_ID
         JOIN PLATFORM_DELIVERY PD                               --첫 입고 시 배송정보
              ON PDR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         JOIN INSPEC_RESULT IR1
              ON PD.PLATFORM_DELIVERY_ID = IR1.PLATFORM_DELIVERY_ID
         JOIN PAY P                                              --첫 입고 시 스토렌 보관비 결제정보
              ON PD.PAY_ID = P.PAY_ID
         JOIN STOREN_MATCHING_DONE SMD                           --첫 입고 후 스토렌매칭완료
              ON P.STOREN_MATCHING_DONE_ID = SMD.STOREN_MATCHING_DONE_ID
         JOIN STOREN_MATCHING_REQ SMR                            --첫 입고 후 스토렌매칭신청
              ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
         JOIN STOREN_IRA SI                                      --첫 입고 검수결과와 묶는 SI
              ON SMR.STOREN_IRA_ID = SI.STOREN_IRA_ID
         JOIN STOREN S                                           --스토렌ID
              ON SI.STOREN_ID = S.STOREN_ID
         JOIN EQUIPMENT_REGISTRATION ER
              ON S.EQUIP_CODE = ER.EQUIP_CODE
         JOIN EQUIP_NAME EN
              ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
WHERE IR2.PLATFORM_DELIVERY_ID IS NULL AND IR1.PLATFORM_DELIVERY_RETURN_ID IS NULL;


----------------------------------------------------------------------------------------------------------------------------------------------------

--○ 은솔 view

--○ '쿠폰 관리' 뷰 
-- 뷰 이름 : VW_COUPON_MANAGEMENT
CREATE OR REPLACE VIEW VW_COUPON_MANAGEMENT AS
SELECT
    OC.OWNED_COUPON_ID AS "보유 쿠폰 ID",
    UC.USER_CODE AS "회원 코드",
    NL.NICKNAME AS "회원 닉네임",
    IC.COUPON_NAME AS "쿠폰 이름",
    CT.COUPON_TYPE_NAME AS "쿠폰 종류",
    IC.COUPON_DISCOUNT AS "쿠폰 할인율",
    IC.COUPON_MONTH AS "쿠폰 유효 개월수",
    IC.ISSUED_DATE AS "쿠폰 발행일",
    OC.COMPLETED_DATE AS "쿠폰 사용완료일"
FROM OWNED_COUPON OC
         JOIN ISSUED_COUPON IC ON OC.ISSUED_COUPON_ID = IC.ISSUED_COUPON_ID
         JOIN COUPON_TYPE CT ON IC.COUPON_TYPE_ID = CT.COUPON_TYPE_ID
         JOIN USER_CODE UC ON OC.USER_CODE = UC.USER_CODE
         LEFT JOIN (
    SELECT USER_CODE, NICKNAME
    FROM NICKNAME_LOG NL
    WHERE NL.LAST_UPDATED_DATE = (
        SELECT MAX(LAST_UPDATED_DATE)
        FROM NICKNAME_LOG
        WHERE USER_CODE = NL.USER_CODE
    )
) NL ON NL.USER_CODE = UC.USER_CODE;

SELECT *
FROM VW_COUPON_MANAGEMENT;






--○ '게시물 관리' 뷰 
-- 뷰 이름 : VW_POST_MANAGEMENT
CREATE OR REPLACE VIEW VW_POST_MANAGEMENT AS
SELECT
    P.POST_ID AS "게시물 ID",
    LATEST_NICK.NICKNAME AS "회원 닉네임",
    P.POST_TITLE AS "게시물 제목",
    P.POST_CONTENT AS "게시물 내용",
    P.CREATED_DATE AS "게시물 생성일",
    BC.BOARD_CATE_NAME AS "게시판 카테고리",
    B.BOARD_NAME AS "게시판 이름",
    PL.POST_LABEL_NAME AS "말머리 이름",
    (SELECT COUNT(*) FROM POST_VIEW_LOG PVL WHERE PVL.POST_ID = P.POST_ID) AS "게시물 조회수",
    CASE
        WHEN EXISTS (SELECT 1 FROM HOT_POST_LOG HPL WHERE HPL.POST_ID = P.POST_ID) THEN 1
        ELSE 0
        END AS "인기글 지정 여부",
    (SELECT COUNT(*) FROM RECOMMEND R WHERE R.POST_ID = P.POST_ID) AS "추천수",
    (SELECT COUNT(*) FROM REPLY RP WHERE RP.POST_ID = P.POST_ID) AS "댓글수",
    (SELECT COUNT(*) FROM BOOKMARK BM WHERE BM.POST_ID = P.POST_ID) AS "북마크수",
    (SELECT COUNT(*) FROM ATTACHMENT_POST AP WHERE AP.POST_ID = P.POST_ID) AS "첨부파일 수",
    (SELECT COUNT(*) FROM POST_REPORT PR WHERE PR.POST_ID = P.POST_ID) AS "게시글 신고 건수",
    (SELECT RAT.REPORT_ACTION_TYPE_NAME
     FROM POST_REPORT_ACTION PRA
              JOIN REPORT_ACTION_TYPE RAT ON PRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
     WHERE PRA.POST_REPORT_ID IN (
         SELECT PR2.POST_REPORT_ID FROM POST_REPORT PR2 WHERE PR2.POST_ID = P.POST_ID
     ) AND ROWNUM = 1
    ) AS "게시글 신고 처리 유형",
    CASE
        WHEN EXISTS (SELECT 1 FROM POST_REPORT PR WHERE PR.POST_ID = P.POST_ID) THEN
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM POST_REPORT_ACTION PRA
                             JOIN REPORT_ACTION_TYPE RAT ON PRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
                    WHERE PRA.POST_REPORT_ID IN (
                        SELECT PR2.POST_REPORT_ID FROM POST_REPORT PR2 WHERE PR2.POST_ID = P.POST_ID
                    ) AND RAT.REPORT_ACTION_TYPE_NAME = '신고자 처벌'
                ) THEN 0
                ELSE 1
                END
        ELSE 0
        END AS "블라인드 여부"
FROM POST P
         JOIN BOARD B ON P.BOARD_ID = B.BOARD_ID
         JOIN BOARD_CATEGORY BC ON B.BOARD_CATE_ID = BC.BOARD_CATE_ID
         LEFT JOIN POST_LABEL PL ON P.POST_LABEL_ID = PL.POST_LABEL_ID
         JOIN USER_CODE UC ON P.USER_CODE = UC.USER_CODE
         LEFT JOIN (
    SELECT NL.USER_CODE, NL.NICKNAME
    FROM NICKNAME_LOG NL
    WHERE NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = NL.USER_CODE
    )
) LATEST_NICK ON LATEST_NICK.USER_CODE = UC.USER_CODE;


SELECT *
FROM VW_POST_MANAGEMENT;




--○ '결제 관리' 뷰
-- 뷰 이름 : VW_PAYMENT_MANAGEMENT
CREATE OR REPLACE VIEW VW_PAYMENT_MANAGEMENT AS
SELECT
    USER_INFO.USER_CODE AS "회원 코드",
    USER_INFO.NICKNAME AS "회원 닉네임",
    PM.PAY_METHOD_NAME AS "결제 방법",
    P.PAY_AMOUNT AS "결제 금액",
    P.PAY_DATE AS "결제 일자",
    PC.CANCEL_DATE AS "결제 취소일",
    PCR.PAY_CANCEL_REASON_NAME AS "결제 취소사유",
    P.STORAGE_ID AS "보관 ID",
    P.STOREN_ID AS "스토렌 ID",
    P.RENTAL_MATCHING_DONE_ID AS "렌탈 매칭 완료 ID",
    P.STOREN_MATCHING_DONE_ID AS "스토렌 매칭 완료 ID"
FROM PAY P
         JOIN PAY_METHOD PM ON P.PAY_METHOD_ID = PM.PAY_METHOD_ID
         LEFT JOIN PAY_CANCEL PC ON P.PAY_ID = PC.PAY_ID
         LEFT JOIN PAY_CANCEL_REASON PCR ON PC.PAY_CANCEL_REASON_ID = PCR.PAY_CANCEL_REASON_ID
         LEFT JOIN (
    SELECT
        UC.USER_CODE,
        NL.NICKNAME,
        RMD.RENTAL_MATCHING_DONE_ID,
        SMD.STOREN_MATCHING_DONE_ID
    FROM USER_CODE UC
             JOIN NICKNAME_LOG NL ON UC.USER_CODE = NL.USER_CODE
        AND NL.LAST_UPDATED_DATE = (
            SELECT MAX(LAST_UPDATED_DATE)
            FROM NICKNAME_LOG
            WHERE USER_CODE = UC.USER_CODE
        )
             LEFT JOIN (
        SELECT RMR.RENTAL_MATCHING_REQUESTER_ID AS USER_CODE, RMD.RENTAL_MATCHING_DONE_ID
        FROM RENTAL_MATCHING_DONE RMD
                 JOIN RENTAL_MATCHING_REQ RMR ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
    ) RMD ON RMD.USER_CODE = UC.USER_CODE
             LEFT JOIN (
        SELECT SMR.STOREN_MATCHING_REQ_USER_ID AS USER_CODE, SMD.STOREN_MATCHING_DONE_ID
        FROM STOREN_MATCHING_DONE SMD
                 JOIN STOREN_MATCHING_REQ SMR ON SMD.STOREN_MATCHING_REQ_ID = SMR.STOREN_MATCHING_REQ_ID
    ) SMD ON SMD.USER_CODE = UC.USER_CODE
) USER_INFO ON (
    USER_INFO.RENTAL_MATCHING_DONE_ID = P.RENTAL_MATCHING_DONE_ID OR
    USER_INFO.STOREN_MATCHING_DONE_ID = P.STOREN_MATCHING_DONE_ID
    );

SELECT *
FROM VW_PAYMENT_MANAGEMENT;




--○ '댓글 관리' 뷰 
-- 뷰 이름 : VW_REPLY_MANAGEMENT
CREATE OR REPLACE VIEW VW_REPLY_MANAGEMENT AS
SELECT
    R.REPLY_ID AS "댓글 ID",
    R.REPLY_CONTENT AS "댓글 내용",
    R.CREATED_DATE AS "댓글 작성일",
    UC.USER_CODE AS "회원 코드",
    LATEST_NICK.NICKNAME AS "회원 닉네임",
-- 첨부파일 수
    (SELECT COUNT(*) FROM ATTACHMENT_REPLY AR WHERE AR.REPLY_ID = R.REPLY_ID) AS "첨부파일 수",
-- 신고 건수
    (SELECT COUNT(*) FROM REPLY_REPORT RR WHERE RR.REPLY_ID = R.REPLY_ID) AS "댓글 신고 접수 건수",
-- 신고 처리 유형 (1건만)
    (SELECT RAT.REPORT_ACTION_TYPE_NAME
     FROM REPLY_REPORT_ACTION RRA
              JOIN REPORT_ACTION_TYPE RAT ON RRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
     WHERE RRA.REPLY_REPORT_ID IN (
         SELECT RR2.REPLY_REPORT_ID FROM REPLY_REPORT RR2 WHERE RR2.REPLY_ID = R.REPLY_ID
     ) AND ROWNUM = 1
    ) AS "댓글 신고 처리 유형",
-- 블라인드 여부: 신고가 있고, 그 중 하나라도 신고자 처벌이 아니면 블라인드
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM REPLY_REPORT RR
            WHERE RR.REPLY_ID = R.REPLY_ID
        ) AND NOT EXISTS (
            SELECT 1
            FROM REPLY_REPORT_ACTION RRA
                     JOIN REPORT_ACTION_TYPE RAT ON RRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
            WHERE RRA.REPLY_REPORT_ID IN (
                SELECT RR2.REPLY_REPORT_ID FROM REPLY_REPORT RR2 WHERE RR2.REPLY_ID = R.REPLY_ID
            )
              AND RAT.REPORT_ACTION_TYPE_NAME = '신고자 처벌'
        )
            THEN 'Y'
        ELSE 'N'
        END AS "블라인드 여부"
FROM REPLY R
         JOIN USER_CODE UC ON R.USER_CODE = UC.USER_CODE
         LEFT JOIN (
    SELECT NL.USER_CODE, NL.NICKNAME
    FROM NICKNAME_LOG NL
    WHERE NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = NL.USER_CODE
    )
) LATEST_NICK ON LATEST_NICK.USER_CODE = UC.USER_CODE;

SELECT *
FROM VW_REPLY_MANAGEMENT;






--○ '배송 관리' 뷰 
-- 뷰 이름 : VW_DELIVERY_MANAGEMENT
CREATE OR REPLACE VIEW VW_DELIVERY_MANAGEMENT AS
SELECT
    '플랫폼 배송' AS "배송 종류",
    PD.PLATFORM_DELIVERY_ID AS "배송 ID",
    PD.DELIVERY_START_DATE AS "배송 시작일",
    PD.DELIVERY_END_DATE AS "배송 종료일",
    P.STOREN_ID AS "스토렌 ID",
    P.STORAGE_ID AS "보관 ID",
    P.RENTAL_MATCHING_DONE_ID AS "렌탈 매칭 완료 ID",
    IRA.COMPLETED_DATE AS "검수 결과 처리일",
    IRAT.INSPEC_RESULT_ACTION_TYPE_NAME AS "검수 결과 처리 유형"
FROM PLATFORM_DELIVERY PD
         LEFT JOIN PAY P ON PD.PAY_ID = P.PAY_ID
         LEFT JOIN INSPEC_RESULT IR ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
         LEFT JOIN INSPEC_RESULT_ACTION IRA ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
         LEFT JOIN INSPEC_RESULT_ACTION_TYPE IRAT ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRAT.INSPEC_RESULT_ACTION_TYPE_ID

UNION ALL

SELECT
    '거래자 택배' AS "배송 종류",
    UD.USERS_DELIVERY_ID AS "배송 ID",
    UD.WAYBILL_ENTRY_DATE AS "배송 시작일",
    UD.DELIVERY_END_DATE AS "배송 종료일",
    P.STOREN_ID AS "스토렌 ID",
    P.STORAGE_ID AS "보관 ID",
    P.RENTAL_MATCHING_DONE_ID AS "렌탈 매칭 완료 ID",
    NULL AS "검수 결과 처리일",
    NULL AS "검수 결과 처리 유형"
FROM USERS_DELIVERY UD
         LEFT JOIN PAY P ON UD.PAY_ID = P.PAY_ID

UNION ALL

SELECT
    '보관 최종 반환' AS "배송 종류",
    SLR.STORAGE_LAST_RETURN_ID AS "배송 ID",
    SLR.DELIVERY_START_DATE AS "배송 시작일",
    SLR.DELIVERY_END_DATE AS "배송 종료일",
    NULL AS "스토렌 ID",
    SLR.STORAGE_ID AS "보관 ID",
    NULL AS "렌탈 매칭 완료 ID",
    IRA.COMPLETED_DATE AS "검수 결과 처리일",
    IRAT.INSPEC_RESULT_ACTION_TYPE_NAME AS "검수 결과 처리 유형"
FROM STORAGE_LAST_RETURN SLR
         JOIN INSPEC_RESULT_ACTION IRA ON SLR.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT_ACTION_TYPE IRAT ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRAT.INSPEC_RESULT_ACTION_TYPE_ID

UNION ALL

SELECT
    '스토렌 최종 반환' AS "배송 종류",
    STLR.STOREN_LAST_RETURN_ID AS "배송 ID",
    STLR.DELIVERY_START_DATE AS "배송 시작일",
    STLR.DELIVERY_END_DATE AS "배송 종료일",
    STLR.STOREN_ID AS "스토렌 ID",
    NULL AS "보관 ID",
    NULL AS "렌탈 매칭 완료 ID",
    IRA.COMPLETED_DATE AS "검수 결과 처리일",
    IRAT.INSPEC_RESULT_ACTION_TYPE_NAME AS "검수 결과 처리 유형"
FROM STOREN_LAST_RETURN STLR
         JOIN INSPEC_RESULT_ACTION IRA ON STLR.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
         JOIN INSPEC_RESULT_ACTION_TYPE IRAT ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRAT.INSPEC_RESULT_ACTION_TYPE_ID;

SELECT *
FROM VW_DELIVERY_MANAGEMENT;





--○ '포인트 관리' 뷰 
-- 뷰 이름 : VW_POINT_MANAGEMENT
CREATE OR REPLACE VIEW VW_POINT_MANAGEMENT AS
SELECT
    PL.POINT_LOG_ID AS "포인트로그ID",
    UC.USER_CODE AS "회원코드",
    NL.NICKNAME AS "회원닉네임",
    PCT.POINT_CHANGE_TYPE_NAME AS "포인트변동유형",
    PL.POINT_CHANGE AS "변동포인트",
    PL.CREATED_DATE AS "생성일",

    EE.EVENT_ENTRY_ID AS "이벤트응모ID",
    EE.EVENT_ENTRY_POINT AS "응모포인트",  -- USED_POINT를 EVENT_ENTRY_POINT로 수정

    PR.POST_REPORT_ID AS "게시글신고ID",
    PRAT.REPORT_ACTION_TYPE_NAME AS "게시글처리유형",

    RR.REPLY_REPORT_ID AS "댓글신고ID",
    RRAT.REPORT_ACTION_TYPE_NAME AS "댓글처리유형",

    RRR.RENTAL_REPLY_REPORT_ID AS "렌탈댓글신고ID",
    RRRAT.REPORT_ACTION_TYPE_NAME AS "렌탈처리유형"

FROM POINT_LOG PL
         JOIN USER_CODE UC ON PL.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(LAST_UPDATED_DATE)
        FROM NICKNAME_LOG
        WHERE USER_CODE = UC.USER_CODE
    )
         JOIN POINT_CHANGE_TYPE PCT ON PL.POINT_CHANGE_TYPE_ID = PCT.POINT_CHANGE_TYPE_ID

-- 이벤트 응모
         LEFT JOIN EVENT_ENTRY EE
                   ON EE.USER_CODE = PL.USER_CODE AND EE.CREATED_DATE = PL.CREATED_DATE

-- 게시글 신고 및 처리
         LEFT JOIN POST_REPORT PR
                   ON PR.REPORTER_ID = PL.USER_CODE AND PR.REPORTED_DATE = PL.CREATED_DATE
         LEFT JOIN POST_REPORT_ACTION PRA ON PRA.POST_REPORT_ID = PR.POST_REPORT_ID
         LEFT JOIN REPORT_ACTION_TYPE PRAT ON PRA.REPORT_ACTION_TYPE_ID = PRAT.REPORT_ACTION_TYPE_ID

-- 댓글 신고 및 처리
         LEFT JOIN REPLY_REPORT RR
                   ON RR.REPORTER_ID = PL.USER_CODE AND RR.REPORTED_DATE = PL.CREATED_DATE
         LEFT JOIN REPLY_REPORT_ACTION RRA ON RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
         LEFT JOIN REPORT_ACTION_TYPE RRAT ON RRA.REPORT_ACTION_TYPE_ID = RRAT.REPORT_ACTION_TYPE_ID

-- 렌탈 댓글 신고 및 처리
         LEFT JOIN RENTAL_REPLY_REPORT RRR
                   ON RRR.REPORTER_ID = PL.USER_CODE AND RRR.REPORTED_DATE = PL.CREATED_DATE
         LEFT JOIN RENTAL_REPLY_REPORT_ACTION RRRA ON RRRA.RENTAL_REPLY_REPORT_ID = RRR.RENTAL_REPLY_REPORT_ID
         LEFT JOIN REPORT_ACTION_TYPE RRRAT ON RRRA.REPORT_ACTION_TYPE_ID = RRRAT.REPORT_ACTION_TYPE_ID;

SELECT *
FROM VW_POINT_MANAGEMENT;






--○ '거래글 정렬용 통합 뷰'
-- 뷰 이름 : VW_TRANS_POST_SORT
CREATE OR REPLACE VIEW VW_TRANS_POST_SORT AS
WITH BASE_RENTAL AS (
    SELECT
        R.RENTAL_ID,
        R.CREATED_DATE AS "렌탈생성일",
        COALESCE(BL.BOOST_LOG_DATE, R.CREATED_DATE) AS "끌올일자"
    FROM RENTAL R
    LEFT JOIN BOOST_LOG BL ON R.RENTAL_ID = BL.RENTAL_ID
),
BASE_STOREN AS (
    SELECT
        S.STOREN_ID,
        S.CREATED_DATE AS "스토렌생성일",
        COALESCE(BL.BOOST_LOG_DATE, S.CREATED_DATE) AS "끌올일자",
        SI.INSPEC_RESULT_ACTION_ID
    FROM STOREN S
    LEFT JOIN BOOST_LOG BL ON S.STOREN_ID = BL.STOREN_ID
    LEFT JOIN STOREN_IRA SI ON S.STOREN_ID = SI.STOREN_ID
),
INSPEC_INFO AS (
    SELECT
        IRA.INSPEC_RESULT_ACTION_ID,
        IRA.COMPLETED_DATE AS "검수처리일",
        IRAT.INSPEC_RESULT_ACTION_TYPE_NAME AS "검수처리유형"
    FROM INSPEC_RESULT_ACTION IRA
    JOIN INSPEC_RESULT_ACTION_TYPE IRAT ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRAT.INSPEC_RESULT_ACTION_TYPE_ID
)
SELECT
    R."끌올일자",
    R.RENTAL_ID AS "렌탈ID",
    R."렌탈생성일",
    S.STOREN_ID AS "스토렌ID",
    S."스토렌생성일",
    I."검수처리일",
    I."검수처리유형"
FROM BASE_RENTAL R
         FULL OUTER JOIN BASE_STOREN S ON 1=1
         LEFT JOIN INSPEC_INFO I ON S.INSPEC_RESULT_ACTION_ID = I.INSPEC_RESULT_ACTION_ID;

SELECT *
FROM VW_TRANS_POST_SORT;







--○ '인기글 관리' 뷰 
-- 뷰 이름 : VW_HOT_POST_MANAGEMENT
CREATE OR REPLACE VIEW VW_HOT_POST_MANAGEMENT AS
SELECT
    P.POST_ID AS "게시물 ID",
    BC.BOARD_CATE_NAME AS "게시판 카테고리",
    B.BOARD_NAME AS "게시판 이름",
    PL.POST_LABEL_NAME AS "말머리 이름",
    HPL.CREATED_DATE AS "인기글 지정일",
    NL.NICKNAME AS "회원 닉네임"
FROM HOT_POST_LOG HPL
         JOIN POST P ON HPL.POST_ID = P.POST_ID
         JOIN BOARD B ON P.BOARD_ID = B.BOARD_ID
         JOIN BOARD_CATEGORY BC ON B.BOARD_CATE_ID = BC.BOARD_CATE_ID
         JOIN POST_LABEL PL ON P.POST_LABEL_ID = PL.POST_LABEL_ID
         JOIN USER_CODE UC ON P.USER_CODE = UC.USER_CODE
         JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(LAST_UPDATED_DATE)
        FROM NICKNAME_LOG
        WHERE USER_CODE = UC.USER_CODE
    )
ORDER BY B.BOARD_ID, HPL.CREATED_DATE DESC;

SELECT *
FROM VW_HOT_POST_MANAGEMENT;







--○ '게시판 카테고리 관리' 뷰 
-- 뷰 이름 : VW_BOARD_CATEGORY_MANAGEMENT
CREATE OR REPLACE VIEW VW_BOARD_CATEGORY_MANAGEMENT AS
SELECT
    BC.BOARD_CATE_NAME AS "게시판 카테고리",
    B.BOARD_NAME AS "게시판 이름",
    PL.POST_LABEL_NAME AS "말머리 이름"
FROM BOARD_CATEGORY BC
         JOIN BOARD B ON BC.BOARD_CATE_ID = B.BOARD_CATE_ID
         JOIN POST_LABEL PL ON B.BOARD_ID = PL.BOARD_ID;

SELECT *
FROM VW_BOARD_CATEGORY_MANAGEMENT;


