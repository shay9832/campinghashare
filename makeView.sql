--○ PAY_ID를 알면 장비코드를 알 수 있는 뷰
CREATE OR REPLACE VIEW VW_PAY_ID_TO_EQUIP_CODE
AS
SELECT 
     p.PAY_ID,
     -- 결제종류 컬럼
     CASE
          -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 '렌탈_렌탈비결제'
          WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL
          THEN '렌탈_렌탈비결제'
          -- STORAGE_ID가 NULL이 아니면 '보관관_보관비결제'
          WHEN p.STORAGE_ID IS NOT NULL
          THEN '보관_보관비결제'
          -- STOREN_ID가 NULL이 아니면 '스토렌_보관비결제'
          WHEN p.STOREN_ID IS NOT NULL
          THEN '스토렌_보관비결제'
          -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 '스토렌_렌탈비결제'
          WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL
          THEN '스토렌_렌탈비결제'
          -- 위의 모든 조건이 만족되지 않으면 NULL 반환
          ELSE NULL
     END AS 결제종류,
     
     -- 장비코드 컬럼럼
     CASE
          -- RENTAL_MATCHING_DONE_ID가 NULL이 아니면 RENTAL 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.RENTAL_MATCHING_DONE_ID IS NOT NULL THEN 
          (  
               SELECT r.EQUIP_CODE
               FROM RENTAL_MATCHING_REQ rmq
               JOIN RENTAL r ON rmq.RENTAL_ID = r.RENTAL_ID
               WHERE rmq.RENTAL_MATCHING_REQ_ID = p.RENTAL_MATCHING_DONE_ID
          )
          -- STORAGE_ID가 NULL이 아니면 STORAGE 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.STORAGE_ID IS NOT NULL THEN
          (  
               SELECT s.EQUIP_CODE
               FROM STORAGE s
               WHERE s.STORAGE_ID = p.STORAGE_ID
          )
          -- STOREN_ID가 NULL이 아니면 STOREN 테이블에서 EQUIP_CODE를 찾는다
          WHEN p.STOREN_ID IS NOT NULL THEN
          (  
               SELECT st.EQUIP_CODE
               FROM STOREN st
               WHERE st.STOREN_ID = p.STOREN_ID
          )
          -- STOREN_MATCHING_DONE_ID가 NULL이 아니면 INSPEC_RESULT_ACTION을 거쳐 EQUIP_CODE를 찾는다
          WHEN p.STOREN_MATCHING_DONE_ID IS NOT NULL THEN
          (  
               SELECT st.EQUIP_CODE
               FROM STOREN_MATCHING_REQ smr
               JOIN INSPEC_RESULT_ACTION ira ON smr.INSPEC_RESULT_ACTION_ID = ira.INSPEC_RESULT_ACTION_ID
               JOIN INSPEC_RESULT ir ON ira.INSPEC_RESULT_ID = ir.INSPEC_RESULT_ID
               LEFT JOIN PLATFORM_DELIVERY pd ON ir.PLATFORM_DELIVERY_ID = pd.PLATFORM_DELIVERY_ID
               LEFT JOIN PLATFORM_DELIVERY_RETURN pdr ON ir.PLATFORM_DELIVERY_RETURN_ID = pdr.PLATFORM_DELIVERY_RETURN_ID
               LEFT JOIN PAY p2 ON pd.PAY_ID = p2.PAY_ID OR pdr.PLATFORM_DELIVERY_ID = p2.PAY_ID
               LEFT JOIN STOREN st ON p2.STOREN_ID = st.STOREN_ID
               WHERE smr.STOREN_MATCHING_REQ_ID = p.STOREN_MATCHING_DONE_ID
          )
          -- 위의 모든 조건이 만족되지 않으면 NULL 반환
          ELSE NULL
     END AS 장비코드
FROM 
     PAY p;


--○ 거래상품과 만족도 묶기
CREATE OR REPLACE VIEW VW_RENTAL_AND_SAT
AS
SELECT SL.REVIEWER_ID "평가자_ID"
     , SL.REVIEWEE_ID "피평가자_ID"
     , SL.SATIS_SCORE "만족도_점수"
     , SL.SATIS_COMMENT "만족도_코멘트"
     , SL.CREATED_DATE "만족도_생성일"
     , RMD.RENTAL_MATCHING_DONE_ID "렌탈매칭완료_ID", R.RENTAL_TITLE "렌탈제목", R.RENTAL_ID "렌탈ID", EC.EQUIP_CODE "장비코드"
FROM SATISFACTION_LOG SL
LEFT JOIN RENTAL_MATCHING_DONE RMD
     ON SL.RENTAL_MATCHING_DONE_ID = RMD.RENTAL_MATCHING_DONE_ID
LEFT JOIN RENTAL_MATCHING_REQ RMR
     ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
LEFT JOIN RENTAL R
     ON RMR.RENTAL_ID = R.RENTAL_ID
LEFT JOIN EQUIP_CODE EC
     ON R.EQUIP_CODE = EC.EQUIP_CODE;



SELECT *
FROM VW_RENTAL_AND_SAT;



--○ 관리자 계정 관리 SELECT쿼리문
SELECT ADMIN_ID "관리자_ID", USER_CODE "회원_코드", ADMIN_PW "관리자_PW"
     , ADMIN_NICKNAME "관리자_닉네임", ADMIN_TEL "관리자_전화번호"
     , CREATED_DATE "생성일"
FROM ADMINS;



--○ 관리자 작업 이력 조회 뷰(신고처리) --> 뷰 생성 안 함(중복 뷰)
SELECT 
     A.ADMIN_ID AS "관리자ID",
     '게시물' AS "신고유형",  -- 게시물 신고
     PR.POST_ID AS "신고대상ID",  -- 게시물ID
     PR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     P.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
     PRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     PRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN POST_REPORT_ACTION PRA
     ON A.ADMIN_ID = PRA.ADMIN_ID
JOIN POST_REPORT PR
     ON PRA.POST_REPORT_ID = PR.POST_REPORT_ID
JOIN POST P
     ON PR.POST_ID = P.POST_ID

UNION ALL

SELECT 
     A.ADMIN_ID AS "관리자ID",
     '댓글' AS "신고유형",  -- 댓글 신고
     R.REPLY_ID AS "신고대상ID",  -- 댓글ID
     RR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     R.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
RRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     RRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN REPLY_REPORT_ACTION RRA
     ON A.ADMIN_ID = RRA.ADMIN_ID
JOIN REPLY_REPORT RR
     ON RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
JOIN REPLY R
     ON RR.REPLY_ID = R.REPLY_ID

UNION ALL  

SELECT 
     A.ADMIN_ID AS "관리자ID",
     '렌탈댓글' AS "신고유형",  -- 렌탈댓글 신고
     RRR.REPORTER_ID AS "신고접수자",   --신고자 회원코드
     REN.USER_CODE AS "신고대상자",  --게시물 작성자 회원코드
     REN.RENTAL_REPLY_ID AS "신고대상ID",  -- 렌탈댓글ID
     RRRA.REPORT_ACTION_TYPE_ID AS "신고처리유형ID",
     RRRA.COMPLETED_DATE AS "신고처리일"
FROM 
     ADMINS A 
RIGHT OUTER JOIN RENTAL_REPLY_REPORT_ACTION RRRA
     ON A.ADMIN_ID = RRRA.ADMIN_ID
JOIN RENTAL_REPLY_REPORT RRR
     ON RRRA.RENTAL_REPLY_REPORT_ID = RRR.RENTAL_REPLY_REPORT_ID
JOIN RENTAL_REPLY REN
     ON RRR.RENTAL_REPLY_ID = REN.RENTAL_REPLY_ID;



--○ 관리자 작업 이력 조회 뷰(활동정지회원)
CREATE OR REPLACE VIEW VW_SUSPENDED_USER_AND_ADMINS
AS
SELECT T.*, CASE WHEN T."활동정지시작일" - SYSDATE >= 30 THEN '정지해제'
               ELSE '정지 중' END "활동정지상태"
FROM
(
     SELECT A.USER_CODE "관리자회원코드", A.ADMIN_ID "관리자ID"
     , SU.USER_CODE "활동정지유저코드", SU.SUSPENDED_START_DATE "활동정지시작일"
     FROM SUSPENDED_USER SU
     JOIN ADMINS A
     ON SU.ADMIN_ID = A.ADMIN_ID
) T; 

SELECT *
FROM VW_SUSPENDED_USER_AND_ADMINS;



--○ 매칭 관리 뷰(렌탈)
CREATE OR REPLACE VIEW VW_RENTAL_AND_MATCHING
AS
SELECT R.RENTAL_ID "렌탈ID"
     , R.EQUIP_CODE "장비_코드"
     , R.RENTAL_TITLE "렌탈_제목"
     , RMR.RENTAL_MATCHING_REQUESTER_ID "렌탈매칭신청자코드"
     , RMR.RENTAL_START_DATE "렌탈_시작일"
     , RMR.RENTAL_END_DATE "렌탈_종료일"
     , RMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(RMD.RENTAL_MATCHING_REQ_ID) > 0 THEN '승인'
          ELSE '미승인'
          END "승인여부"
     , RMD.APPROVED_DATE "승인_일자"
FROM RENTAL_MATCHING_REQ RMR
LEFT JOIN RENTAL_MATCHING_DONE RMD
     ON RMD.RENTAL_MATCHING_REQ_ID = RMR.RENTAL_MATCHING_REQ_ID
LEFT JOIN RENTAL R
     ON RMR.RENTAL_ID = R.RENTAL_ID
GROUP BY R.RENTAL_ID
     , R.EQUIP_CODE
     , R.RENTAL_TITLE
     , RMR.RENTAL_MATCHING_REQUESTER_ID
     , RMR.RENTAL_START_DATE
     , RMR.RENTAL_END_DATE
     , RMR.REQUESTED_DATE
     , RMD.APPROVED_DATE;


SELECT *
FROM VW_RENTAL_AND_MATCHING;




--○ 매칭 관리 뷰(스토렌)
CREATE OR REPLACE VIEW VW_STOREN_AND_MATCHING
AS
SELECT S.STOREN_ID "스토렌ID"
     , S.EQUIP_CODE "장비_코드"
     , S.STOREN_TITLE "스토렌_제목"
     , SMR.STOREN_MATCHING_REQ_USER_ID "스토렌매칭신청자코드"
     , SMR.RENTAL_START_DATE "렌탈_시작일"
     , SMR.RENTAL_END_DATE "렌탈_종료일"
     , SMR.REQUESTED_DATE "매칭신청일"
     , CASE WHEN COUNT(SMD.STOREN_MATCHING_REQ_ID) > 0 THEN '승인'
          ELSE '미승인'
          END "승인여부"
     , SMD.APPROVED_DATE "승인_일자"
FROM STOREN_MATCHING_REQ SMR
LEFT JOIN STOREN_MATCHING_DONE SMD
     ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
LEFT JOIN INSPEC_RESULT_ACTION IRA
     ON SMR.INSPEC_RESULT_ACTION_ID = IRA.INSPEC_RESULT_ACTION_ID
LEFT JOIN INSPEC_RESULT IR
     ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
LEFT JOIN PLATFORM_DELIVERY PD
     ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
LEFT JOIN PAY P
     ON PD.PAY_ID = P.PAY_ID
LEFT JOIN STOREN S
     ON P.STOREN_ID = S.STOREN_ID
GROUP BY SMR.STOREN_MATCHING_REQ_USER_ID
     , SMR.RENTAL_START_DATE
     , SMR.RENTAL_END_DATE
     , SMR.REQUESTED_DATE
     , SMD.APPROVED_DATE
     , S.STOREN_ID
     , S.EQUIP_CODE
     , S.STOREN_TITLE;


SELECT *
FROM VW_STOREN_AND_MATCHING;




--○ 수익 조회(렌탈)
