<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.mvc.Interface.IStorenDAO">
    <!-- 전체 스토렌 장비 리스트 조회 (TYPE 필드 추가)  -->

    <!-- resultMap: StorenDTO + 내부 EquipmentDTO 매핑 -->
    <resultMap id="storenRentalInfoMap" type="com.team.mvc.DTO.StorenDTO">
        <result property="equip_size_name" column="EQUIP_SIZE_NAME"/>
        <result property="required_space" column="REQUIRED_SPACE"/>
        <result property="daily_storage_fee" column="DAILY_STORAGE_FEE"/>
        <result property="store_month" column="STORE_MONTH"/>
        <result property="daily_rent_price" column="DAILY_RENT_PRICE"/>
        <result property="storen_title" column="STOREN_TITLE"/>
        <result property="storen_content" column="STOREN_CONTENT"/>

        <association property="equipmentDTO" javaType="com.team.mvc.DTO.EquipmentDTO">
            <id property="equip_id" column="EQUIP_ID"/>
            <result property="equip_code" column="EQUIP_CODE"/>
            <result property="equip_name" column="EQUIP_NAME"/>
            <result property="brand" column="BRAND_NAME"/>
            <result property="original_price" column="ORIGINAL_PRICE"/>
            <result property="majorCategory" column="MAJOR_CATEGORY"/>
            <result property="middleCategory" column="MIDDLE_CATEGORY"/>
        </association>
    </resultMap>


    <resultMap id="VWStorenResultMap" type="com.team.mvc.DTO.StorenDTO">

        <!-- 기본 정보 -->
        <id property="storen_id" column="STOREN_ID" />
        <result property="equip_code" column="EQUIP_CODE" />
        <result property="user_code" column="USER_CODE" />
        <result property="size_id" column="SIZE_ID" />
        <result property="store_month" column="STORE_MONTH"/>
        <result property="storen_title" column="STOREN_TITLE" />
        <result property="storen_content" column="STOREN_CONTENT" />
        <result property="daily_rent_price" column="DAILY_RENT_PRICE" />
        <result property="created_date" column="CREATED_DATE" />
        <result property="daily_storage_fee" column="DAILY_STORAGE_FEE" />

        <!-- 사이즈 정보 -->
        <result property="equip_size_name" column="EQUIP_SIZE_NAME" />
        <result property="required_space" column="REQUIRED_SPACE" />

        <!-- 날짜 정보 -->
        <result property="inspec_completed_date" column="INSPEC_COMPLETED_DATE" />
        <result property="rental_start_date" column="RENTAL_START_DATE" />
        <result property="rental_end_date" column="RENTAL_END_DATE" />
        <result property="final_return_date" column="FINAL_RETURN_DATE" />

        <!-- 매칭 관련 -->
        <result property="matching_request_count" column="MATCHING_REQUEST_COUNT" />
        <result property="matching_status" column="MATCHING_STATUS" />
        <result property="matching_status_detail" column="DETAILED_MATCHING_STATUS"/>       <!--추가 -->

        <!-- 장비 등급/상태 -->
        <result property="equip_grade" column="EQUIP_GRADE" />
        <result property="status" column="STATUS" />

    </resultMap>

    <!-- 전체 스토렌 장비 리스트 조회   -->
    <select id="listStoren" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT s.STOREN_ID, s.EQUIP_CODE, s.USER_CODE
             , s.SIZE_ID, s.EQUIP_SIZE_NAME, s.REQUIRED_SPACE
             , s.DAILY_STORAGE_FEE, s.STORE_MONTH
             , s.STOREN_TITLE, s.STOREN_CONTENT
             , s.DAILY_RENT_PRICE, s.CREATED_DATE
             , e.TYPE
        FROM VW_STOREN s
                 INNER JOIN VW_SEARCH_EQUIP e ON s.EQUIP_CODE = e.EQUIP_CODE
        WHERE s.MATCHING_STATUS != '매칭완료'
          AND s.EQUIP_GRADE IS NOT NULL
          AND s.DAILY_RENT_PRICE IS NOT NULL
    </select>

    <!-- 회원코드로 스토렌 장비 리스트 조회 (해당 회원이 가진 스토렌 장비 리스트) -->
    <select id="listByUserCode" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT STOREN_ID, EQUIP_CODE, USER_CODE
             , SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE
             , DAILY_STORAGE_FEE, STORE_MONTH
             , STOREN_TITLE, STOREN_CONTENT
             , DAILY_RENT_PRICE, CREATED_DATE
             , NVL(INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
             , NVL(RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
             , NVL(RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
             , NVL(FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
             , MATCHING_REQUEST_COUNT, MATCHING_STATUS
             , EQUIP_GRADE, STATUS
        FROM VW_STOREN
        WHERE USER_CODE = #{user_code}
        ORDER BY CREATED_DATE DESC, STOREN_ID DESC
    </select>

    <!-- 유저 코드와 장비 코드로 스토렌 장비 정보 조회 -->
    <select id="listByUserCodeEquipCode" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT STOREN_ID, EQUIP_CODE, USER_CODE
             , SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE
             , DAILY_STORAGE_FEE, STORE_MONTH
             , STOREN_TITLE, STOREN_CONTENT
             , DAILY_RENT_PRICE, CREATED_DATE
             , NVL(INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
             , NVL(RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
             , NVL(RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
             , NVL(FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
             , MATCHING_REQUEST_COUNT, MATCHING_STATUS
             , EQUIP_GRADE, STATUS
        FROM VW_STOREN
        WHERE USER_CODE = #{user_code} AND EQUIP_CODE = #{equip_code}
        ORDER BY CREATED_DATE DESC, STOREN_ID DESC
    </select>

    <!-- 해당 장비코드의 가장 최근 스토렌 정보 가져오기-->
    <select id="getStorenByEquipCode" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT *
        FROM (
                 SELECT STOREN_ID, EQUIP_CODE, USER_CODE
                     , SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE
                     , DAILY_STORAGE_FEE, STORE_MONTH
                     , STOREN_TITLE, STOREN_CONTENT
                     , DAILY_RENT_PRICE, CREATED_DATE
                     , NVL(INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
                     , NVL(RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
                     , NVL(RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
                     , NVL(FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
                     , MATCHING_REQUEST_COUNT, MATCHING_STATUS
                     , EQUIP_GRADE, STATUS
                 FROM VW_STOREN
                 WHERE USER_CODE = #{user_code} AND EQUIP_CODE = #{equip_code}
                 ORDER BY CREATED_DATE DESC
             )
        WHERE ROWNUM = 1
    </select>

    <!-- storen_id로 렌탈 정보 조회 -->
    <select id="getRentalInfoByStorenId" parameterType="int" resultMap="storenRentalInfoMap">
        SELECT
            ER.EQUIP_CODE,
            ER.EQUIP_ID,
            EN.EQUIP_NAME,
            B.BRAND_NAME,
            ER.ORIGINAL_PRICE,
            CAT_M.CATEGORY_NAME AS MIDDLE_CATEGORY,
            CAT_P.CATEGORY_NAME AS MAJOR_CATEGORY,
            ES.EQUIP_SIZE_NAME,
            ES.REQUIRED_SPACE,
            ES.DAILY_STORAGE_FEE,
            S.STORE_MONTH,
            S.DAILY_RENT_PRICE,
            S.STOREN_TITLE,
            S.STOREN_CONTENT,
            S.STOREN_ID
        FROM EQUIPMENT_REGISTRATION ER
                 JOIN EQUIP_NAME EN ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
                 JOIN BRAND B ON EN.BRAND_ID = B.BRAND_ID
                 JOIN CATEGORY CAT_M ON ER.CATEGORY_ID = CAT_M.CATEGORY_ID
                 JOIN CATEGORY CAT_P ON CAT_M.PARENT_CATEGORY_ID = CAT_P.CATEGORY_ID
                 JOIN STOREN S ON ER.EQUIP_CODE = S.EQUIP_CODE
                 JOIN EQUIP_SIZE ES ON S.SIZE_ID = ES.EQUIP_SIZE_ID
        WHERE S.STOREN_ID = #{storen_id}
    </select>

    <!-- 렌탈 희망 정보 업데이트 -->
    <update id="updateStorenRegisterRentalRegister" parameterType="com.team.mvc.DTO.StorenDTO">
        UPDATE STOREN
        SET STOREN_TITLE = #{storen_title},
            STOREN_CONTENT = #{storen_content},
            DAILY_RENT_PRICE = #{daily_rent_price}
        WHERE STOREN_ID = #{storen_id}
    </update>

    <!-- 평균 신품 가격 조회 -->
    <select id="getAvgNewPrice" resultType="int">
        SELECT NVL(ROUND(AVG(ORIGINAL_PRICE)), 0)
        FROM EQUIPMENT_REGISTRATION
        WHERE EQUIP_CODE = #{equip_code}
    </select>

    <!-- 평균 렌탈 가격 조회 -->
    <select id="getAvgRentalPrice" resultType="int">
        SELECT NVL(ROUND(AVG(DAILY_RENT_PRICE)), 0)
        FROM RENTAL
        WHERE EQUIP_CODE = #{equip_code}
    </select>

    <!-- 장비명으로 평균 신품 가격 조회 (추가) -->
    <select id="getAvgNewPriceByEquipName" resultType="int">
        SELECT NVL(ROUND(AVG(ER.ORIGINAL_PRICE)), 0)
        FROM EQUIPMENT_REGISTRATION ER
                 JOIN EQUIP_NAME EN ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
        WHERE EN.EQUIP_NAME = #{equipName}
    </select>

    <!-- 장비명으로 평균 렌탈 가격 조회 (추가) -->
    <select id="getAvgRentalPriceByEquipName" resultType="int">
        SELECT NVL(ROUND(AVG(R.DAILY_RENT_PRICE)), 0)
        FROM RENTAL R
                 JOIN EQUIPMENT_REGISTRATION ER ON R.EQUIP_CODE = ER.EQUIP_CODE
                 JOIN EQUIP_NAME EN ON ER.EQUIP_NAME_ID = EN.EQUIP_NAME_ID
        WHERE EN.EQUIP_NAME = #{equipName}
    </select>

    <!-- 매칭 신청 수가 1 이상인 스토렌 리스트 가져오기 -->
    <select id="listMatchingStorenByUserCode" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT STOREN_ID, EQUIP_CODE, USER_CODE
             , SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE
             , DAILY_STORAGE_FEE, STORE_MONTH
             , STOREN_TITLE, STOREN_CONTENT
             , DAILY_RENT_PRICE, CREATED_DATE
             , NVL(INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
             , NVL(RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
             , NVL(RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
             , NVL(FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
             , MATCHING_REQUEST_COUNT, MATCHING_STATUS
             , EQUIP_GRADE, STATUS
        FROM VW_STOREN
        WHERE USER_CODE = #{user_code} AND MATCHING_REQUEST_COUNT > 0
        ORDER BY STOREN_ID DESC
    </select>

    <!-- 내가 매칭 신청한 스토렌 리스트 가져오기 -->
    <select id="listMyStorenApplicationsByUserCode" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT STOREN_ID, EQUIP_CODE, USER_CODE
             , SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE
             , DAILY_STORAGE_FEE, STORE_MONTH
             , STOREN_TITLE, STOREN_CONTENT
             , DAILY_RENT_PRICE, CREATED_DATE
             , NVL(INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
             , NVL(RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
             , NVL(RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
             , NVL(FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
             , MATCHING_REQUEST_COUNT, MATCHING_STATUS
             , EQUIP_GRADE, STATUS
        FROM VW_STOREN s
        WHERE s.STOREN_ID IN (SELECT TRANSACTION_ID
                              FROM VW_RENTAL_APPLICANT
                              WHERE USER_CODE = #{user_code}
                                    AND TRANSACTION_TYPE LIKE '스토렌%')
        ORDER BY s.CREATED_DATE DESC
    </select>

    <!-- 스토렌id로 특정 스토렌 정보 가져오기(마이페이지 내가 대여한 장비에 필요한 속성 추가 -->
    <select id="getStorenByStorenId" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT S.STOREN_ID, S.EQUIP_CODE, S.USER_CODE
             , S.SIZE_ID, S.EQUIP_SIZE_NAME, S.REQUIRED_SPACE
             , S.DAILY_STORAGE_FEE, S.STORE_MONTH
             , S.STOREN_TITLE, S.STOREN_CONTENT
             , S.DAILY_RENT_PRICE, S.CREATED_DATE
             , NVL(S.INSPEC_COMPLETED_DATE, '검수 대기 중') AS inspec_completed_date
             , NVL(S.RENTAL_START_DATE, '검수 대기 중') AS rental_start_date
             , NVL(S.RENTAL_END_DATE, '검수 대기 중') AS rental_end_date
             , NVL(S.FINAL_RETURN_DATE, '검수 대기 중') AS final_return_date
             , S.MATCHING_REQUEST_COUNT, S.MATCHING_STATUS, S.STATUS
             , S.EQUIP_GRADE, VWSMS.DETAILED_MATCHING_STATUS
        FROM VW_STOREN S
        JOIN VW_STOREN_MATCHING_STATUS VWSMS
        ON S.STOREN_ID = VWSMS.STOREN_ID
        <![CDATA[WHERE S.STOREN_ID = #{storen_id} AND ROWNUM <= 1]]>
    </select>

    <!-- 스토렌 장비 검색(키워드) -->
    <select id="searchStorenKeyword" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT s.STOREN_ID, s.EQUIP_CODE, s.USER_CODE
             , s.SIZE_ID, s.EQUIP_SIZE_NAME, s.REQUIRED_SPACE
             , s.DAILY_STORAGE_FEE, s.STORE_MONTH
             , s.STOREN_TITLE, s.STOREN_CONTENT
             , s.DAILY_RENT_PRICE, s.CREATED_DATE
             , e.TYPE
        FROM VW_STOREN s
                 INNER JOIN VW_SEARCH_EQUIP e ON s.EQUIP_CODE = e.EQUIP_CODE
        WHERE (e.EQUIP_NAME LIKE '%' || #{searchKeyword} || '%'
            OR e.BRAND_NAME LIKE '%' || #{searchKeyword} || '%'
            OR e.CATEGORY_NAME LIKE '%' || #{searchKeyword} || '%'
            OR s.STOREN_TITLE LIKE '%' || #{searchKeyword} || '%')
            AND MATCHING_STATUS != '매칭완료'
            AND EQUIP_GRADE IS NOT NULL
    </select>

    <!-- 스토렌 장비 검색(키워드, 가격 범위, 날짜 범위) -->
    <select id="searchStoren" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT s.STOREN_ID, s.EQUIP_CODE, s.USER_CODE
             , s.SIZE_ID, s.EQUIP_SIZE_NAME, s.REQUIRED_SPACE
             , s.DAILY_STORAGE_FEE, s.STORE_MONTH
             , s.STOREN_TITLE, s.STOREN_CONTENT
             , s.DAILY_RENT_PRICE, s.CREATED_DATE
             , e.TYPE
        FROM VW_STOREN s
                 INNER JOIN VW_SEARCH_EQUIP e ON s.EQUIP_CODE = e.EQUIP_CODE
        WHERE 1=1
        <if test="searchKeyword != null and searchKeyword != ''">
            AND (e.EQUIP_NAME LIKE '%' || #{searchKeyword} || '%'
            OR e.BRAND_NAME LIKE '%' || #{searchKeyword} || '%'
            OR e.CATEGORY_NAME LIKE '%' || #{searchKeyword} || '%'
            OR s.STOREN_TITLE LIKE '%' || #{searchKeyword} || '%')
        </if>
        <if test="minPrice != null">
            <![CDATA[ AND s.daily_rent_price >= #{minPrice} ]]>
        </if>
        <if test="maxPrice != null">
            <![CDATA[ AND s.daily_rent_price <= #{maxPrice} ]]>
        </if>
        <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
            <!-- 날짜 관련 필터링 조건 -->
            <![CDATA[ AND (
            s.rental_end_date >= TO_DATE(#{startDate}, 'YYYY-MM-DD') AND s.rental_start_date <= TO_DATE(#{endDate}, 'YYYY-MM-DD')
            ) ]]>
        </if>
            AND s.MATCHING_STATUS != '매칭완료'
            AND s.EQUIP_GRADE IS NOT NULL
            AND s.DAILY_RENT_PRICE IS NOT NULL
        ORDER BY s.CREATED_DATE DESC
    </select>


    <!-- 해당 유저가 가진 스토렌 장비코드만 조회 (중복제거) -->
    <select id="listStorenEquipCodes" resultType="java.lang.Integer">
        SELECT EQUIP_CODE
        FROM VW_STOREN
        WHERE USER_CODE = #{userCode}
        GROUP BY EQUIP_CODE
    </select>

    <!-- 해당 유저가 가진 스토렌 장비의 각 상태의 개수 조회 -->
    <select id="getStorenStatus" resultType="map">
        SELECT
            NVL(SUM(DECODE(STATUS, '보관비 결제 대기', 1, 0)), 0) AS "보관비 결제 대기",
            NVL(SUM(DECODE(STATUS, '배송 대기', 1, 0)), 0) AS "배송 대기",
            NVL(SUM(DECODE(STATUS, '배송 중', 1, 0)), 0) AS "배송 중",
            NVL(SUM(DECODE(STATUS, '검수 중', 1, 0)), 0) AS "검수 중",
            NVL(SUM(DECODE(STATUS, '보관 중', 1, 0)), 0) AS "보관 중",
            NVL(SUM(DECODE(STATUS, '강제 반환', 1, 0)), 0) AS "강제 반환",
            NVL(SUM(DECODE(STATUS, '승인 대기', 1, 0)), 0) AS "승인 대기",
            NVL(SUM(DECODE(STATUS, '결제 대기', 1, 0)), 0) AS "결제 대기",
            NVL(SUM(DECODE(STATUS, '렌탈 중', 1, 0)), 0) AS "렌탈 중",
            NVL(SUM(DECODE(STATUS, '반납 중', 1, 0)), 0) AS "반납 중",
            NVL(SUM(DECODE(STATUS, '반납 중', 1, 0)), 0) AS "거래 완료",
            NVL(SUM(DECODE(STATUS, '반납 중', 1, 0)), 0) AS "최종 반환",
            NVL(SUM(DECODE(STATUS, '상태 불명', 1, 0)), 0) AS "상태 불명"
        FROM
            VW_STOREN
        WHERE
            USER_CODE = #{userCode}
    </select>

    <!-- 해당 유저가 대여한 스토렌 장비의 각 상태의 개수 조회 -->
    <select id="getStorenMatchingStatus" resultType="map">
        SELECT
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '매칭중', 1, 0)), 0) AS "매칭중",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '매칭승인대기', 1, 0)), 0) AS "매칭승인대기",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '매칭완료', 1, 0)), 0) AS "매칭완료",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '렌탈비결제전', 1, 0)), 0) AS "렌탈비결제전",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '렌탈비결제완료', 1, 0)), 0) AS "렌탈비결제완료",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '배송중', 1, 0)), 0) AS "배송중",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '대여중', 1, 0)), 0) AS "대여중",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '반납일임박', 1, 0)), 0) AS "반납일임박",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '반납중', 1, 0)), 0) AS "반납중",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '검수중', 1, 0)), 0) AS "검수중",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '거래완료', 1, 0)), 0) AS "거래완료",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '추가비용결제필요', 1, 0)), 0) AS "추가비용결제필요",
            NVL(SUM(DECODE(DETAILED_MATCHING_STATUS, '상태불명', 1, 0)), 0) AS "상태불명"
        FROM
            VW_STOREN_MATCHING_STATUS
        WHERE USER_CODE = #{userCode}
    </select>

    <!-- 해당 유저의 상태별 필터링한 스토렌 목록 조회 -->
    <select id="listByUserCodeStatus" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT *
        FROM VW_STOREN
        WHERE USER_CODE = #{userCode}
          AND STATUS = #{status}
        ORDER BY CREATED_DATE DESC
    </select>

    <!-- 해당 유저의 다중 상태별 필터링한 스토렌 목록 조회 -->
    <select id="listByUserCodeMultiStatus" resultType="com.team.mvc.DTO.StorenDTO" resultMap="VWStorenResultMap">
        SELECT *
        FROM VW_STOREN
        WHERE USER_CODE = #{userCode}
        AND STATUS IN
        <foreach item="status" collection="statuses" open="(" separator="," close=")">
            #{status}
        </foreach>
        ORDER BY CREATED_DATE DESC
    </select>


    <!-- 해당 유저의 스토렌 위시리스트(찜 목록) 조회 -->
    <select id="listMyWishByUserCode" resultMap="VWStorenResultMap">
        SELECT VWS.STOREN_ID, VWS.EQUIP_CODE, VWS.STOREN_TITLE,
               VWS.DAILY_RENT_PRICE, VWS.RENTAL_START_DATE, VWS.RENTAL_END_DATE,
               VWS.MATCHING_REQUEST_COUNT, VWS.MATCHING_STATUS
        FROM WISHLIST W
                 JOIN VW_STOREN VWS
                      ON W.STOREN_ID = VWS.STOREN_ID
        WHERE W.USER_CODE = #{userCode}
        ORDER BY W.CREATED_DATE DESC
    </select>

    <!-- 해당 유저의 찜 삭제(스토렌id를 통해) -->
    <delete id="deleteMyWishByUserCodeStorenId">
        DELETE
        FROM WISHLIST
        WHERE USER_CODE=#{userCode} AND STOREN_ID=#{storenId}
    </delete>
</mapper>