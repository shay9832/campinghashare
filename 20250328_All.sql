--○ 테이블 강제 삭제(초기에만 사용하고 이후 삭제 필요)
drop table HOT_POST_LOG cascade constraints purge
/

drop table RECOMMEND cascade constraints purge
/

drop table BOOKMARK cascade constraints purge
/

drop table EVENT_ENTRY cascade constraints purge
/

drop table NOTI_CHECK_LOG cascade constraints purge
/

drop table NOTI cascade constraints purge
/

drop table NOTI_TYPE cascade constraints purge
/

drop table STATISTICS cascade constraints purge
/

drop table STAT_TYPE cascade constraints purge
/

drop table STAT_PERIOD cascade constraints purge
/

drop table POST_VIEW_LOG cascade constraints purge
/

drop table POST_REPORT_ACTION cascade constraints purge
/

drop table POST_REPORT cascade constraints purge
/

drop table REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPLY_REPORT cascade constraints purge
/

drop table RENTAL_REPLY_REPORT_ACTION cascade constraints purge
/

drop table REPORT_ACTION_TYPE cascade constraints purge
/

drop table RENTAL_REPLY_REPORT cascade constraints purge
/

drop table REPORT_TYPE cascade constraints purge
/

drop table OWNED_COUPON cascade constraints purge
/

drop table ISSUED_COUPON cascade constraints purge
/

drop table COUPON_TYPE cascade constraints purge
/

drop table POINT_LOG cascade constraints purge
/

drop table POINT_CHANGE_TYPE cascade constraints purge
/

drop table RANK cascade constraints purge
/

drop table ADDRESS_LOG cascade constraints purge
/

drop table WISHLIST cascade constraints purge
/

drop table SATISFACTION_LOG cascade constraints purge
/

drop table NICKNAME_LOG cascade constraints purge
/

drop table USERS cascade constraints purge
/

drop table SIGNUP_TYPE cascade constraints purge
/

drop table SUSPENDED_USER cascade constraints purge
/

drop table ATTACHMENT_POST cascade constraints purge
/

drop table ATTACHMENT_REPLY cascade constraints purge
/

drop table REPLY cascade constraints purge
/

drop table POST cascade constraints purge
/

drop table POST_LABEL cascade constraints purge
/

drop table BOARD cascade constraints purge
/

drop table WRITE_GRADE cascade constraints purge
/

drop table BOARD_CATEGORY cascade constraints purge
/

drop table ATTACHMENT_CAMPING_DIARY cascade constraints purge
/

drop table DIARY cascade constraints purge
/

drop table ATTACHMENT_RENTAL_REPLY cascade constraints purge
/

drop table ATTACHMENT_EVENT cascade constraints purge
/

drop table EVENT cascade constraints purge
/

drop table ATTACHMENT_EQUIP_REG cascade constraints purge
/

drop table EQUIP_CODE cascade constraints purge
/

drop table EQUIPMENT_REGISTRATION cascade constraints purge
/

drop table EQUIP_NAME cascade constraints purge
/

drop table BRAND cascade constraints purge
/

alter table STOREN_MATCHING_REQ
    drop constraint SMR_INSPEC_RESULT_ACTION_ID_FK cascade
/

drop table RENTAL_REPLY cascade constraints purge
/

drop table PAY_CANCEL cascade constraints purge
/

drop table PAY_CANCEL_REASON cascade constraints purge
/

drop table USERS_DELIVERY_RETURN cascade constraints purge
/

drop table USERS_DELIVERY cascade constraints purge
/

drop table STORAGE_LAST_RETURN cascade constraints purge
/

drop table STOREN_LAST_RETURN cascade constraints purge
/

drop table INSPEC_LIST cascade constraints purge
/

drop table ADMINS cascade constraints purge
/

drop table CATE_INSPEC cascade constraints purge
/

drop table CATEGORY cascade constraints purge
/

drop table INSPEC_ITEM cascade constraints purge
/

drop table INSPEC_GRADE cascade constraints purge
/

drop table RENTER_ADD_PAY cascade constraints purge
/

drop table RENTER_PROBLEM cascade constraints purge
/

drop table INSPEC_RESULT_ACTION cascade constraints purge
/

drop table INSPEC_RESULT cascade constraints purge
/

drop table PLATFORM_DELIVERY_RETURN cascade constraints purge
/

drop table PLATFORM_DELIVERY cascade constraints purge
/

drop table PAY cascade constraints purge
/

drop table STOREN cascade constraints purge
/

drop table STORAGE cascade constraints purge
/

drop table EQUIP_SIZE cascade constraints purge
/

drop table STOREN_MATCHING_DONE cascade constraints purge
/

drop table STOREN_MATCHING_REQ cascade constraints purge
/

drop table RENTAL_MATCHING_DONE cascade constraints purge
/

drop table RENTAL_MATCHING_REQ cascade constraints purge
/

drop table USER_CODE cascade constraints purge
/

drop table RENTAL cascade constraints purge
/

drop table PAY_METHOD cascade constraints purge
/

drop table EQUIP_GRADE cascade constraints purge
/

drop table INSPEC_RESULT_ACTION_TYPE cascade constraints purge
/

drop table RENTER_PROBLEM_TYPE cascade constraints purge
/

drop table BOOST_LOG cascade constraints purge
/

drop table EVENT_WIN cascade constraints purge
/

drop table RENTER_PROBLEM_LOST cascade constraints purge
/

---------------------------------------------
--○ 시퀀스 삭제
DROP SEQUENCE SEQ;


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--○ 전체 테이블 수 확인
SELECT *
FROM TAB;

--○ 시퀀스 확인
SELECT SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY, LAST_NUMBER, CACHE_SIZE, CYCLE_FLAG, ORDER_FLAG
FROM USER_SEQUENCES;

--○ 테이블 갯수 확인
SELECT COUNT(*) AS TABLE_COUNT 
FROM USER_TABLES;

--○ 전체 제약조건 확인
SELECT *
FROM ALL_CONTSTRAINTS;

--○ 테이블 구조 확인
DESC WRITE_GRADE;



--○ LOCK 문제 해결 방법
SELECT *
FROM v$access
WHERE object = 'ADMINS';

SELECT *
FROM dba_ddl_locks
WHERE name = 'ADMINS';

SELECT l.session_id AS sid, s.serial#, s.username, s.program
FROM v$locked_object l
JOIN dba_objects o ON l.object_id = o.object_id
JOIN v$session s ON l.session_id = s.sid
WHERE o.object_name = 'ADMINS';

SELECT sid, serial#, username, program, status
FROM v$session
WHERE sid = 114 AND serial# = 73;

ALTER SYSTEM KILL SESSION '114,73' IMMEDIATE;


---------------------------------------------------------------------------------
--○ 제약조건 조회 VIEW (전체 테이블)
SELECT 
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
    , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
    , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
JOIN USER_TAB_COLUMNS UTC
    ON UCC.TABLE_NAME = UTC.TABLE_NAME
    AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 조회 VIEW (개별 테이블)
SELECT 
    UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME
    , UCC.COLUMN_NAME, UTC.NULLABLE, UTC.DATA_DEFAULT
    , UC.STATUS, UC.SEARCH_CONDITION
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
JOIN USER_TAB_COLUMNS UTC
    ON UCC.TABLE_NAME = UTC.TABLE_NAME
    AND UCC.COLUMN_NAME = UTC.COLUMN_NAME
WHERE UC.TABLE_NAME = 'STOREN_MATCHING_REQ'
ORDER BY UC.TABLE_NAME, UC.CONSTRAINT_TYPE, UC.CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (전체 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;

--○ 제약조건 간단 목록 조회 VIEW (개별별 테이블)
SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME, STATUS
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DIARY_OPEN_LOG'
ORDER BY TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME;


-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--■■■ 공통 시퀀스 생성 ■■■--
CREATE SEQUENCE SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-------------------------------------------------------
--■■■ 테이블 생성 ■■■--
--○ '작성_권한' 테이블
CREATE TABLE WRITE_GRADE
( WRITE_GRADE_ID    NUMBER
, WRITE_GRADE_NAME  VARCHAR2(30)  CONSTRAINT  WG_WRITE_GRADE_NAME_NN  NOT NULL
, CONSTRAINT WRITE_GRADE_ID_PK PRIMARY KEY(WRITE_GRADE_ID)
);

--○ '말머리' 테이블
CREATE TABLE POST_LABEL
( POST_LABEL_ID   NUMBER
, BOARD_ID        NUMBER        CONSTRAINT  PL_BOARD_ID_NAME_NN  NOT NULL
, POST_LABEL_NAME VARCHAR2(60)  CONSTRAINT  PL_POST_LABEL_NAME_NN  NOT NULL
, CONSTRAINT POST_LABEL_ID_PK PRIMARY KEY(POST_LABEL_ID)
);

--○ '캠핑일지' 테이블
CREATE TABLE DIARY
( DIARY_ID      NUMBER
, USER_CODE     NUMBER        CONSTRAINT  DIA_USER_CODE_NN  NOT NULL
, DIARY_TITLE   VARCHAR(90)   CONSTRAINT  DIA_DIARY_TITLE_NN  NOT NULL
, CAMPING_DATE  DATE          CONSTRAINT  DIA_CAMPING_DATE_NN NOT NULL
, LATITUDE      NUMBER(9,6)
, LONGITUDE     NUMBER(9,6)
, DIARY_WEATHER VARCHAR2(60)
, CREATED_DATE  DATE          CONSTRAINT  DIA_CREATED_DATE_NN  NOT NULL
, CONSTRAINT DIARY_ID_PK PRIMARY KEY(DIARY_ID)
);

--○ '인기글_지정_로그' 테이블
CREATE TABLE HOT_POST_LOG
( HOT_POST_LOG_ID   NUMBER
, POST_ID           NUMBER  CONSTRAINT HPL_POST_ID_NN NOT NULL
, CREATED_DATE      DATE    CONSTRAINT HPL_CREATED_DATE_NN NOT NULL
, CONSTRAINT HOT_POST_LOG_ID_PK PRIMARY KEY(HOT_POST_LOG_ID)
);

--○ '추천' 테이블
CREATE TABLE RECOMMEND
( RECOMMEND_ID  NUMBER
, USER_CODE     NUMBER  CONSTRAINT REC_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT REC_POST_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT REC_CREATED_DATE_NN NOT NULL
, CONSTRAINT RECOMMEND_ID_PK PRIMARY KEY(RECOMMEND_ID)
);

--○ '댓글' 테이블
CREATE TABLE REPLY
( REPLY_ID      NUMBER
, ROOT_REPLY_ID NUMBER
, USER_CODE     NUMBER  CONSTRAINT REP_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT REP_POST_ID_NN NOT NULL
, REPLY_CONTENT VARCHAR2(600)
, CREATED_DATE  DATE    CONSTRAINT REP_CREATED_DATE_NN NOT NULL
, CONSTRAINT REPLY_ID_PK PRIMARY KEY(REPLY_ID)
);


--○ '북마크' 테이블
CREATE TABLE BOOKMARK
( BOOKMARK_ID   NUMBER
, USER_CODE     NUMBER  CONSTRAINT BOO_USER_CODE_NN NOT NULL
, POST_ID       NUMBER  CONSTRAINT BOO_POST_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT BOO_CREATED_DATE_NN NOT NULL
, CONSTRAINT BOOKMARK_ID_PK PRIMARY KEY(BOOKMARK_ID)
);

--○ '이벤트' 테이블
CREATE TABLE EVENT
( EVENT_ID          NUMBER
, ADMIN_ID          VARCHAR2(20)    CONSTRAINT EVE_EVENT_ID_NN NOT NULL
, EVENT_TITLE       VARCHAR2(90)    CONSTRAINT EVE_EVENT_TITLE_NN NOT NULL
, EVENT_CONTENT     VARCHAR2(3000)
, EVENT_START_DATE  DATE            CONSTRAINT EVE_EVENT_START_DATE_NN NOT NULL
, EVENT_END_DATE    DATE            CONSTRAINT EVE_EVENT_END_DATE_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT EVE_CREATED_DATE_NN NOT NULL
, CONSTRAINT EVENT_ID_PK PRIMARY KEY(EVENT_ID)
);

--○ '이벤트_응모' 테이블
CREATE TABLE EVENT_ENTRY
( EVENT_ENTRY_ID    NUMBER
, EVENT_ID          NUMBER  CONSTRAINT EE_EVENT_ID_NN NOT NULL
, USER_CODE         NUMBER  CONSTRAINT EE_USER_CODE_NN NOT NULL
, EVENT_ENTRY_POINT NUMBER
, CREATED_DATE      DATE    CONSTRAINT EE_CREATED_DATE_NN NOT NULL
, CONSTRAINT EVENT_ENTRY_ID_PK PRIMARY KEY(EVENT_ENTRY_ID)
);

--○ '이벤트_당첨' 테이블
CREATE TABLE EVENT_WIN
( EVENT_WIN_ID    NUMBER
, EVENT_ENTRY_ID  NUMBER  CONSTRAINT EW_EVENT_ENTRY_ID_NN NOT NULL
, CONSTRAINT EVENT_WIN_ID_PK PRIMARY KEY(EVENT_WIN_ID)
);

--○ '알림_유형' 테이블
CREATE TABLE NOTI_TYPE
( NOTI_TYPE_ID    NUMBER
, NOTI_TYPE_NAME  VARCHAR2(100)  CONSTRAINT NT_NOTI_TYPE_NAME_NN NOT NULL
, NOTI_CONTENT    VARCHAR(300)   CONSTRAINT NT_NOTI_CONTENT_NN NOT NULL
, CONSTRAINT NOTI_TYPE_ID_PK PRIMARY KEY(NOTI_TYPE_ID)
);

--○ '알림' 테이블
CREATE TABLE NOTI
( NOTI_ID       NUMBER
, USER_CODE     NUMBER  CONSTRAINT NOT_USER_CODE_NN NOT NULL
, NOTI_TYPE_ID  NUMBER  CONSTRAINT NOT_NOTI_TYPE_ID_NN NOT NULL
, CREATED_DATE  DATE    CONSTRAINT NOT_CREATED_DATE_NN NOT NULL
, CONSTRAINT NOTI_ID_PK PRIMARY KEY(NOTI_ID)
);

--○ '알림_확인_로그' 테이블
CREATE TABLE NOTI_CHECK_LOG
( NOTI_CHECK_LOG_ID NUMBER
, NOTI_ID           NUMBER  CONSTRAINT NCL_NOTI_ID_NN NOT NULL
, CHECKED_DATE      DATE    CONSTRAINT NCL_CHECKED_DATE_NN NOT NULL
, CONSTRAINT NOTI_CHECK_LOG_ID_PK PRIMARY KEY(NOTI_CHECK_LOG_ID)
);

--○ '통계항목' 테이블
CREATE TABLE STAT_TYPE
( STAT_TYPE_ID    NUMBER
, STAT_TYPE_NAME   VARCHAR2(90) CONSTRAINT ST_STAT_TYPE_NAME_NN NOT NULL
, CONSTRAINT STAT_TYPE_ID_PK PRIMARY KEY(STAT_TYPE_ID)
);

--○ '통계기간' 테이블
CREATE TABLE STAT_PERIOD
( STAT_PERIOD_ID    NUMBER
, STAT_PERIOD_NAME  VARCHAR2(30) CONSTRAINT SP_STAT_PERIOD_NAME_NN NOT NULL
, CONSTRAINT STAT_PERIOD_ID_PK PRIMARY KEY(STAT_PERIOD_ID)
);

--○ '통계' 테이블
CREATE TABLE STATISTICS
( STATISTICS_ID   NUMBER
, ADMIN_ID        VARCHAR2(20) CONSTRAINT STA_ADMIN_ID_NN NOT NULL
, STAT_TYPE_ID    NUMBER       CONSTRAINT STA_STAT_TYPE_ID_NN NOT NULL
, STAT_PERIOD_ID  NUMBER       CONSTRAINT STA_STAT_PERIOD_ID_NN NOT NULL
, STAT_RESULT     VARCHAR2(3000)
, CREATED_DATE    DATE         CONSTRAINT STA_CREATED_DATE_NN NOT NULL
, CONSTRAINT STATISTICS_ID_PK PRIMARY KEY(STATISTICS_ID)
);

--○ '게시판_카테고리' 테이블
CREATE TABLE BOARD_CATEGORY
( BOARD_CATE_ID     NUMBER
, BOARD_CATE_NAME   VARCHAR2(30)    CONSTRAINT BOARD_CATE_NAME_NN NOT NULL
, BOARD_CATE_DESC   VARCHAR2(90)
, CONSTRAINT BOARD_CATE_ID_PK PRIMARY KEY(BOARD_CATE_ID)
);

--○ '게시판' 테이블
CREATE TABLE BOARD
( BOARD_ID        NUMBER
, BOARD_CATE_ID   NUMBER        CONSTRAINT BOA_BOARD_CATE_ID_NN NOT NULL
, WRITE_GRADE_ID  NUMBER        CONSTRAINT BOA_WRITE_GRADE_ID_NN NOT NULL
, BOARD_NAME      VARCHAR2(60)  CONSTRAINT BOA_BOARD_NAME_ID_NN NOT NULL
, CONSTRAINT BOARD_ID_PK PRIMARY KEY(BOARD_ID)
);

--○ '게시물' 테이블
CREATE TABLE POST
( POST_ID       NUMBER
, USER_CODE     NUMBER          CONSTRAINT POS_USER_CODE_NN NOT NULL
, BOARD_ID      NUMBER          CONSTRAINT POS_BOARD_ID_NN NOT NULL
, POST_LABEL_ID NUMBER          CONSTRAINT POS_POST_LABEL_ID_NN NOT NULL
, POST_TITLE    VARCHAR2(90)    CONSTRAINT POS_POST_TITLE_NN NOT NULL
, POST_CONTENT  VARCHAR2(3000)
, CREATED_DATE  DATE            CONSTRAINT POS_CREATED_DATE_NN NOT NULL
, CONSTRAINT POST_ID_PK PRIMARY KEY(POST_ID)
);

--○ '게시물_조회_로그' 테이블
CREATE TABLE POST_VIEW_LOG
( POST_VIEW_LOG_ID  NUMBER
, USER_CODE         NUMBER  CONSTRAINT PVL_USER_CODE_NN NOT NULL
, POST_ID           NUMBER  CONSTRAINT PVL_POST_ID_NN NOT NULL
, CREATED_DATE      DATE    CONSTRAINT PVL_CREATED_DATE_NN NOT NULL
, CONSTRAINT POST_VIEW_LOG_ID_PK PRIMARY KEY(POST_VIEW_LOG_ID)
);

--○ '신고_유형' 테이블
CREATE TABLE REPORT_TYPE
( REPORT_TYPE_ID  NUMBER
, REPORT_TYPE_NAME  VARCHAR2(60) CONSTRAINT RT_REPORT_TYPE_NAME_NN NOT NULL
, CONSTRAINT REPORT_TYPE_ID_PK PRIMARY KEY(REPORT_TYPE_ID)
);

--○ '신고_처리_유형' 테이블
CREATE TABLE REPORT_ACTION_TYPE
( REPORT_ACTION_TYPE_ID   NUMBER
, REPORT_ACTION_TYPE_NAME VARCHAR2(20) CONSTRAINT RAT_REPORT_ACTION_TYPE_NAME_NN NOT NULL
, CONSTRAINT REPORT_ACTION_TYPE_ID_PK PRIMARY KEY(REPORT_ACTION_TYPE_ID)
);

--○ '게시글_신고_접수' 테이블
CREATE TABLE POST_REPORT
( POST_REPORT_ID    NUMBER
, POST_ID           NUMBER  CONSTRAINT PR_POST_ID_NN NOT NULL
, REPORTER_ID       NUMBER  CONSTRAINT PR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID    NUMBER  CONSTRAINT PR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT    VARCHAR2(600)
, REPORTED_DATE     DATE    CONSTRAINT PR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT POST_REPORT_ID_PK PRIMARY KEY(POST_REPORT_ID)
);

--○ '게시글_신고_처리' 테이블
CREATE TABLE POST_REPORT_ACTION
( POST_REPORT_ACTION_ID NUMBER
, POST_REPORT_ID        NUMBER          CONSTRAINT PRA_POST_REPORT_ID_NN NOT NULL
, ADMIN_ID              VARCHAR2(20)    CONSTRAINT PRA_ADMIN_ID_NN NOT NULL  
, REPORT_ACTION_TYPE_ID NUMBER          CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE        DATE            CONSTRAINT PRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT POST_REPORT_ACTION_ID_PK PRIMARY KEY(POST_REPORT_ACTION_ID)
);

--○ '댓글_신고_접수' 테이블
CREATE TABLE REPLY_REPORT
( REPLY_REPORT_ID   NUMBER
, REPLY_ID          NUMBER  CONSTRAINT RR_REPLY_ID_NN NOT NULL
, REPORTER_ID       NUMBER  CONSTRAINT RR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID    NUMBER  CONSTRAINT RR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT    VARCHAR2(600)
, REPORTED_DATE     DATE    CONSTRAINT RR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT REPLY_REPORT_ID_PK PRIMARY KEY(REPLY_REPORT_ID)
);

--○ '댓글_신고_처리' 테이블
CREATE TABLE REPLY_REPORT_ACTION
( REPLY_REPORT_ACTION_ID  NUMBER
, REPLY_REPORT_ID         NUMBER        CONSTRAINT RRA_REPLY_REPORT_ID_NN NOT NULL
, ADMIN_ID                VARCHAR2(20)  CONSTRAINT RRA_ADMIN_ID_NN NOT NULL
, REPORT_ACTION_TYPE_ID   NUMBER        CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE          DATE          CONSTRAINT RRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT REPLY_REPORT_ACTION_ID_PK PRIMARY KEY(REPLY_REPORT_ACTION_ID)
);

--○ '렌탈_댓글_신고_접수' 테이블
CREATE TABLE RENTAL_REPLY_REPORT
( RENTAL_REPLY_REPORT_ID    NUMBER
, RENTAL_REPLY_ID           NUMBER  CONSTRAINT RRR_RENTAL_REPLY_ID_NN NOT NULL
, REPORTER_ID               NUMBER  CONSTRAINT RRR_REPORTER_ID_NN NOT NULL  
, REPORT_TYPE_ID            NUMBER  CONSTRAINT RRR_REPORT_TYPE_ID_NN NOT NULL
, REPORT_CONTENT            VARCHAR2(600)
, REPORTED_DATE             DATE    CONSTRAINT RRR_REPORTED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_REPLY_REPORT_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ID)
);

--○ '렌탈_댓글_신고_처리' 테이블
CREATE TABLE RENTAL_REPLY_REPORT_ACTION
( RENTAL_REPLY_REPORT_ACTION_ID NUMBER
, RENTAL_REPLY_REPORT_ID        NUMBER        CONSTRAINT RRRA_RENTAL_REPLY_R_ID_NN NOT NULL
, ADMIN_ID                      VARCHAR2(20)  CONSTRAINT RRRA_ADMIN_ID_NN NOT NULL
, REPORT_ACTION_TYPE_ID         NUMBER        CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_NN NOT NULL
, COMPLETED_DATE                DATE          CONSTRAINT RRRA_COMPLETED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_REPLY_R_ACTION_ID_PK PRIMARY KEY(RENTAL_REPLY_REPORT_ACTION_ID)
);

--○ '쿠폰_종류' 테이블
CREATE TABLE COUPON_TYPE
( COUPON_TYPE_ID    NUMBER       
, COUPON_TYPE_NAME  VARCHAR2(60) CONSTRAINT CT_COUPON_TYPE_NAME_NN NOT NULL
, CONSTRAINT COUPON_TYPE_ID_PK PRIMARY KEY(COUPON_TYPE_ID)
);

--○ '발행_쿠폰' 테이블
CREATE TABLE ISSUED_COUPON
( ISSUED_COUPON_ID  NUMBER
, ADMIN_ID          VARCHAR2(20)  CONSTRAINT IC_ADMIN_ID_NN NOT NULL 
, COUPON_TYPE_ID    NUMBER        CONSTRAINT IC_COUPON_TYPE_ID_NN NOT NULL
, COUPON_NAME       VARCHAR2(60)  CONSTRAINT IC_COUPON_NAME_NN NOT NULL
, COUPON_DISCOUNT   NUMBER(3,0)   
, COUPON_MONTH      NUMBER(2,0)   CONSTRAINT IC_COUPON_MONTH_NN NOT NULL
, ISSUED_DATE       DATE          CONSTRAINT IC_ISSUED_DATE_NN NOT NULL
, CONSTRAINT ISSUED_COUPON_ID_PK PRIMARY KEY(ISSUED_COUPON_ID)
);

--○ '보유_쿠폰' 테이블
CREATE TABLE OWNED_COUPON
( OWNED_COUPON_ID     NUMBER  
, USER_CODE           NUMBER   CONSTRAINT OC_USER_CODE_NN NOT NULL
, ISSUED_COUPON_ID    NUMBER   CONSTRAINT OC_ISSUED_COUPON_ID_NN NOT NULL
, COMPLETED_DATE      DATE
, CONSTRAINT OWNED_COUPON_ID_PK PRIMARY KEY(OWNED_COUPON_ID)      
);

--○ '포인트_변동_유형' 테이블
CREATE TABLE POINT_CHANGE_TYPE
( POINT_CHANGE_TYPE_ID      NUMBER
, POINT_CHANGE_TYPE_NAME    VARCHAR2(60)   CONSTRAINT PCT_POINT_CHANGE_TYPE_NAME_NN NOT NULL
, CONSTRAINT POINT_CHANGE_TYPE_ID_PK PRIMARY KEY(POINT_CHANGE_TYPE_ID)
);

--○ '포인트_변동_로그' 테이블
CREATE TABLE POINT_LOG
( POINT_LOG_ID          NUMBER
, USER_CODE             NUMBER  CONSTRAINT PL_USER_CODE_NN NOT NULL
, POINT_CHANGE_TYPE_ID  NUMBER  CONSTRAINT PL_POINT_CHANGE_TYPE_ID_NN NOT NULL
, POINT_CHANGE          NUMBER
, CREATED_DATE          DATE    CONSTRAINT PL_CREATED_DATE_NN NOT NULL
, CONSTRAINT POINT_LOG_ID_PK PRIMARY KEY(POINT_LOG_ID)
);

--○ '가입유형' 테이블
CREATE TABLE SIGNUP_TYPE
( SIGNUP_TYPE_ID    NUMBER  
, SIGNUP_TYPE_NAME  VARCHAR2(30)    CONSTRAINT ST_SIGNUP_TYPE_NAME_NN NOT NULL
, CONSTRAINT SIGNUP_TYPE_ID_PK PRIMARY KEY(SIGNUP_TYPE_ID)
);

--○ '회원_등급' 테이블
CREATE TABLE RANK
( RANK_ID               NUMBER
, RANK_NAME             VARCHAR2(30)    CONSTRAINT RAN_RANK_NAME_NN NOT NULL
, MIN_POINT             NUMBER(3,0)     CONSTRAINT RAN_MIN_POINT_NN NOT NULL
, MAX_POINT             NUMBER(3,0)     CONSTRAINT RAN_MAX_POINT_NN NOT NULL
, MIN_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MIN_CREDIT_NN NOT NULL
, MAX_CREDIT            NUMBER(3,0)     CONSTRAINT RAN_MAX_CREDIT_NN NOT NULL
, MAX_NICKNAME_CHANGE   NUMBER(1,0)     CONSTRAINT RAN_MAX_NICKNAME_CHANGE_NN NOT NULL
, DISCOUNT_COUPON_QTY   NUMBER(1,0)     CONSTRAINT RAN_DISCOUNT_COUPON_QTY_NN NOT NULL
, BOOST_QTY             NUMBER(1,0)     CONSTRAINT RAN_BOOT_QTY_NN NOT NULL
, CONSTRAINT RANK_ID_PK PRIMARY KEY(RANK_ID)
);

--○ '끌어올리기_로그' 테이블
CREATE TABLE BOOST_LOG
( BOOST_LOG_ID      NUMBER
, STOREN_ID         NUMBER 
, RENTAL_ID         NUMBER
, BOOST_LOG_DATE    DATE    CONSTRAINT BL_BOOST_LOG_DATE_NN NOT NULL
, CONSTRAINT BOOST_LOG_ID_PK PRIMARY KEY(BOOST_LOG_ID)
);

--○ '주소_로그' 테이블
CREATE TABLE ADDRESS_LOG
( ADDRESS_ID            NUMBER
, USER_CODE             NUMBER          CONSTRAINT AL_USER_CODE_NN NOT NULL
, ZIPCODE               VARCHAR2(10)    CONSTRAINT AL_ZIPCODE_NN NOT NULL
, ADDRESS               VARCHAR2(200)   CONSTRAINT AL_ADDRESS_NN NOT NULL
, LAST_UPDATED_DATE     DATE            CONSTRAINT AL_LAST_UPDATED_DATE_NN NOT NULL
, CONSTRAINT ADDRESS_ID_PK PRIMARY KEY(ADDRESS_ID)
);

--○ '찜' 테이블
CREATE TABLE WISHLIST
( WISHLIST_ID       NUMBER
, USER_CODE         NUMBER      CONSTRAINT WIS_USER_CODE_NN NOT NULL
, STOREN_ID         NUMBER      CONSTRAINT WIS_STOREN_ID_NN NOT NULL
, RENTAL_ID         NUMBER      CONSTRAINT WIS_RENTAL_ID_NN NOT NULL
, CREATED_DATE      DATE        CONSTRAINT WIS_CREATE_DATE_NN NOT NULL
, CONSTRAINT WISHLIST_ID_PK PRIMARY KEY(WISHLIST_ID)
);

--○ '만족도_평가_로그' 테이블
CREATE TABLE SATISFACTION_LOG
( SATIS_LOG_ID              NUMBER
, RENTAL_MATCHING_DONE_ID   NUMBER          CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_NN NOT NULL
, REVIEWER_ID               NUMBER          CONSTRAINT SL_REVIEWER_ID_NN NOT NULL
, REVIEWEE_ID               NUMBER          CONSTRAINT SL_REVIEWEE_ID_NN NOT NULL
, SATIS_SCORE               NUMBER(1,0)     CONSTRAINT SL_SATIS_SCORE_NN NOT NULL
, SATIS_COMMENT             VARCHAR2(500)
, CREATED_DATE              DATE            CONSTRAINT SL_CREATED_DATE_NN NOT NULL
, CONSTRAINT SATIS_LOG_ID_PK PRIMARY KEY(SATIS_LOG_ID)            
);

--○ '닉네임_로그' 테이블
CREATE TABLE NICKNAME_LOG
( NICKNAME_LOG_ID       NUMBER
, USER_CODE             NUMBER          CONSTRAINT NL_USER_CODE_NN NOT NULL
, NICKNAME              VARCHAR2(30)    CONSTRAINT NL_NICKNAME_NN NOT NULL
, LAST_UPDATED_DATE     DATE            CONSTRAINT NL_LAST_UPDATED_DATE NOT NULL
, CONSTRAINT NICKNAME_LOG_ID_PK PRIMARY KEY(NICKNAME_LOG_ID)
);

--○ '회원_코드' 테이블
CREATE TABLE USER_CODE
( USER_CODE     NUMBER
, EXIT_DATE     DATE
, CONSTRAINT USER_CODE_PK PRIMARY KEY(USER_CODE)
);

--○ '회원_가입' 테이블
CREATE TABLE USERS
( USER_ID           VARCHAR2(20)
, USER_CODE         NUMBER          CONSTRAINT USE_USER_CODE_NN NOT NULL
, SIGNUP_TYPE_ID   NUMBER          CONSTRAINT USE_SIGNUP_TYPE_ID_NN NOT NULL
, USER_PW          VARCHAR2(128)   CONSTRAINT USE_USER_PW_NN NOT NULL
, USER_NAME          VARCHAR2(30)   CONSTRAINT USE_USER_NAME_NN NOT NULL
, USER_TEL          VARCHAR2(30)   CONSTRAINT USE_USER_TEL_NN NOT NULL
, USER_EMAIL      VARCHAR2(40)   
, EMAIL_CONSENT      NUMBER(1,0)
, CREATED_DATE      DATE          CONSTRAINT USE_CREATED_DATE NOT NULL
, CONSTRAINT USER_ID_PK PRIMARY KEY(USER_ID)   
);

--○ 관리자 등록 테이블
CREATE TABLE ADMINS
( ADMIN_ID          VARCHAR2(20)
, USER_CODE         NUMBER          CONSTRAINT ADM_USER_CODE_NN NOT NULL
, ADMIN_PW          VARCHAR2(128)   CONSTRAINT ADM_ADMIN_PW_NN  NOT NULL
, ADMIN_NICKNAME    VARCHAR2(30)    CONSTRAINT ADM_ADMIN_NICKNAME_NN NOT NULL
, ADMIN_TEL         VARCHAR2(30)    CONSTRAINT ADM_ADMIN_TEL_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT ADM_CREATED_DATE NOT NULL
, CONSTRAINT ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
);

--○ '활동정지_회원' 테이블
CREATE TABLE SUSPENDED_USER
( SUSPENDED_USER_ID     NUMBER
, USER_CODE             NUMBER          CONSTRAINT SU_USER_CODE_NN NOT NULL
, ADMIN_ID              VARCHAR2(20)    CONSTRAINT SU_ADMIN_ID_NN NOT NULL
, SUSPENDED_START_DATE  DATE            CONSTRAINT SU_SUSPENDED_START_DATE_NN NOT NULL
, CONSTRAINT SUSPENDED_USER_ID_PK PRIMARY KEY(SUSPENDED_USER_ID)
);

--○ '첨부파일_게시물' 테이블
CREATE TABLE ATTACHMENT_POST
( ATTACHMENT_POST_ID    NUMBER
, POST_ID               NUMBER          CONSTRAINT AP_POST_ID_NN NOT NULL
, ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AP_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AP_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE       NUMBER          CONSTRAINT AP_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AP_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE          DATE            CONSTRAINT AP_CREATED_DATE_NN NOT NULL 
, CONSTRAINT ATTACHMENT_POST_ID_PK PRIMARY KEY(ATTACHMENT_POST_ID)
);

--○ '첨부파일_댓글' 테이블
CREATE TABLE ATTACHMENT_REPLY
( ATTACHMENT_REPLY_ID   NUMBER
, REPLY_ID              NUMBER          CONSTRAINT AR_REPLY_ID_NN NOT NULL
, ATTACHMENT_NAME       VARCHAR2(100)   CONSTRAINT AR_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH       VARCHAR2(300)   CONSTRAINT AR_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE       NUMBER          CONSTRAINT AR_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER      NUMBER(2,0)     CONSTRAINT AR_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE          DATE            CONSTRAINT AR_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_REPLY_ID)
);

--○ '첨부파일_캠핑일지' 테이블
CREATE TABLE ATTACHMENT_CAMPING_DIARY
( ATTACHMENT_CAMPING_DIARY_ID   NUMBER
, DIARY_ID                      NUMBER          CONSTRAINT ACD_DIARY_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ACD_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ACD_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT ACD_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ACD_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT ACD_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_CAMPING_DIARY_ID_PK PRIMARY KEY(ATTACHMENT_CAMPING_DIARY_ID)
);

--○ '첨부파일_렌탈_댓글' 테이블
CREATE TABLE ATTACHMENT_RENTAL_REPLY
( ATTACHMENT_RENTAL_REPLY_ID    NUMBER
, RENTAL_REPLY_ID               NUMBER          CONSTRAINT ARR_RENTAL_REPLY_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT ARR_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT ARR_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT ARR_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT ARR_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT ARR_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_RENTAL_REPLY_ID_PK PRIMARY KEY(ATTACHMENT_RENTAL_REPLY_ID)
);

--○ '첨부파일_이벤트' 테이블
CREATE TABLE ATTACHMENT_EVENT
( ATTACHMENT_EVENT_ID           NUMBER
, EVENT_ID                      NUMBER          CONSTRAINT AE_EVENT_ID_NN NOT NULL
, ATTACHMENT_NAME               VARCHAR2(100)   CONSTRAINT AE_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH               VARCHAR2(300)   CONSTRAINT AE_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE               NUMBER          CONSTRAINT AE_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER              NUMBER(2,0)     CONSTRAINT AE_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                  DATE            CONSTRAINT AE_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_EVENT_ID_PK PRIMARY KEY(ATTACHMENT_EVENT_ID)
);

--○ '첨부파일_장비_등록' 테이블
CREATE TABLE ATTACHMENT_EQUIP_REG
( ATTACHMENT_EQUIP_REG_ID               NUMBER
, EQUIP_CODE                            NUMBER          CONSTRAINT AER_EQUIP_CODE_NN NOT NULL
, ATTACHMENT_NAME                       VARCHAR2(100)   CONSTRAINT AER_ATTACHMENT_NAME_NN NOT NULL
, ATTACHMENT_PATH                       VARCHAR2(300)   CONSTRAINT AER_ATTACHMENT_PATH_NN NOT NULL
, ATTACHMENT_SIZE                       NUMBER          CONSTRAINT AER_ATTACHMENT_SIZE_NN NOT NULL
, ATTACHMENT_ORDER                      NUMBER(2,0)     CONSTRAINT AER_ATTACHMENT_ORDER_NN NOT NULL
, CREATED_DATE                          DATE            CONSTRAINT AER_CREATED_DATE_NN NOT NULL
, CONSTRAINT ATTACHMENT_EQUIP_REG_ID_PK PRIMARY KEY(ATTACHMENT_EQUIP_REG_ID)
);

--○ '장비_코드' 테이블
CREATE TABLE EQUIP_CODE
( EQUIP_CODE    NUMBER  CONSTRAINT EC_EQUIP_CODE_NN NOT NULL
, OWN_END_DATE  DATE
, CONSTRAINT EQUIP_CODE_PK PRIMARY KEY(EQUIP_CODE)
);

--○ '장비등록' 테이블
CREATE TABLE EQUIPMENT_REGISTRATION
( EQUIP_ID          NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT ER_EQUIP_CODE_NN NOT NULL
, USER_CODE         NUMBER          CONSTRAINT ER_USER_CODE_NN NOT NULL
, CATEGORY_ID       NUMBER          CONSTRAINT ER_CATEGORY_ID_NN NOT NULL
, EQUIP_NAME_ID     NUMBER          CONSTRAINT ER_EQUIP_NAME_ID_NN NOT NULL
, ORIGINAL_PRICE    NUMBER(9,0)     CONSTRAINT ER_ORIGINAL_PRICE_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT ER_CREATED_DATE_NN NOT NULL
, CONSTRAINT EQUIP_ID_PK PRIMARY KEY(EQUIP_ID)
);

--○ '장비명' 테이블
CREATE TABLE EQUIP_NAME
( EQUIP_NAME_ID     NUMBER
, BRAND_ID          NUMBER          CONSTRAINT EN_BRAND_ID_NN NOT NULL
, EQUIP_NAME        VARCHAR2(90)    CONSTRAINT EN_EQUIP_NAME_NN NOT NULL
, CONSTRAINT EQUIP_NAME_ID_PK PRIMARY KEY(EQUIP_NAME_ID)
);

--○ '스토렌_장비등록' 테이블
CREATE TABLE STOREN
( STOREN_ID         NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT STOREN_EQUIP_CODE_NN NOT NULL
, SIZE_ID           NUMBER          CONSTRAINT STOREN_SIZE_ID_NN NOT NULL
, STORE_MONTH       NUMBER(2,0)     CONSTRAINT STOREN_STORE_MONTH_NN NOT NULL
, STOREN_TITLE      VARCHAR2(90)
, RENT_CONTENT      VARCHAR2(1000)
, DAILY_RENT_PRICE  NUMBER(8,0)  
, CREATED_DATE      DATE            CONSTRAINT STOREN_CREATED_DATE_NN NOT NULL
, CONSTRAINT STOREN_ID_PK PRIMARY KEY(STOREN_ID)
);

--○ '보관_장비등록' 테이블
CREATE TABLE STORAGE
( STORAGE_ID        NUMBER
, EQUIP_CODE        NUMBER          CONSTRAINT STORAGE_EQUIP_CODE_NN NOT NULL
, SIZE_ID           NUMBER          CONSTRAINT STORAGE_SIZE_ID_NN NOT NULL       
, STORAGE_MONTH     NUMBER(2,0)     CONSTRAINT STORAGE_STORAGE_MONTH_NN NOT NULL
, CREATED_DATE      DATE            CONSTRAINT STORAGE_CREATED_DATE_NN NOT NULL
, CONSTRAINT STORAGE_ID_PK PRIMARY KEY(STORAGE_ID)
);

--○ '렌탈_장비등록' 테이블
CREATE TABLE RENTAL
( RENTAL_ID             NUMBER
, EQUIP_CODE            NUMBER          CONSTRAINT REN_EQUIP_CODE_NN NOT NULL
, RENTAL_TITLE          VARCHAR2(90)    CONSTRAINT REN_RENTAL_TITLE_NN NOT NULL
, RENT_CONTENT          VARCHAR2(1000)  CONSTRAINT REN_RENT_CONTENT_NN NOT NULL
, RENT_START_WANT_DATE  DATE            CONSTRAINT REN_RENT_START_WANT_DATE_NN NOT NULL
, RENT_END_WANT_DATE    DATE            CONSTRAINT REN_RENT_END_WANT_DATE_NN NOT NULL
, DAILY_RENT_PRICE      NUMBER(8,0)     
, CREATED_DATE          DATE            CONSTRAINT REN_CREATED_DATE_NN NOT NULL
, CONSTRAINT RENTAL_ID_PK PRIMARY KEY(RENTAL_ID)
);

--○ '카테고리' 테이블
CREATE TABLE CATEGORY
( CATEGORY_ID           NUMBER
, PARENT_CATEGORY_ID    NUMBER
, CATEGORY_NAME         VARCHAR2(30)    CONSTRAINT CAT_CATEGORY_NAME_NN NOT NULL
, CONSTRAINT CATEGORY_ID_PK PRIMARY KEY(CATEGORY_ID)
);

--○ '브랜드' 테이블
CREATE TABLE BRAND
( BRAND_ID      NUMBER
, BRAND_NAME    VARCHAR2(60)    CONSTRAINT BRA_BRAND_NAME_NN NOT NULL
, CONSTRAINT BRAND_ID_PK PRIMARY KEY(BRAND_ID)
);

--○ '사이즈' 테이블
CREATE TABLE EQUIP_SIZE
( EQUIP_SIZE_ID    NUMBER
, EQUIP_SIZE_NAME   VARCHAR2(10)    CONSTRAINT ES_EQUIP_SIZE_NAME_NN NOT NULL
, REQUIRED_SPACE    NUMBER(2,0)     CONSTRAINT ES_REQUIRED_SPACE_NN NOT NULL
, DAILY_STORAGE_FEE NUMBER(6,0)     CONSTRAINT ES_DAILY_STORAGE_FEE_NN NOT NULL
, CONSTRAINT EQUIP_SIZE_ID_PK PRIMARY KEY(EQUIP_SIZE_ID)
);

--○ '스토렌_매칭_신청' 테이블
CREATE TABLE STOREN_MATCHING_REQ
(
    STOREN_MATCHING_REQ_ID      NUMBER
,   RENTAL_START_DATE           DATE        CONSTRAINT SMR_RENTAL_START_DATE_NN NOT NULL
,   RENTAL_END_DATE             DATE        CONSTRAINT SMR_RENTAL_END_DATE_NN NOT NULL
,   REQUESTED_DATE              DATE        CONSTRAINT SMR_REQUESTED_DATE_NN NOT NULL
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SMR_INSPEC_RESULT_ACTION_ID_NN NOT NULL
,   STOREN_MATCHING_REQ_USER_ID NUMBER      CONSTRAINT SMR_STOREN_M_R_USER_ID_NN  NOT NULL
,   CONSTRAINT STOREN_MATCHING_REQ_ID_PK PRIMARY KEY(STOREN_MATCHING_REQ_ID)
);

--○ '스토렌_매칭_완료' 테이블
CREATE TABLE STOREN_MATCHING_DONE
(
    STOREN_MATCHING_DONE_ID     NUMBER
,   APPROVED_DATE               DATE        CONSTRAINT SMD_APPROVED_DATE_NN NOT NULL
,   STOREN_MATCHING_REQ_ID      NUMBER      CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_NN   NOT NULL
,   CONSTRAINT STOREN_MATCHING_DONE_ID_PK PRIMARY KEY(STOREN_MATCHING_DONE_ID)
);

--○ '렌탈_매칭_신청' 테이블
CREATE TABLE RENTAL_MATCHING_REQ
(
    RENTAL_MATCHING_REQ_ID          NUMBER
,   RENTAL_START_DATE               DATE        CONSTRAINT RMR_RENTAL_START_DATE_NN NOT NULL
,   RENTAL_END_DATE                 DATE        CONSTRAINT RMR_RENTAL_END_DATE_NN NOT NULL
,   REQUESTED_DATE                  DATE        CONSTRAINT RMR_REQUESTED_DATE_NN NOT NULL
,   RENTAL_ID                       NUMBER      CONSTRAINT RMR_RENTAL_ID_NN NOT NULL
,   RENTAL_MATCHING_REQUESTER_ID    NUMBER      CONSTRAINT RMR_RENTAL_M_R_ID_NN NOT NULL
,   CONSTRAINT RENTAL_MATCHING_REQ_ID_PK PRIMARY KEY(RENTAL_MATCHING_REQ_ID)
);

--○ '렌탈_매칭_완료' 테이블
CREATE TABLE RENTAL_MATCHING_DONE
(
    RENTAL_MATCHING_DONE_ID     NUMBER
,   APPROVED_DATE               DATE        CONSTRAINT RMD_APPROVED_DATE_NN NOT NULL
,   RENTAL_MATCHING_REQ_ID      NUMBER      CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_NN  NOT NULL
,   CONSTRAINT RENTAL_MATCHING_DONE_ID_PK PRIMARY KEY(RENTAL_MATCHING_DONE_ID)
);

--○ '렌탈_댓글' 테이블
CREATE TABLE RENTAL_REPLY
(
    RENTAL_REPLY_ID            NUMBER
,   RENTAL_REPLY_CONTENT       VARCHAR2(600)
,   CREATED_DATE               DATE             CONSTRAINT RRY_CREATED_DATE_NN NOT NULL
,   RENTAL_ROOT_REPLY_ID       NUMBER           CONSTRAINT RRY_RENTAL_ROOT_REPLY_ID_NN NOT NULL
,   RENTAL_ID                  NUMBER           CONSTRAINT RRY_RENTAL_ID_NN NOT NULL
,   USER_CODE                  NUMBER           CONSTRAINT RRY_USER_CODE_NN NOT NULL
,   CONSTRAINT RENTAL_REPLY_ID_PK PRIMARY KEY(RENTAL_REPLY_ID)
);

--○ '결제_방법' 테이블
CREATE TABLE PAY_METHOD
( PAY_METHOD_ID     NUMBER
, PAY_METHOD_NAME   VARCHAR2(30)    CONSTRAINT PAY_PAY_METHOD_NAME_NN NOT NULL
, CONSTRAINT PAY_METHOD_ID_PK PRIMARY KEY (PAY_METHOD_ID)
);

--○ '결제' 테이블
CREATE TABLE PAY
(
    PAY_ID                      NUMBER
,   PAY_METHOD_ID               NUMBER  CONSTRAINT PAY_PAY_METHOD_ID_NN NOT NULL
,   PAY_AMOUNT                  NUMBER  CONSTRAINT PAY_PAY_AMOUNT_NN NOT NULL
,   PAY_DATE                    DATE    CONSTRAINT PAY_PAY_DATE_NN NOT NULL
,   RENTAL_MATCHING_DONE_ID     NUMBER
,   STORAGE_ID                  NUMBER 
,   STOREN_ID                   NUMBER
,   STOREN_MATCHING_DONE_ID     NUMBER
,   CONSTRAINT PAY_ID_PK PRIMARY KEY (PAY_ID)
);

--○ '결제_취소' 테이블
CREATE TABLE PAY_CANCEL
(
    PAY_CANCEL_ID           NUMBER
,   CANCEL_DATE             DATE        CONSTRAINT PC_CANCEL_DATE_NN NOT NULL
,   PAY_ID                  NUMBER      CONSTRAINT PC_PAY_ID_NN NOT NULL
,   PAY_CANCEL_REASON_ID    NUMBER      CONSTRAINT PC_PAY_CANCEL_REASON_ID_NN   NOT NULL
,   CONSTRAINT PAY_CANCEL_ID_PK PRIMARY KEY (PAY_CANCEL_ID)
);

--○ '결제_취소사유' 테이블
CREATE TABLE PAY_CANCEL_REASON
(
    PAY_CANCEL_REASON_ID        NUMBER
,   PAY_CANCEL_REASON_NAME      VARCHAR2(60)    CONSTRAINT PCR_PAY_CANCEL_REASON_NAME_NN NOT NULL
,   CONSTRAINT PAY_CANCEL_REASON_ID_PK  PRIMARY KEY (PAY_CANCEL_REASON_ID)
);

--○ '플랫폼_배송' 테이블
CREATE TABLE PLATFORM_DELIVERY
(
    PLATFORM_DELIVERY_ID        NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT PD_DELIVERY_START_DATE_NN NOT NULL
,   DELIVERY_END_DATE           DATE
,   PAY_ID                      NUMBER
,   CONSTRAINT PLATFORM_DELIVERY_ID_PK  PRIMARY KEY (PLATFORM_DELIVERY_ID)
);

--○ '플랫폼_배송_반환' 테이블
CREATE TABLE PLATFORM_DELIVERY_RETURN
(
    PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   DELIVERY_START_DATE             DATE        CONSTRAINT PDR_DELIVERY_START_DATE_NN NOT NULL
,   DELIVERY_END_DATE               DATE
,   PLATFORM_DELIVERY_ID            NUMBER      CONSTRAINT PDR_PLATFORM_DELIVERY_ID_NN  NOT NULL
,   CONSTRAINT PLATFORM_DELIVERY_RETURN_ID_PK PRIMARY KEY (PLATFORM_DELIVERY_RETURN_ID)
);

--○ '거래자_택배' 테이블
CREATE TABLE USERS_DELIVERY
(
    USERS_DELIVERY_ID       NUMBER
,   CARRIER_NAME            VARCHAR2(60)
,   WAYBILL_NUMBER          NUMBER          CONSTRAINT UD_WAYBILL_NUMBER_NN NOT NULL
,   WAYBILL_ENTRY_DATE      DATE            CONSTRAINT UD_WAYBILL_ENTRY_DATE_NN NOT NULL
,   DELIVERY_END_DATE       DATE
,   PAY_ID                  NUMBER          CONSTRAINT UD_PAY_ID_NN NOT NULL
,   CONSTRAINT USERS_DELIVERY_ID_PK PRIMARY KEY (USERS_DELIVERY_ID)
);

--○ '거래자_택배_반환' 테이블
CREATE TABLE USERS_DELIVERY_RETURN
(
    USERS_DELIVERY_RETURN_ID        NUMBER
,   CARRIER_NAME                    VARCHAR2(60)
,   WAYBILL_NUMBER                  NUMBER          CONSTRAINT UDR_WAYBILL_NUMBER_NN NOT NULL
,   WAYBILL_ENTRY_DATE              DATE            CONSTRAINT UDR_WAYBILL_ENTRY_DATE_NN NOT NULL
,   DELIVERY_END_DATE               DATE
,   USERS_DELIVERY_ID               NUMBER          CONSTRAINT UDR_USERS_DELIVERY_ID_NN NOT NULL
,   CONSTRAINT USERS_DELIVERY_RETURN_ID_PK PRIMARY KEY (USERS_DELIVERY_RETURN_ID)
);

--○ '보관_최종_반환' 테이블
CREATE TABLE STORAGE_LAST_RETURN
(
    STORAGE_LAST_RETURN_ID      NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT SELR_DELI_START_DATE_NN   NOT NULL
,   DELIVERY_END_DATE           DATE
,   STORAGE_ID                  NUMBER
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SELR_INSPEC_R_ACTION_ID_NN NOT NULL
,   CONSTRAINT STORAGE_LAST_RETURN_ID_PK    PRIMARY KEY (STORAGE_LAST_RETURN_ID)
);

--○ '스토렌_최종_반환' 테이블 생성
CREATE TABLE STOREN_LAST_RETURN
(
    STOREN_LAST_RETURN_ID      NUMBER
,   DELIVERY_START_DATE         DATE        CONSTRAINT SNLR_DELI_START_DATE_NN   NOT NULL
,   DELIVERY_END_DATE           DATE
,   STOREN_ID                   NUMBER
,   INSPEC_RESULT_ACTION_ID     NUMBER      CONSTRAINT SNLR_INSPEC_R_ACTION_ID_NN   NOT NULL
,   CONSTRAINT STOREN_LAST_RETURN_ID_PK    PRIMARY KEY (STOREN_LAST_RETURN_ID)
);

--○ '검수_리스트' 테이블
CREATE TABLE INSPEC_LIST
(
    INSPEC_LIST_ID                  NUMBER
,   INSPEC_COMMENT                  VARCHAR2(300)
,   INSPECTION_DATE                 DATE            CONSTRAINT IL_INSPECTION_DATE_NN   NOT NULL
,   CATE_INSPEC_ID                  NUMBER
,   PLATFORM_DELIVERY_ID            NUMBER
,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   ADMIN_ID                        VARCHAR2(20)    CONSTRAINT IL_ADMIN_ID_NN   NOT NULL
,   INSPEC_GRADE_ID                 NUMBER          CONSTRAINT IL_INSPEC_GRADE_ID_NN    NOT NULL
,   CONSTRAINT INSPEC_LIST_ID_PK    PRIMARY KEY (INSPEC_LIST_ID)
);

--○ '카테_검수항목' 테이블
CREATE TABLE CATE_INSPEC
(
    CATE_INSPEC_ID      NUMBER
,   CATEGORY_ID         NUMBER      CONSTRAINT CI_CATEGORY_ID_NN    NOT NULL
,   INSPEC_ITEM_ID      NUMBER      CONSTRAINT CI_INSPEC_ITEM_ID_NN NOT NULL
,   CONSTRAINT CATE_INSPEC_ID_PK    PRIMARY KEY (CATE_INSPEC_ID)
);

--○ '검수항목' 테이블 생성
CREATE TABLE INSPEC_ITEM
(
    INSPEC_ITEM_ID      NUMBER
,   INSPEC_ITEM_NAME    VARCHAR2(60)    CONSTRAINT II_INSPEC_ITEM_NAME_NN   NOT NULL
,   INSPEC_ITEM_DESC    VARCHAR2(300)
,   CONSTRAINT INSPEC_ITEM_ID_PK    PRIMARY KEY (INSPEC_ITEM_ID)
);

--○ '검수항목_등급' 테이블
CREATE TABLE INSPEC_GRADE
(
    INSPEC_GRADE_ID         NUMBER
,   INSPEC_GRADE_NAME       CHAR(3)     CONSTRAINT IG_INSPEC_GRADE_NAME_NN  NOT NULL
,   INSPEC_GRADE_DEDUCTION  NUMBER(2,0) CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_NN NOT NULL
,   CONSTRAINT INSPEC_GRADE_ID_PK   PRIMARY KEY (INSPEC_GRADE_ID)
);

--○ '검수_결과' 테이블
CREATE TABLE INSPEC_RESULT
(
    INSPEC_RESULT_ID                NUMBER
,   PLATFORM_DELIVERY_ID            NUMBER
,   PLATFORM_DELIVERY_RETURN_ID     NUMBER
,   EQUIP_GRADE_ID                  NUMBER      CONSTRAINT IR_EQUIP_GRADE_ID_NN NOT NULL
,   CONSTRAINT INSPEC_RESULT_ID_PK  PRIMARY KEY (INSPEC_RESULT_ID)
);

--○ '장비_등급' 테이블
CREATE TABLE EQUIP_GRADE
(
    EQUIP_GRADE_ID      NUMBER
,   EQUIP_GRADE_NAME    CHAR(1)             CONSTRAINT EG_EQUIP_GRADE_NAME_NN NOT NULL
,   EQUIP_GRADE_DESC    VARCHAR2(90)
,   MIN_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MIN_DEDUCTION_NN NOT NULL
,   MAX_DEDUCTION       NUMBER(2,0)         CONSTRAINT EG_MAX_DEDUCTION_NN NOT NULL
,   CONSTRAINT EQUIP_GRADE_ID_PK PRIMARY KEY (EQUIP_GRADE_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION
(
    INSPEC_RESULT_ACTION_ID         NUMBER
,   COMPLETED_DATE                  DATE        CONSTRAINT IRA_COMPLETED_DATE_NN NOT NULL
,   INSPEC_RESULT_ID                NUMBER      CONSTRAINT IRA_INSPEC_R_ID_NN  NOT NULL
,   INSPEC_RESULT_ACTION_TYPE_ID    NUMBER      CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_NN  NOT NULL
,   CONSTRAINT  INSPEC_R_ACTION_ID_PK  PRIMARY KEY (INSPEC_RESULT_ACTION_ID)
);

--○ '검수_결과_처리_유형' 테이블
CREATE TABLE INSPEC_RESULT_ACTION_TYPE
(
    INSPEC_RESULT_ACTION_TYPE_ID        NUMBER
,   INSPEC_RESULT_ACTION_TYPE_NAME      VARCHAR2(20)        CONSTRAINT IRAT_INSPEC_R_A_TYPE_NAME_NN   NOT NULL
,   CONSTRAINT INSPEC_R_A_TYPE_ID_PK PRIMARY KEY (INSPEC_RESULT_ACTION_TYPE_ID)
);

--○ '사용자_문제_유형' 테이블
CREATE TABLE RENTER_PROBLEM_TYPE
(
    RENTER_PROBLEM_TYPE_ID      NUMBER
,   RENTER_PROBLEM_TYPE_NAME    VARCHAR2(30)        CONSTRAINT RPT_RENTER_P_TYPE_NAME_NN  NOT NULL
,   CONSTRAINT RENTER_PROBLEM_TYPE_ID_PK   PRIMARY KEY (RENTER_PROBLEM_TYPE_ID)
);

--○ '사용자_문제_발생' 테이블
CREATE TABLE RENTER_PROBLEM
(
    RENTER_PROBLEM_ID       NUMBER
,   PROBLEM_REPORTED_DATE   DATE        CONSTRAINT RP_PROBLEM_R_DATE_NN NOT NULL
,   INSPEC_RESULT_ACTION_ID NUMBER      CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_NN    NOT NULL
,   RENTER_PROBLEM_TYPE_ID  NUMBER      CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_NN     NOT NULL
,   CONSTRAINT RENTER_PROBLEM_ID_PK PRIMARY KEY (RENTER_PROBLEM_ID)
);

--○ '사용자_문제_발생_분실' 테이블
CREATE TABLE RENTER_PROBLEM_LOST
(
    RENTER_PROBLEM_LOST_ID  NUMBER
,   STOREN_MATCHING_DONE_ID NUMBER  CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_NN NOT NULL
,   PROBLEM_REPORTED_DATE   DATE    CONSTRAINT RPL_PROBLEM_REPORTED_DATE_NN   NOT NULL
,   CONSTRAINT RENTER_PROBLEM_LOST_ID_PK PRIMARY KEY (RENTER_PROBLEM_LOST_ID)
);

--○ '사용자_추가_결제' 테이블
CREATE TABLE RENTER_ADD_PAY
(
    RENTER_ADD_PAY_ID       NUMBER
,   RENTER_PROBLEM_ID       NUMBER
,   RENTER_PROBLEM_LOST_ID  NUMBER
,   RENTER_ADD_PAY_AMOUNT   NUMBER(9,0)     CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_NN NOT NULL
,   PAY_DATE                DATE            CONSTRAINT RAP_PAY_DATE_NN NOT NULL
,   CONSTRAINT RENTER_ADD_PAY_ID_PK PRIMARY KEY (RENTER_ADD_PAY_ID)
);






-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--■■■ 제약조건 추가 ■■■--

--○ '말머리' 테이블
ALTER TABLE POST_LABEL
ADD CONSTRAINT PL_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
REFERENCES BOARD(BOARD_ID);



--○ '캠핑일지' 테이블
ALTER TABLE DIARY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE DIARY
ADD CONSTRAINT DIA_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);



--○ '인기글_지정_로그' 테이블
ALTER TABLE HOT_POST_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 인기글 지정 로그 함께 삭제)
ALTER TABLE HOT_POST_LOG
ADD CONSTRAINT HPL_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '추천' 테이블
ALTER TABLE RECOMMEND
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RECOMMEND
ADD CONSTRAINT REC_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (한 게시물당 한개 ID로 1번만 추천 가능)
ALTER TABLE RECOMMEND
ADD CONSTRAINT REC_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '댓글' 테이블
ALTER TABLE REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY
ADD CONSTRAINT REP_ROOT_REPLY_ID_FK FOREIGN KEY(ROOT_REPLY_ID)
REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY
ADD CONSTRAINT REP_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 댓글 함께 삭제)
ALTER TABLE REPLY
ADD CONSTRAINT REP_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '북마크' 테이블
ALTER TABLE BOOKMARK
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID);

-- 연쇄 삭제 (게시글 삭제 시 북마크 함께 삭제)
ALTER TABLE BOOKMARK
ADD CONSTRAINT BOO_USER_CODE_POST_ID_UK UNIQUE (USER_CODE, POST_ID);



--○ '이벤트' 테이블
ALTER TABLE EVENT
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT
ADD CONSTRAINT EVE_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

-- 일자 CK
ALTER TABLE EVENT
ADD CONSTRAINT EVE_START_DATE_END_DATE_CK
CHECK (EVENT_START_DATE < EVENT_END_DATE);



--○ '이벤트_응모' 테이블
ALTER TABLE EVENT_ENTRY
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
REFERENCES EVENT(EVENT_ID);

ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (한 유저가 한 이벤트에 응모 1회만 가능)
ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_USER_CODE_EVENT_ID_UK UNIQUE (USER_CODE, EVENT_ID);

-- CK (이벤트 응모 위한 최소 포인트 0 이상)
ALTER TABLE EVENT_ENTRY
ADD CONSTRAINT EE_EVENT_ENTRY_POINT_CK
CHECK (EVENT_ENTRY_POINT >= 0);




--○ '이벤트_당첨' 테이블
ALTER TABLE EVENT_WIN
ADD CONSTRAINT EW_EVENT_ENTRY_ID_FK FOREIGN KEY(EVENT_ENTRY_ID)
REFERENCES EVENT_ENTRY(EVENT_ENTRY_ID);




--○ '알림' 테이블
ALTER TABLE NOTI
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI
ADD CONSTRAINT NOT_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE NOTI
ADD CONSTRAINT NOT_NOTI_TYPE_ID_FK FOREIGN KEY(NOTI_TYPE_ID)
REFERENCES NOTI_TYPE(NOTI_TYPE_ID);



--○ '알림_확인_로그' 테이블
ALTER TABLE NOTI_CHECK_LOG
MODIFY CHECKED_DATE DEFAULT SYSDATE;

ALTER TABLE NOTI_CHECK_LOG
ADD CONSTRAINT NCL_NOTI_ID_FK FOREIGN KEY(NOTI_ID)
REFERENCES NOTI(NOTI_ID);



--○ '통계' 테이블
ALTER TABLE STATISTICS
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_STAT_TYPE_ID_FK FOREIGN KEY(STAT_TYPE_ID)
REFERENCES STAT_TYPE(STAT_TYPE_ID);

ALTER TABLE STATISTICS
ADD CONSTRAINT STA_STAT_PERIOD_ID_FK FOREIGN KEY(STAT_PERIOD_ID)
REFERENCES STAT_PERIOD(STAT_PERIOD_ID);



--○ '게시판' 테이블
ALTER TABLE BOARD
ADD CONSTRAINT BOA_BOARD_CATE_ID_FK FOREIGN KEY(BOARD_CATE_ID)
REFERENCES BOARD_CATEGORY(BOARD_CATE_ID);

ALTER TABLE BOARD
ADD CONSTRAINT BOA_WRITE_GRADE_ID_FK FOREIGN KEY(WRITE_GRADE_ID)
REFERENCES WRITE_GRADE(WRITE_GRADE_ID);



--○ '게시물' 테이블
ALTER TABLE POST
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST
ADD CONSTRAINT POS_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POST
ADD CONSTRAINT POS_BOARD_ID_FK FOREIGN KEY(BOARD_ID)
REFERENCES BOARD(BOARD_ID);

ALTER TABLE POST
ADD CONSTRAINT POS_POST_LABEL_ID_FK FOREIGN KEY(POST_LABEL_ID)
REFERENCES POST_LABEL(POST_LABEL_ID);



--○ '게시물_조회_로그' 테이블
ALTER TABLE POST_VIEW_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_VIEW_LOG
ADD CONSTRAINT PVL_USER_CODE_ID_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- 연쇄 삭제 (게시글 삭제 시 조회수로그 함께 삭제)
ALTER TABLE POST_VIEW_LOG
ADD CONSTRAINT PVL_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '게시글_신고_접수' 테이블
ALTER TABLE POST_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT
ADD CONSTRAINT PR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 게시물에 대해 한명이 1번의 신고만 가능)
ALTER TABLE POST_REPORT
ADD CONSTRAINT PR_REPORTER_ID_POST_ID_UK UNIQUE (REPORTER_ID, POST_ID);



--○ '게시글_신고_처리' 테이블
ALTER TABLE POST_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_POST_REPORT_ID_FK FOREIGN KEY(POST_REPORT_ID)
REFERENCES POST_REPORT(POST_REPORT_ID);

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE POST_REPORT_ACTION
ADD CONSTRAINT PRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '댓글_신고_접수' 테이블
ALTER TABLE REPLY_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
REFERENCES REPLY(REPLY_ID);

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE REPLY_REPORT
ADD CONSTRAINT RR_REPORTER_ID_REPLY_ID_UK UNIQUE (REPORTER_ID, REPLY_ID);



--○ '댓글_신고_처리' 테이블
ALTER TABLE REPLY_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_REPLY_REPORT_ID_FK FOREIGN KEY(REPLY_REPORT_ID)
REFERENCES REPLY_REPORT(REPLY_REPORT_ID);

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE REPLY_REPORT_ACTION
ADD CONSTRAINT RRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '렌탈_댓글_신고_접수' 테이블
ALTER TABLE RENTAL_REPLY_REPORT
MODIFY REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_REPORTER_ID_FK FOREIGN KEY(REPORTER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR_REPORT_TYPE_ID_FK FOREIGN KEY(REPORT_TYPE_ID)
REFERENCES REPORT_TYPE(REPORT_TYPE_ID);

-- UK (한 렌탈 댓글에 대해 한명이 1번의 신고만 가능)
ALTER TABLE RENTAL_REPLY_REPORT
ADD CONSTRAINT RRR__REPORTER_ID_RR_ID_UK UNIQUE (REPORTER_ID, RENTAL_REPLY_ID);



--○ '렌탈_댓글_신고_처리' 테이블
ALTER TABLE RENTAL_REPLY_REPORT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_RENTAL_REPLY_REPORT_ID_FK FOREIGN KEY(RENTAL_REPLY_REPORT_ID)
REFERENCES RENTAL_REPLY_REPORT(RENTAL_REPLY_REPORT_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE RENTAL_REPLY_REPORT_ACTION
ADD CONSTRAINT RRRA_REPORT_ACTION_TYPE_ID_FK FOREIGN KEY(REPORT_ACTION_TYPE_ID)
REFERENCES REPORT_ACTION_TYPE(REPORT_ACTION_TYPE_ID);



--○ '발행_쿠폰' 테이블
ALTER TABLE ISSUED_COUPON
MODIFY ISSUED_DATE DEFAULT SYSDATE;

ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_TYPE_ID_FK FOREIGN KEY(COUPON_TYPE_ID)
REFERENCES COUPON_TYPE(COUPON_TYPE_ID);

-- CK (쿠폰 할인율 1~100% 사이)
ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_DISCOUNT_CK CHECK(COUPON_DISCOUNT BETWEEN 1 AND 100);

-- CK (쿠폰 유효 개월 수 1~12개월 사이)
ALTER TABLE ISSUED_COUPON
ADD CONSTRAINT IC_COUPON_MONTH_CK CHECK(COUPON_MONTH BETWEEN 1 AND 12);



--○ '보유_쿠폰' 테이블
ALTER TABLE OWNED_COUPON
ADD CONSTRAINT OC_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE OWNED_COUPON
ADD CONSTRAINT OC_ISSUED_COUPON_ID_FK FOREIGN KEY(ISSUED_COUPON_ID)
REFERENCES ISSUED_COUPON(ISSUED_COUPON_ID);



--○ '포인트_변동_로그' 테이블
ALTER TABLE POINT_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE POINT_LOG
ADD CONSTRAINT PL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE POINT_LOG
ADD CONSTRAINT PL_POINT_CHANGE_TYPE_ID_FK FOREIGN KEY(POINT_CHANGE_TYPE_ID)
REFERENCES POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID);



--○ '회원_등급' 테이블
ALTER TABLE RANK
ADD CONSTRAINT RAN_MIN_POINT_CK CHECK(MIN_POINT >= 0 AND MIN_POINT < MAX_POINT);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_POINT_CK CHECK(MAX_POINT >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MIN_CREDIT_CK CHECK(MIN_CREDIT >= 0 AND MIN_CREDIT < MAX_CREDIT);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_CREDIT_CK CHECK(MAX_CREDIT >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_MAX_NICKNAME_CHANGE_CK CHECK(MAX_NICKNAME_CHANGE >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_DISCOUNT_COUPON_QTY_CK CHECK(DISCOUNT_COUPON_QTY >= 0);

ALTER TABLE RANK
ADD CONSTRAINT RAN_BOOST_QTY_CK CHECK(BOOST_QTY >= 0);




--○ '회원_등급' 테이블
ALTER TABLE BOOST_LOG
MODIFY BOOST_LOG_DATE DEFAULT SYSDATE;

ALTER TABLE BOOST_LOG
ADD CONSTRAINT BL_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE BOOST_LOG
ADD CONSTRAINT BL_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID);




--○ '주소_로그' 테이블
ALTER TABLE ADDRESS_LOG
MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE ADDRESS_LOG
ADD CONSTRAINT AL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);



--○ '찜' 테이블
ALTER TABLE WISHLIST
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

-- 연쇄 삭제 (렌탈 글 삭제 시 찜 함께 삭제)
ALTER TABLE WISHLIST
ADD CONSTRAINT WIS_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

-- UK (한 스토렌 글은 1번만 찜 가능)
ALTER TABLE  WISHLIST
ADD CONSTRAINT WIS_USER_CODE_STOREN_ID_UK UNIQUE(USER_CODE, STOREN_ID);

-- UK (한 렌탈 글은 1번만 찜 가능)
ALTER TABLE  WISHLIST
ADD CONSTRAINT WIS_USER_CODE_RENTAL_ID_UK UNIQUE(USER_CODE, RENTAL_ID);



--○ '만족도_평가_로그' 테이블
ALTER TABLE SATISFACTION_LOG
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_REVIEWER_ID_FK FOREIGN KEY(REVIEWER_ID)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_REVIEWEE_ID_FK FOREIGN KEY(REVIEWEE_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (만족도 점수는 1~5점 사이)
ALTER TABLE SATISFACTION_LOG
ADD CONSTRAINT SL_SATIS_SCORE_CK CHECK(SATIS_SCORE BETWEEN 1 AND 5);



--○ '닉네임_로그' 테이블
ALTER TABLE NICKNAME_LOG
MODIFY LAST_UPDATED_DATE DEFAULT SYSDATE;

ALTER TABLE NICKNAME_LOG
ADD CONSTRAINT NL_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

-- UK (유저 닉네임 고유해야함)
ALTER TABLE NICKNAME_LOG
ADD CONSTRAINT NL_NICKNAME_UK UNIQUE(NICKNAME);



--○ '회원_코드' 테이블
ALTER TABLE USERS
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE USERS
ADD CONSTRAINT USE_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE USERS
ADD CONSTRAINT USE_SIGNUP_TYPE_ID_FK FOREIGN KEY(SIGNUP_TYPE_ID)
REFERENCES SIGNUP_TYPE(SIGNUP_TYPE_ID);

-- UK (유저 이메일주소 고유해야함)
ALTER TABLE USERS
ADD CONSTRAINT USE_USER_EMAIL_UK UNIQUE(USER_EMAIL);



--○ 관리자 등록 테이블
ALTER TABLE ADMINS
ADD CONSTRAINT ADM_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE ADMINS
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- UK (유저 닉네임 고유해야함)
ALTER TABLE ADMINS
ADD CONSTRAINT ADM_ADMIN_NICKNAME_UK UNIQUE(ADMIN_NICKNAME);



--○ '활동정지_회원' 테이블
ALTER TABLE SUSPENDED_USER
MODIFY SUSPENDED_START_DATE DEFAULT SYSDATE;

ALTER TABLE SUSPENDED_USER
ADD CONSTRAINT SU_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE SUSPENDED_USER
ADD CONSTRAINT SU_ADMIN_ID_FK FOREIGN KEY(ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);



--○ '첨부파일_게시물' 테이블
ALTER TABLE ATTACHMENT_POST
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (게시글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_POST
ADD CONSTRAINT AP_POST_ID_FK FOREIGN KEY(POST_ID)
REFERENCES POST(POST_ID)
ON DELETE CASCADE;



--○ '첨부파일_댓글' 테이블
ALTER TABLE ATTACHMENT_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_REPLY
ADD CONSTRAINT AR_REPLY_ID_FK FOREIGN KEY(REPLY_ID)
REFERENCES REPLY(REPLY_ID)
ON DELETE CASCADE;



--○ '첨부파일_캠핑일지' 테이블
ALTER TABLE ATTACHMENT_CAMPING_DIARY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (캠핑일지 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_CAMPING_DIARY
ADD CONSTRAINT ACD_DIARY_ID_FK FOREIGN KEY(DIARY_ID)
REFERENCES DIARY(DIARY_ID)
ON DELETE CASCADE;



--○ '첨부파일_렌탈_댓글' 테이블
ALTER TABLE ATTACHMENT_RENTAL_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈_댓글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_RENTAL_REPLY
ADD CONSTRAINT ARR_RENTAL_REPLY_ID_FK FOREIGN KEY(RENTAL_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID)
ON DELETE CASCADE;



--○ '첨부파일_이벤트' 테이블
ALTER TABLE ATTACHMENT_EVENT
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (이벤트 글 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EVENT
ADD CONSTRAINT AE_EVENT_ID_FK FOREIGN KEY(EVENT_ID)
REFERENCES EVENT(EVENT_ID)
ON DELETE CASCADE;



--○ '첨부파일_장비_등록' 테이블
ALTER TABLE ATTACHMENT_EQUIP_REG
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (내 장비 삭제 시 첨부파일 함께 삭제)
ALTER TABLE ATTACHMENT_EQUIP_REG
ADD CONSTRAINT AER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE)
ON DELETE CASCADE;




--○ '장비등록' 테이블
ALTER TABLE EQUIPMENT_REGISTRATION
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_EQUIP_NAME_ID_FK FOREIGN KEY(EQUIP_NAME_ID)
REFERENCES EQUIP_NAME(EQUIP_NAME_ID);

ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (신품가격 >= 0)
ALTER TABLE EQUIPMENT_REGISTRATION
ADD CONSTRAINT ER_ORIGINAL_PRICE_CK CHECK(ORIGINAL_PRICE >= 0);



--○ '장비명' 테이블
ALTER TABLE EQUIP_NAME
ADD CONSTRAINT EN_BRAND_ID_FK FOREIGN KEY(BRAND_ID)
REFERENCES BRAND(BRAND_ID);

-- 동일 브랜드 + 동일 장비명 설정 불가
ALTER TABLE EQUIP_NAME
ADD CONSTRAINT EN_EQUIP_NAME_BRAND_ID_UK UNIQUE(EQUIP_NAME, BRAND_ID);



--○ '스토렌_장비등록' 테이블
ALTER TABLE STOREN
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN
ADD CONSTRAINT STOREN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STOREN
ADD CONSTRAINT STOREN_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
ADD CONSTRAINT STOREN_STORE_MONTH_CK CHECK(STORE_MONTH BETWEEN 1 AND 12);

-- CK (보관 개월수 1~12개월 사이)
ALTER TABLE STOREN
ADD CONSTRAINT STOREN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);



--○ '보관_장비등록' 테이블
ALTER TABLE STORAGE
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_SIZE_ID_FK FOREIGN KEY(SIZE_ID)
REFERENCES EQUIP_SIZE(EQUIP_SIZE_ID);

-- CK (보관 개월수 1~12개월 사이이)
ALTER TABLE STORAGE
ADD CONSTRAINT STORAGE_STORAGE_MONTH_CK CHECK(STORAGE_MONTH BETWEEN 1 AND 12);



--○ '렌탈_장비등록' 테이블
ALTER TABLE RENTAL
MODIFY CREATED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL
ADD CONSTRAINT REN_EQUIP_CODE_FK FOREIGN KEY(EQUIP_CODE)
REFERENCES EQUIP_CODE(EQUIP_CODE);

-- CK (시작일자가 종료일보다 빨라야 함)
ALTER TABLE RENTAL
ADD CONSTRAINT REN_RENT_END_WANT_DATE_CK CHECK(RENT_END_WANT_DATE > RENT_START_WANT_DATE);

-- CK (1일 렌탈가격은 0 이상)
ALTER TABLE RENTAL
ADD CONSTRAINT REN_DAILY_RENT_PRICE_CK CHECK(DAILY_RENT_PRICE >= 0);



--○ '카테고리' 테이블
ALTER TABLE CATEGORY
ADD CONSTRAINT CAT_PARENT_CATEGORY_ID_FK FOREIGN KEY(PARENT_CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

-- UK (카테고리명명 고유해야함)
ALTER TABLE CATEGORY
ADD CONSTRAINT CAT_CATEGORY_NAME_UK UNIQUE(CATEGORY_NAME);



--○ '브랜드' 테이블
-- UK (브랜드명 고유해야함)
ALTER TABLE BRAND
ADD CONSTRAINT BRA_BRAND_NAME_UK UNIQUE(BRAND_NAME);



--○ '스토렌_매칭_신청' 테이블
ALTER TABLE STOREN_MATCHING_REQ
MODIFY REQUESTED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY (INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_STN_M_REQ_USER_ID_FK FOREIGN KEY (STOREN_MATCHING_REQ_USER_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE STOREN_MATCHING_REQ
ADD CONSTRAINT SMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '스토렌_매칭_완료' 테이블
ALTER TABLE STOREN_MATCHING_DONE
MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE STOREN_MATCHING_DONE
ADD CONSTRAINT SMD_STOREN_MATCHING_REQ_ID_FK FOREIGN KEY(STOREN_MATCHING_REQ_ID)
REFERENCES STOREN_MATCHING_REQ(STOREN_MATCHING_REQ_ID);



--○ '렌탈_매칭_신청' 테이블
ALTER TABLE RENTAL_MATCHING_REQ
MODIFY REQUESTED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 매칭 신청 함께 삭제)
ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_RENTAL_ID_FK FOREIGN KEY(RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_RENTAL_M_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQUESTER_ID)
REFERENCES USER_CODE(USER_CODE);

-- CK (시작일이 종료일보다 빨라야 함)
ALTER TABLE RENTAL_MATCHING_REQ
ADD CONSTRAINT RMR_CK CHECK (RENTAL_START_DATE < RENTAL_END_DATE);



--○ '렌탈_매칭_완료' 테이블
ALTER TABLE RENTAL_MATCHING_DONE
MODIFY APPROVED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTAL_MATCHING_DONE
ADD CONSTRAINT RMD_RENTAL_MATCHING_REQ_ID_FK FOREIGN KEY(RENTAL_MATCHING_REQ_ID)
REFERENCES RENTAL_MATCHING_REQ(RENTAL_MATCHING_REQ_ID);



--○ '렌탈_댓글' 테이블
ALTER TABLE RENTAL_REPLY
MODIFY CREATED_DATE DEFAULT SYSDATE;

-- 연쇄 삭제 (렌탈 글 삭제 시 렌탈 댓글 함께 삭제)
ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_RENTAL_ID_FK FOREIGN KEY (RENTAL_ID)
REFERENCES RENTAL(RENTAL_ID)
ON DELETE CASCADE;

ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_USER_CODE_FK FOREIGN KEY(USER_CODE)
REFERENCES USER_CODE(USER_CODE);

ALTER TABLE RENTAL_REPLY
ADD CONSTRAINT RR_RENTAL_ROOT_REPLY_ID_FK FOREIGN KEY(RENTAL_ROOT_REPLY_ID)
REFERENCES RENTAL_REPLY(RENTAL_REPLY_ID);



--○ '결제' 테이블
ALTER TABLE PAY
MODIFY PAY_DATE DEFAULT SYSDATE;

ALTER TABLE PAY
ADD CONSTRAINT PAY_RENTAL_MATCHING_DONE_ID_FK FOREIGN KEY(RENTAL_MATCHING_DONE_ID)
REFERENCES RENTAL_MATCHING_DONE(RENTAL_MATCHING_DONE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STOREN_ID_FK FOREIGN KEY(STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);

ALTER TABLE PAY
ADD CONSTRAINT PAY_PAY_METHOD_ID_FK FOREIGN KEY(PAY_METHOD_ID)
REFERENCES PAY_METHOD(PAY_METHOD_ID);

-- CK (결제금액은 0 이상)
ALTER TABLE PAY
ADD CONSTRAINT PAY_AMOUNT_CK CHECK(PAY_AMOUNT >= 0);



--○ '결제_취소' 테이블
ALTER TABLE PAY_CANCEL
MODIFY CANCEL_DATE DEFAULT SYSDATE;

ALTER TABLE PAY_CANCEL
ADD CONSTRAINT PC_PAY_ID_FK FOREIGN KEY(PAY_ID)
REFERENCES PAY(PAY_ID);

ALTER TABLE PAY_CANCEL
ADD CONSTRAINT PC_PAY_CANCEL_REASON_ID_FK FOREIGN KEY(PAY_CANCEL_REASON_ID)
REFERENCES PAY_CANCEL_REASON(PAY_CANCEL_REASON_ID);



--○ '플랫폼_배송' 테이블
ALTER TABLE PLATFORM_DELIVERY
ADD CONSTRAINT PD_PAY_ID_FK FOREIGN KEY(PAY_ID)
REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY
ADD CONSTRAINT PD_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '플랫폼_배송_반환' 테이블
ALTER TABLE PLATFORM_DELIVERY_RETURN
ADD CONSTRAINT PDR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE PLATFORM_DELIVERY_RETURN
ADD CONSTRAINT PDR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '거래자_택배' 테이블
ALTER TABLE USERS_DELIVERY
ADD CONSTRAINT UD_PAY_ID_FK FOREIGN KEY (PAY_ID)
REFERENCES PAY(PAY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY
ADD CONSTRAINT UD_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '거래자_택배_반환' 테이블
ALTER TABLE USERS_DELIVERY_RETURN
ADD CONSTRAINT UDR_USERS_DELIVERY_ID_FK FOREIGN KEY(USERS_DELIVERY_ID)
REFERENCES USERS_DELIVERY(USERS_DELIVERY_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE USERS_DELIVERY_RETURN
ADD CONSTRAINT UDR_DATE_CK CHECK (WAYBILL_ENTRY_DATE < DELIVERY_END_DATE);



--○ '보관_최종_반환' 테이블
ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_STORAGE_ID_FK FOREIGN KEY(STORAGE_ID)
REFERENCES STORAGE(STORAGE_ID);

ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STORAGE_LAST_RETURN
ADD CONSTRAINT SLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);



--○ '스토렌_최종_반환' 테이블 생성
ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT SLR_STOREN_ID_FK FOREIGN KEY (STOREN_ID)
REFERENCES STOREN(STOREN_ID);

ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT STNLR_INSPEC_R_ACTION_ID_FK FOREIGN KEY
(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

-- CK (시작일은 종료일보다 빠름)
ALTER TABLE STOREN_LAST_RETURN
ADD CONSTRAINT STNLR_CK CHECK (DELIVERY_START_DATE < DELIVERY_END_DATE);




--○ '검수_리스트' 테이블
ALTER TABLE INSPEC_LIST
MODIFY INSPECTION_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_CATE_INSPEC_ID_FK FOREIGN KEY(CATE_INSPEC_ID)
REFERENCES CATE_INSPEC(CATE_INSPEC_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_ADMIN_ID_FK FOREIGN KEY (ADMIN_ID)
REFERENCES ADMINS(ADMIN_ID);

ALTER TABLE INSPEC_LIST
ADD CONSTRAINT IL_INSPEC_GRADE_ID_FK FOREIGN KEY (INSPEC_GRADE_ID)
REFERENCES INSPEC_GRADE(INSPEC_GRADE_ID);




--○ '카테_검수항목' 테이블
ALTER TABLE CATE_INSPEC
ADD CONSTRAINT CI_CATEGORY_ID_FK FOREIGN KEY(CATEGORY_ID)
REFERENCES CATEGORY(CATEGORY_ID);

ALTER TABLE CATE_INSPEC
ADD CONSTRAINT CI_INSPEC_ITEM_ID_FK FOREIGN KEY (INSPEC_ITEM_ID)
REFERENCES INSPEC_ITEM(INSPEC_ITEM_ID);



--○ '검수항목_등급' 테이블 생성
-- CK(감점 >= 0)
ALTER TABLE INSPEC_GRADE
ADD CONSTRAINT IG_INSPEC_GRADE_DEDUCTION_CK CHECK(INSPEC_GRADE_DEDUCTION >= 0);




--○ '검수_결과' 테이블
ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_PLATFORM_DELIVERY_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_ID)
REFERENCES PLATFORM_DELIVERY(PLATFORM_DELIVERY_ID);

ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_PLATFORM_DELI_R_ID_FK FOREIGN KEY(PLATFORM_DELIVERY_RETURN_ID)
REFERENCES PLATFORM_DELIVERY_RETURN(PLATFORM_DELIVERY_RETURN_ID);

ALTER TABLE INSPEC_RESULT
ADD CONSTRAINT IR_EQUIP_GRADE_ID_FK FOREIGN KEY(EQUIP_GRADE_ID)
REFERENCES EQUIP_GRADE(EQUIP_GRADE_ID);



--○ '검수_결과_처리_유형' 테이블
ALTER TABLE INSPEC_RESULT_ACTION
MODIFY COMPLETED_DATE DEFAULT SYSDATE;

ALTER TABLE INSPEC_RESULT_ACTION
ADD CONSTRAINT IRA_INSPEC_RESULT_ID_FK FOREIGN KEY(INSPEC_RESULT_ID)
REFERENCES INSPEC_RESULT(INSPEC_RESULT_ID);

ALTER TABLE INSPEC_RESULT_ACTION
ADD CONSTRAINT IRA_INSPEC_R_ACTION_TYPE_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_TYPE_ID)
REFERENCES INSPEC_RESULT_ACTION_TYPE(INSPEC_RESULT_ACTION_TYPE_ID);



--○ '사용자_문제_발생' 테이블
ALTER TABLE RENTER_PROBLEM
MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM
ADD CONSTRAINT RP_INSPEC_RESULT_ACTION_ID_FK FOREIGN KEY(INSPEC_RESULT_ACTION_ID)
REFERENCES INSPEC_RESULT_ACTION(INSPEC_RESULT_ACTION_ID);

ALTER TABLE RENTER_PROBLEM
ADD CONSTRAINT RP_RENTER_PROBLEM_TYPE_ID_FK FOREIGN KEY(RENTER_PROBLEM_TYPE_ID)
REFERENCES RENTER_PROBLEM_TYPE(RENTER_PROBLEM_TYPE_ID);



--○ '사용자_문제_발생_분실' 테이블
ALTER TABLE RENTER_PROBLEM_LOST
MODIFY PROBLEM_REPORTED_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_PROBLEM_LOST
ADD CONSTRAINT RPL_STOREN_MATCHING_DONE_ID_FK FOREIGN KEY(STOREN_MATCHING_DONE_ID)
REFERENCES STOREN_MATCHING_DONE(STOREN_MATCHING_DONE_ID);



--○ '사용자_추가_결제' 테이블
ALTER TABLE RENTER_ADD_PAY
MODIFY PAY_DATE DEFAULT SYSDATE;

ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_PROBLEM_ID_FK FOREIGN KEY (RENTER_PROBLEM_ID)
REFERENCES RENTER_PROBLEM(RENTER_PROBLEM_ID);

ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_PROBLEM_LOST_ID_FK FOREIGN KEY (RENTER_PROBLEM_LOST_ID)
REFERENCES RENTER_PROBLEM_LOST(RENTER_PROBLEM_LOST_ID);

-- CK (추가결제금액 >= 0)
ALTER TABLE RENTER_ADD_PAY
ADD CONSTRAINT RAP_RENTER_ADD_PAY_AMOUNT_CK CHECK (RENTER_ADD_PAY_AMOUNT >= 0);


---------------------------------------------------------------------------
---------------------------------------------------------------------------
--■■■ DUMMY DATA ■■■--


--▶ 최상위 테이블 SEQ ◀--
CREATE SEQUENCE CATEGORY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE BRAND_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_NAME_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_SIZE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE PAY_CANCEL_REASON_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE CATE_INSPEC_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_ITEM_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_GRADE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE EQUIP_GRADE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE INSPEC_RESULT_ACTION_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE RENTER_PROBLEM_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;




CREATE SEQUENCE SIGNUP_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE RANK_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE COUPON_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE POINT_CHANGE_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE REPORT_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE REPORT_ACTION_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;





CREATE SEQUENCE BOARD_CATEGORY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE BOARD_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE WRITE_GRADE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE POST_LABEL_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE NOTI_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE STAT_TYPE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE STAT_PERIOD_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


----------------------------------------------------------------------------------
--▶ 최상위 테이블 ◀--

-- INSPEC_GRADE 테이블 더미 데이터
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME) VALUES (1, 'A급');
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME) VALUES (2, 'B급');
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME) VALUES (3, 'C급');
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME) VALUES (4, 'D급');
INSERT INTO INSPEC_GRADE (INSPEC_GRADE_ID, INSPEC_GRADE_NAME) VALUES (5, '사용불가');

-- INSPEC_RESULT_ACTION_TYPE 테이블 더미 데이터
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME) VALUES (1, '정상처리');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME) VALUES (2, '수리필요');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME) VALUES (3, '교체필요');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME) VALUES (4, '반품처리');
INSERT INTO INSPEC_RESULT_ACTION_TYPE (INSPEC_RESULT_ACTION_TYPE_ID, INSPEC_RESULT_ACTION_TYPE_NAME) VALUES (5, '폐기처리');

-- RENTER_PROBLEM_TYPE 테이블 더미 데이터
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (1, '부품분실');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (2, '파손');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (3, '오염');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (4, '기능불량');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (5, '지연반납');
INSERT INTO RENTER_PROBLEM_TYPE (RENTER_PROBLEM_TYPE_ID, RENTER_PROBLEM_TYPE_NAME) VALUES (6, '비정상사용');

-- INSPEC_ITEM 테이블 더미 데이터
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (1, '텐트 천');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (2, '텐트 폴대');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (3, '텐트 바닥');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (4, '텐트 지퍼');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (5, '방수기능');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (6, '침낭 내피');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (7, '침낭 외피');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (8, '침낭 지퍼');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (9, '버너 작동여부');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (10, '버너 가스누출');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (11, '테이블 다리');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (12, '테이블 상판');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (13, '의자 천');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (14, '의자 프레임');
INSERT INTO INSPEC_ITEM (INSPEC_ITEM_ID, INSPEC_ITEM_NAME) VALUES (15, '랜턴 작동여부');

-- EQUIP_GRADE 테이블 더미 데이터
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME) VALUES (1, '최상급');
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME) VALUES (2, '상급');
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME) VALUES (3, '중급');
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME) VALUES (4, '하급');
INSERT INTO EQUIP_GRADE (EQUIP_GRADE_ID, EQUIP_GRADE_NAME) VALUES (5, '초보자용');

-- PAY_CANCEL_REASON 테이블 더미 데이터
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (1, '결제오류');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (2, '고객요청');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (3, '재고부족');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (4, '배송지연');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (5, '상품불량');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (6, '단순변심');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (7, '정보오기재');
INSERT INTO PAY_CANCEL_REASON (PAY_CANCEL_REASON_ID, PAY_CANCEL_REASON_NAME) VALUES (8, '가격변동');

-- BRAND 테이블 더미 데이터
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (1, '콜맨');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (2, '코베아');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (3, '스노우피크');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (4, '네이처하이크');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (5, '밀레');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (6, '노스페이스');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (7, '로고스');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (8, '컬럼비아');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (9, '캠프타운');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (10, '버팔로');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (11, '아이두젠');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (12, '카즈미');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (13, '웨버');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (14, '헬리녹스');
INSERT INTO BRAND (BRAND_ID, BRAND_NAME) VALUES (15, '아이스박스');

-- EQUIP_SIZE 테이블 더미 데이터
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (1, 'XS', 1, 1000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (2, 'S', 2, 1500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (3, 'M', 3, 2000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (4, 'L', 4, 2500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (5, 'XL', 5, 3000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (6, '소형', 2, 1500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (7, '중형', 3, 2000);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (8, '대형', 4, 2500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (9, '특대형', 6, 3500);
INSERT INTO EQUIP_SIZE (EQUIP_SIZE_ID, EQUIP_SIZE_NAME, REQUIRED_SPACE, DAILY_STORAGE_FEE) VALUES (10, '접이식', 1, 1000);


--○ 알림 유형
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '인기글 지정', '회원님의 게시글이 인기글로 지정되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '댓글 등록', '회원님의 게시글에 댓글이 등록되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '블라인드(작성자)', '회원님의 게시글이 신고 접수되어 블라인드 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '댓글(렌탈댓글) 블라인드(작성자)', '회원님의 댓글이 신고 접수되어 블라인드 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '게시글 신고처리(처벌대상)', '회원님의 게시글이 가이드라인 위반으로 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '댓글(렌탈댓글) 신고처리(처벌대상)', '회원님의 댓글이 가이드라인 위반으로 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '허위신고(처벌대상)', '회원님의 신고가 허위로 판단되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '활동정지회원', '회원님의 계정이 규정위반활동으로 활동정지 처리되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '만족도평가', '회원님의 대한 만족도 평가가 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '렌탈 댓글 등록', '회원님의 장비에 댓글이 등록되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '렌탈(스토렌) 매칭 신청', '회원님의 장비에 매칭 신청이 있습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '렌탈(스토렌) 매칭 완료', '회원님이 신청한 장비가 매칭되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '결제', '결제 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '결제 취소', '결제 취소되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '플랫폼 배송시작', '배송이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '플랫폼 배송완료', '배송이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '플랫폼 배송 반환시작', '반납이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '플랫폼 배송 반환완료', '반납이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '거래자 택배', '배송이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '거래자 택배 반환', '배송이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '반환시작(보관, 스토렌)', '반환이 시작되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '반환완료(보관, 스토렌)', '반환이 완료되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '검수결과', '회원님의 장비등급이 확정되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '검수결과 입고처리', '회원님의 장비가 입고처리 되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '검수결과 반환처리', '회원님의 장비가 반환처리 되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '사용자 문제 발생', '회원님의 장비에 문제가 접수되었습니다.');
INSERT INTO NOTI_TYPE(NOTI_TYPE_ID, NOTI_TYPE_NAME, NOTI_CONTENT)
VALUES(SEQ.NEXTVAL, '사용자 추가 결제', '추가 결제가 완료되었습니다.');

--○ 통계 항목
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '접속자 수');
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '회원 수');
INSERT INTO STAT_TYPE(STAT_TYPE_ID, STAT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '거래수');

--○ 통계 기간
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(SEQ.NEXTVAL, '상반기');
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(SEQ.NEXTVAL, '하반기');
INSERT INTO STAT_PERIOD(STAT_PERIOD_ID, STAT_PERIOD_NAME)
VALUES(SEQ.NEXTVAL, '연간');

--○ 작성 권한
INSERT INTO WRITE_GRADE(WRITE_GRADE_ID, WRITE_GRADE_NAME)
VALUES(SEQ.NEXTVAL, '관리자');
INSERT INTO WRITE_GRADE(WRITE_GRADE_ID, WRITE_GRADE_NAME)
VALUES(SEQ.NEXTVAL, '관리자+회원');

---------------------------------------------
-- REPORT_TYPE에 더미데이터 삽입

--○ 데이터 입력 쿼리문 구성
/*
중복 글 / 게시판 오지정 / 부적절 표현 / 플랫폼 밖 대화 유도
*/
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '중복 글')
;
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '게시판 오지정')
;
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '부적절 표현')
;
INSERT INTO REPORT_TYPE(REPORT_TYPE_ID, REPORT_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '플랫폼 밖 대화 유도')
;




---------------------------------------------
-- COUPON_TYPE에 더미데이터 삽입

--○ 데이터 입력 쿼리문 구성
INSERT INTO COUPON_TYPE(COUPON_TYPE_ID, COUPON_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '할인 쿠폰')
;
INSERT INTO COUPON_TYPE(COUPON_TYPE_ID, COUPON_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '끌어올리기 쿠폰')
;




---------------------------------------------
-- POINT_CHANGE_TYPE에 더미데이터 삽입

--○ 데이터 입력 쿼리문 구성
/*
게시글 작성 +1
인기글 지정 +5

이벤트 응모 (-미정)
신고 처벌(-5)
허위 신고 처벌(-5)
*/
--* 캠핑일지 관련 포인트변동 없애기, 이벤트 응모 시 변동포인트 어떻게 추적할지????
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '게시글 작성')
;
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '인기글 지정')
;
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '이벤트 응모')
;
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '신고 처벌')
;
INSERT INTO POINT_CHANGE_TYPE(POINT_CHANGE_TYPE_ID, POINT_CHANGE_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '허위 신고 처벌')
;

select *
from POINT_CHANGE_TYPE;


---------------------------------------------
-- SIGNUP_TYPE에 더미데이터 삽입

--○ 데이터 입력 쿼리문 구성
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '신규')
;
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '네이버')
;
INSERT INTO SIGNUP_TYPE(SIGNUP_TYPE_ID, SIGNUP_TYPE_NAME)
VALUES(SEQ.NEXTVAL, '카카오')
;




---------------------------------------------
-- RANK에 더미데이터 삽입

--○ 데이터 입력 쿼리문 구성
--*닉네임변경 횟수 상의하기, 신뢰도 %로 할 건지 상의하기, 신뢰도 기준 통일하기

--==>> 1(도시인) : 기본 등급 → 끌어올리기 1회/주, 쿠폰 10% 1장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_COUPON_QTY)
VALUES(SEQ.NEXTVAL, '도시인', 0, 99, 0, 59, 1, 1, 1)
;
--==>> 2(야외인) : 포인트 100점 이상 / 신뢰도 60% → 끌어올리기 2회/주, 쿠폰 10% 2장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_COUPON_QTY)
VALUES(SEQ.NEXTVAL, '야외인', 100, 199, 60, 69, 2, 2, 2)
;
--==>> 3(방랑인) : 포인트 200점 이상  / 신뢰도 70% → 끌어올리기 3회/주, 쿠폰 10% 3장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_COUPON_QTY)
VALUES(SEQ.NEXTVAL, '방랑인', 200, 299, 70, 79, 3, 3, 3)
;
--==>> 4(개척인) : 포인트 300점 이상 / 신뢰도 80% 이상 → 끌어올리기 4회/주, 쿠폰 10% 4장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_COUPON_QTY)
VALUES(SEQ.NEXTVAL, '개척인', 300, 499, 80, 89, 4, 4, 4)
;
--==>> 5(자연인) : 포인트 500점 이상 / 신뢰도 90% 이상 → 끌어올리기 5회/주, 쿠폰 10% 5장
INSERT INTO RANK(RANK_ID, RANK_NAME, MIN_POINT, MAX_POINT, MIN_CREDIT, MAX_CREDIT, MAX_NICKNAME_CHANGE, DISCOUNT_COUPON_QTY, BOOST_COUPON_QTY)
VALUES(SEQ.NEXTVAL, '자연인', 500, 999, 90, 999, 5, 5, 5)
;



---------------------------------------------
-- BOARD_CATEGORY에 더미데이터 삽입


--○ 데이터 입력 쿼리문 구성
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '자유게시판', '자유롭게 글을 올릴 수 있는 게시판입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '장비정보', '장비 정보를 공유하는 게시판입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '캠핑장정보', '캠핑장 정보를 공유하는 게시판입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '고독한캠핑방', '사진만 올릴 수 있는 게시판입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '고객센터', '고객센터입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '이벤트게시판', '이벤트가 올라오는 게시판입니다.')
;
INSERT INTO BOARD_CATEGORY(BOARD_CATE_ID, BOARD_CATE_NAME, BOARD_CATE_DESC)
VALUES(SEQ.NEXTVAL, '공지사항', '공지사항을 등록하는 게시판입니다.')
;

-----------------------
--○ 장비 카테고리 (※텐트/타프 종류만 다 넣어놓기)
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '텐트/타프');

INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '침낭,매트');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '퍼니처');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '라이팅');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '화로,BBQ');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '키친');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '계절용품');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '스토리지');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '백패킹');
INSERT INTO CATEGORY(category_id, category_name)
VALUES(SEQ.NEXTVAL, '액세서리');

SELECT *
FROM CATEGORY;
--'텐트/타프'의 category_id 뭔지 확인하고 아래에 parent_category_id에 넣기

INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '거실형텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '돔형텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '차박/티피/루프탑 텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '백패킹텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '쉘터');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '에어/면텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '타프텐트/타프');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '팝업/그늘막/스크린');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '모기장/화장실텐트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '폴대/팩/망치/스트링');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '그라운드시트');
INSERT INTO CATEGORY(category_id, parent_category_id, category_name)
VALUES(SEQ.NEXTVAL, 1, '기타용품');










---------------------------------------------------------------------------
---------------------------------------------------------------------------
--■■■ View ■■■--

--○ '쿠폰 관리' 뷰 
-- 뷰 이름 : VW_COUPON_MANAGEMENT
CREATE OR REPLACE VIEW VW_COUPON_MANAGEMENT AS
SELECT
    OC.OWNED_COUPON_ID,
    UC.USER_CODE,
    NL.NICKNAME AS USER_NICKNAME,
    IC.COUPON_NAME,
    CT.COUPON_TYPE_NAME,
    IC.COUPON_DISCOUNT,
    IC.COUPON_MONTH,
    IC.ISSUED_DATE,
    ADD_MONTHS(IC.ISSUED_DATE, IC.COUPON_MONTH) AS EXPIRATION_DATE,
    OC.COMPLETED_DATE AS USED_DATE,
    CASE 
        WHEN OC.COMPLETED_DATE IS NULL 
             AND ADD_MONTHS(IC.ISSUED_DATE, IC.COUPON_MONTH) >= SYSDATE THEN '사용 가능'
        WHEN OC.COMPLETED_DATE IS NOT NULL THEN '사용 완료'
        ELSE '만료'
    END AS COUPON_STATUS,
    A.ADMIN_NICKNAME AS ISSUED_BY
FROM OWNED_COUPON OC
JOIN ISSUED_COUPON IC ON OC.ISSUED_COUPON_ID = IC.ISSUED_COUPON_ID
JOIN COUPON_TYPE CT ON IC.COUPON_TYPE_ID = CT.COUPON_TYPE_ID
JOIN USER_CODE UC ON OC.USER_CODE = UC.USER_CODE
JOIN USERS U ON UC.USER_CODE = U.USER_CODE
JOIN NICKNAME_LOG NL ON NL.USER_CODE = U.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = NL.USER_CODE
    )
JOIN ADMINS A ON IC.ADMIN_ID = A.ADMIN_ID
WHERE OC.COMPLETED_DATE IS NULL
    AND ADD_MONTHS(IC.ISSUED_DATE, IC.COUPON_MONTH) >= SYSDATE;





--○ '게시물 관리' 뷰 
-- 뷰 이름 : VW_POST_MANAGEMENT
CREATE OR REPLACE VIEW VW_POST_MANAGEMENT AS
SELECT
    P.POST_ID,
    UC.USER_CODE,
    NL.NICKNAME AS USER_NICKNAME,
    BC.BOARD_CATE_NAME,
    B.BOARD_NAME,
    PL.POST_LABEL_NAME,
    P.POST_TITLE,
    P.POST_CONTENT,
    P.CREATED_DATE,

    -- 통계 정보
    (SELECT COUNT(*) FROM POST_VIEW_LOG PVL WHERE PVL.POST_ID = P.POST_ID) AS VIEW_COUNT,
    (SELECT COUNT(*) FROM RECOMMEND R WHERE R.POST_ID = P.POST_ID) AS RECOMMEND_COUNT,
    (SELECT COUNT(*) FROM REPLY RP WHERE RP.POST_ID = P.POST_ID) AS REPLY_COUNT,
    (SELECT COUNT(*) FROM ATTACHMENT_POST AP WHERE AP.POST_ID = P.POST_ID) AS ATTACHMENT_COUNT,

    -- 블라인드 여부
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM POST_REPORT PR
            WHERE PR.POST_ID = P.POST_ID
        )
        THEN
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM POST_REPORT_ACTION PRA
                    JOIN REPORT_ACTION_TYPE RAT ON PRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
                    WHERE PRA.POST_REPORT_ID IN (
                        SELECT PR2.POST_REPORT_ID 
                        FROM POST_REPORT PR2 
                        WHERE PR2.POST_ID = P.POST_ID
                    )
                    AND RAT.REPORT_ACTION_TYPE_NAME = '신고자 처벌'
                )
                THEN 'N'
                ELSE 'Y'
            END
        ELSE 'N'
    END AS IS_BLINDED,

    -- 인기글 여부
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM HOT_POST_LOG HPL WHERE HPL.POST_ID = P.POST_ID
        ) THEN 'Y'
        ELSE 'N'
    END AS IS_HOT

FROM POST P

-- 작성자
JOIN USER_CODE UC ON P.USER_CODE = UC.USER_CODE

-- 최신 닉네임
JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = UC.USER_CODE
    )

-- 게시판 정보
JOIN BOARD B ON P.BOARD_ID = B.BOARD_ID
JOIN BOARD_CATEGORY BC ON B.BOARD_CATE_ID = BC.BOARD_CATE_ID
JOIN POST_LABEL PL ON P.POST_LABEL_ID = PL.POST_LABEL_ID

-- 신고 상태가 '신고자 처벌'이 아닌 경우 블라인드 처리
WHERE NOT EXISTS (
    SELECT 1
    FROM POST_REPORT PR
    WHERE PR.POST_ID = P.POST_ID
    AND NOT EXISTS (
        SELECT 1
        FROM POST_REPORT_ACTION PRA
        JOIN REPORT_ACTION_TYPE RAT ON PRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
        WHERE PRA.POST_REPORT_ID = PR.POST_REPORT_ID
        AND RAT.REPORT_ACTION_TYPE_NAME = '신고자 처벌'
    )
);






--○ '결제 관리' 뷰 
-- 뷰 이름 : VW_PAYMENT_MANAGEMENT
CREATE OR REPLACE VIEW VW_PAYMENT_MANAGEMENT AS
SELECT
    P.PAY_ID,
    UC.USER_CODE,
    U.USER_NAME,  -- 실명 사용
    PM.PAY_METHOD_NAME,
    P.PAY_AMOUNT,
    P.PAY_DATE,

    -- 결제 취소 정보
    PC.CANCEL_DATE,
    PCR.PAY_CANCEL_REASON_NAME,

    -- 거래 유형별 정보
    P.STOREN_ID,
    P.STORAGE_ID,
    P.RENTAL_MATCHING_DONE_ID,
    P.STOREN_MATCHING_DONE_ID
FROM PAY P
JOIN USER_CODE UC ON
(
    UC.USER_CODE IN
    (
        SELECT RMR.RENTAL_MATCHING_REQUESTER_ID
        FROM RENTAL_MATCHING_REQ RMR
        JOIN RENTAL_MATCHING_DONE RMD ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
        WHERE RMD.RENTAL_MATCHING_DONE_ID = P.RENTAL_MATCHING_DONE_ID
        UNION
        SELECT SMR.STOREN_MATCHING_REQ_USER_ID
        FROM STOREN_MATCHING_REQ SMR
        JOIN STOREN_MATCHING_DONE SMD ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
        WHERE SMD.STOREN_MATCHING_DONE_ID = P.STOREN_MATCHING_DONE_ID
    )
)
JOIN USERS U ON UC.USER_CODE = U.USER_CODE
JOIN PAY_METHOD PM ON P.PAY_METHOD_ID = PM.PAY_METHOD_ID
LEFT JOIN PAY_CANCEL PC ON P.PAY_ID = PC.PAY_ID
LEFT JOIN PAY_CANCEL_REASON PCR ON PC.PAY_CANCEL_REASON_ID = PCR.PAY_CANCEL_REASON_ID;





--○ '댓글 관리' 뷰 
-- 뷰 이름 : VW_REPLY_MANAGEMENT
CREATE OR REPLACE VIEW VW_REPLY_MANAGEMENT AS
SELECT
    R.REPLY_ID,
    UC.USER_CODE,
    NL.NICKNAME AS USER_NICKNAME,
    R.REPLY_CONTENT,
    R.CREATED_DATE,
    P.POST_TITLE,
    B.BOARD_NAME,
    BC.BOARD_CATE_NAME,
    (SELECT COUNT(*) FROM ATTACHMENT_REPLY WHERE REPLY_ID = R.REPLY_ID) AS ATTACHMENT_COUNT
FROM REPLY R
JOIN USER_CODE UC ON R.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = NL.USER_CODE
    )
JOIN POST P ON R.POST_ID = P.POST_ID
JOIN BOARD B ON P.BOARD_ID = B.BOARD_ID
JOIN BOARD_CATEGORY BC ON B.BOARD_CATE_ID = BC.BOARD_CATE_ID
WHERE NOT EXISTS(
    SELECT 1
    FROM REPLY_REPORT RR
    WHERE RR.REPLY_ID = R.REPLY_ID
    AND NOT EXISTS(
        SELECT 1
        FROM REPLY_REPORT_ACTION RRA
        JOIN REPORT_ACTION_TYPE RAT ON RRA.REPORT_ACTION_TYPE_ID = RAT.REPORT_ACTION_TYPE_ID
        WHERE RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
        AND RAT.REPORT_ACTION_TYPE_NAME = '신고자 처벌'
    )
);





--○ '배송 관리' 뷰 
-- 뷰 이름 : VW_DELIVERY_MANAGEMENT
CREATE OR REPLACE VIEW VW_DELIVERY_MANAGEMENT AS
SELECT
    UC.USER_CODE,
    NL.NICKNAME AS USER_NICKNAME,

    -- 결제 정보
    P.PAY_ID,
    PM.PAY_METHOD_NAME,
    P.PAY_DATE,
    PC.CANCEL_DATE,
    PCR.PAY_CANCEL_REASON_NAME,

    -- 거래 ID
    P.STORAGE_ID,
    P.STOREN_ID,
    P.RENTAL_MATCHING_DONE_ID,
    P.STOREN_MATCHING_DONE_ID,

    -- 플랫폼 배송
    PD.PLATFORM_DELIVERY_ID,
    PD.DELIVERY_START_DATE AS PLATFORM_DELIVERY_START_DATE,
    PD.DELIVERY_END_DATE AS PLATFORM_DELIVERY_END_DATE,

    -- 플랫폼 배송 반환
    PDR.PLATFORM_DELIVERY_RETURN_ID,
    PDR.DELIVERY_START_DATE AS PLATFORM_RETURN_START_DATE,
    PDR.DELIVERY_END_DATE AS PLATFORM_RETURN_END_DATE,

    -- 사용자 직접 배송
    UD.USERS_DELIVERY_ID,
    UD.WAYBILL_ENTRY_DATE AS USERS_DELIVERY_START_DATE,
    UD.DELIVERY_END_DATE AS USERS_DELIVERY_END_DATE,

    -- 사용자 직접 배송 반환
    UDR.USERS_DELIVERY_RETURN_ID,
    UDR.WAYBILL_ENTRY_DATE AS USERS_RETURN_START_DATE,
    UDR.DELIVERY_END_DATE AS USERS_RETURN_END_DATE,

    -- 최종 반납
    SL.STORAGE_LAST_RETURN_ID,
    SL.DELIVERY_START_DATE AS STORAGE_RETURN_START_DATE,
    SL.DELIVERY_END_DATE AS STORAGE_RETURN_END_DATE,
    STL.STOREN_LAST_RETURN_ID,
    STL.DELIVERY_START_DATE AS STOREN_RETURN_START_DATE,
    STL.DELIVERY_END_DATE AS STOREN_RETURN_END_DATE,

    -- 검수 결과
    IRA.INSPEC_RESULT_ACTION_ID,
    IRAT.INSPEC_RESULT_ACTION_TYPE_NAME,
    IRA.COMPLETED_DATE AS INSPEC_ACTION_DATE

FROM PAY P

-- 유저
JOIN USER_CODE UC ON (
    UC.USER_CODE IN (
        SELECT RMR.RENTAL_MATCHING_REQUESTER_ID
        FROM RENTAL_MATCHING_REQ RMR
        JOIN RENTAL_MATCHING_DONE RMD ON RMR.RENTAL_MATCHING_REQ_ID = RMD.RENTAL_MATCHING_REQ_ID
        WHERE RMD.RENTAL_MATCHING_DONE_ID = P.RENTAL_MATCHING_DONE_ID
        UNION
        SELECT SMR.STOREN_MATCHING_REQ_USER_ID
        FROM STOREN_MATCHING_REQ SMR
        JOIN STOREN_MATCHING_DONE SMD ON SMR.STOREN_MATCHING_REQ_ID = SMD.STOREN_MATCHING_REQ_ID
        WHERE SMD.STOREN_MATCHING_DONE_ID = P.STOREN_MATCHING_DONE_ID
    )
)

-- 최신 닉네임
JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = UC.USER_CODE
    )

-- 결제
JOIN PAY_METHOD PM ON P.PAY_METHOD_ID = PM.PAY_METHOD_ID
LEFT JOIN PAY_CANCEL PC ON P.PAY_ID = PC.PAY_ID
LEFT JOIN PAY_CANCEL_REASON PCR ON PC.PAY_CANCEL_REASON_ID = PCR.PAY_CANCEL_REASON_ID

-- 배송: 플랫폼
LEFT JOIN PLATFORM_DELIVERY PD ON PD.PAY_ID = P.PAY_ID
LEFT JOIN PLATFORM_DELIVERY_RETURN PDR ON PDR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID

-- 배송: 사용자
LEFT JOIN USERS_DELIVERY UD ON UD.PAY_ID = P.PAY_ID
LEFT JOIN USERS_DELIVERY_RETURN UDR ON UDR.USERS_DELIVERY_ID = UD.USERS_DELIVERY_ID

-- 최종 반납
LEFT JOIN STORAGE_LAST_RETURN SL ON SL.STORAGE_ID = P.STORAGE_ID
LEFT JOIN STOREN_LAST_RETURN STL ON STL.STOREN_ID = P.STOREN_ID

-- 검수
LEFT JOIN INSPEC_RESULT IR ON IR.PLATFORM_DELIVERY_ID = PD.PLATFORM_DELIVERY_ID
LEFT JOIN INSPEC_RESULT_ACTION IRA ON IRA.INSPEC_RESULT_ID = IR.INSPEC_RESULT_ID
LEFT JOIN INSPEC_RESULT_ACTION_TYPE IRAT ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRAT.INSPEC_RESULT_ACTION_TYPE_ID;








--○ '포인트 관리' 뷰 
-- 뷰 이름 : VW_POINT_MANAGEMENT
CREATE OR REPLACE VIEW VW_POINT_MANAGEMENT AS
SELECT
    PL.POINT_LOG_ID,
    UC.USER_CODE,
    NL.NICKNAME AS USER_NICKNAME,
    PCT.POINT_CHANGE_TYPE_NAME,
    PL.POINT_CHANGE,
    PL.CREATED_DATE,

    -- 연관 게시글 제목 (게시글 작성, 인기글 지정 시)
    P.POST_TITLE AS RELATED_POST_TITLE,

    -- 연관 이벤트 제목 (이벤트 응모 시)
    E.EVENT_TITLE AS RELATED_EVENT_TITLE,

    -- 인기글 지정 로그 ID
    HPL.HOT_POST_LOG_ID,

    -- 게시글 신고
    PR.POST_REPORT_ID,
    RAT1.REPORT_ACTION_TYPE_NAME AS POST_REPORT_ACTION_NAME,

    -- 댓글 신고
    RR.REPLY_REPORT_ID,
    RAT2.REPORT_ACTION_TYPE_NAME AS REPLY_REPORT_ACTION_NAME,

    -- 렌탈 댓글 신고
    RRR.RENTAL_REPLY_REPORT_ID,
    RAT3.REPORT_ACTION_TYPE_NAME AS RENTAL_REPLY_REPORT_ACTION_NAME

FROM POINT_LOG PL

-- 사용자
JOIN USER_CODE UC ON PL.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(NL2.LAST_UPDATED_DATE)
        FROM NICKNAME_LOG NL2
        WHERE NL2.USER_CODE = UC.USER_CODE
    )

-- 포인트 유형
JOIN POINT_CHANGE_TYPE PCT ON PL.POINT_CHANGE_TYPE_ID = PCT.POINT_CHANGE_TYPE_ID

-- 게시글 (포인트 유형: 게시글 작성)
LEFT JOIN POST P ON P.USER_CODE = PL.USER_CODE AND PCT.POINT_CHANGE_TYPE_NAME = '게시글 작성'

-- 인기글 (포인트 유형: 인기글 지정)
LEFT JOIN HOT_POST_LOG HPL ON HPL.POST_ID = P.POST_ID AND PCT.POINT_CHANGE_TYPE_NAME = '인기글 지정'

-- 이벤트 (포인트 유형: 이벤트 응모)
LEFT JOIN EVENT_ENTRY EE ON EE.USER_CODE = PL.USER_CODE AND PCT.POINT_CHANGE_TYPE_NAME = '이벤트 응모'
LEFT JOIN EVENT E ON EE.EVENT_ID = E.EVENT_ID

-- 신고 관련: 게시글
LEFT JOIN POST_REPORT_ACTION PRA ON PRA.ADMIN_ID IN (
    SELECT ADMIN_ID FROM ADMINS WHERE USER_CODE = PL.USER_CODE
)
LEFT JOIN POST_REPORT PR ON PRA.POST_REPORT_ID = PR.POST_REPORT_ID
LEFT JOIN REPORT_ACTION_TYPE RAT1 ON PRA.REPORT_ACTION_TYPE_ID = RAT1.REPORT_ACTION_TYPE_ID
    AND PCT.POINT_CHANGE_TYPE_NAME IN ('작성자 처벌', '신고자 처벌')

-- 신고 관련: 댓글
LEFT JOIN REPLY_REPORT_ACTION RRA ON RRA.ADMIN_ID IN (
    SELECT ADMIN_ID FROM ADMINS WHERE USER_CODE = PL.USER_CODE
)
LEFT JOIN REPLY_REPORT RR ON RRA.REPLY_REPORT_ID = RR.REPLY_REPORT_ID
LEFT JOIN REPORT_ACTION_TYPE RAT2 ON RRA.REPORT_ACTION_TYPE_ID = RAT2.REPORT_ACTION_TYPE_ID
    AND PCT.POINT_CHANGE_TYPE_NAME IN ('작성자 처벌', '신고자 처벌')

-- 신고 관련: 렌탈 댓글
LEFT JOIN RENTAL_REPLY_REPORT_ACTION RRRA ON RRRA.ADMIN_ID IN (
    SELECT ADMIN_ID FROM ADMINS WHERE USER_CODE = PL.USER_CODE
)
LEFT JOIN RENTAL_REPLY_REPORT RRR ON RRRA.RENTAL_REPLY_REPORT_ID = RRR.RENTAL_REPLY_REPORT_ID
LEFT JOIN REPORT_ACTION_TYPE RAT3 ON RRRA.REPORT_ACTION_TYPE_ID = RAT3.REPORT_ACTION_TYPE_ID
    AND PCT.POINT_CHANGE_TYPE_NAME IN ('작성자 처벌', '신고자 처벌');





--○ '거래글 정렬 관리' 뷰 
-- 뷰 이름 : VW_TRANS_POST_SORT
CREATE OR REPLACE VIEW VW_TRANS_POST_SORT AS
SELECT
    UC.USER_CODE,
    
    -- 렌탈 정보
    R.RENTAL_ID,
    R.CREATED_DATE AS RENTAL_CREATED_DATE,
    BR.BOOST_LOG_DATE AS RENTAL_BOOST_DATE,

    -- 보관 정보
    S.STORAGE_ID,
    S.CREATED_DATE AS STORAGE_CREATED_DATE,
    BS.BOOST_LOG_DATE AS STORAGE_BOOST_DATE,

    -- 스토렌 정보
    ST.STOREN_ID,
    ST.CREATED_DATE AS STOREN_CREATED_DATE,
    BST.BOOST_LOG_DATE AS STOREN_BOOST_DATE,
    IRA.INSPEC_RESULT_ACTION_TYPE_NAME AS STOREN_INSPEC_RESULT_ACTION,
    IRACT.CREATED_DATE AS STOREN_INSPEC_RESULT_DATE

FROM USER_CODE UC

-- 렌탈
LEFT JOIN RENTAL R ON R.USER_CODE = UC.USER_CODE
LEFT JOIN BOOST_LOG BR ON BR.RENTAL_ID = R.RENTAL_ID AND BR.BOOST_TYPE = '렌탈'

-- 보관
LEFT JOIN STORAGE S ON S.USER_CODE = UC.USER_CODE
LEFT JOIN BOOST_LOG BS ON BS.STORAGE_ID = S.STORAGE_ID AND BS.BOOST_TYPE = '보관'

-- 스토렌
LEFT JOIN STOREN ST ON ST.USER_CODE = UC.USER_CODE
LEFT JOIN BOOST_LOG BST ON BST.STOREN_ID = ST.STOREN_ID AND BST.BOOST_TYPE = '스토렌'

-- 스토렌 입고 완료 여부 확인 (검수 결과 처리 포함)
LEFT JOIN INSPEC_RESULT_ACTION IRACT ON IRACT.STOREN_ID = ST.STOREN_ID
LEFT JOIN INSPEC_RESULT_ACTION_TYPE IRA ON IRA.INSPEC_RESULT_ACTION_TYPE_ID = IRACT.INSPEC_RESULT_ACTION_TYPE_ID
    AND IRA.INSPEC_RESULT_ACTION_TYPE_NAME = '입고 완료';





--○ '인기글 관리' 뷰 
-- 뷰 이름 : VW_HOT_POST_MANAGEMENT
CREATE OR REPLACE VIEW VW_HOT_POST_MANAGEMENT AS
SELECT
    HPL.HOT_POST_LOG_ID,
    P.POST_ID,
    P.POST_TITLE,
    P.CREATED_DATE AS POST_CREATED_DATE,
    BC.BOARD_CATEGORY_NAME,
    B.BOARD_NAME,
    PL.POST_LABEL_NAME,
    HPL.CREATED_DATE AS HOT_ASSIGNED_DATE,
    NL.NICKNAME AS USER_NICKNAME
FROM HOT_POST_LOG HPL
JOIN POST P ON HPL.POST_ID = P.POST_ID
JOIN BOARD B ON P.BOARD_ID = B.BOARD_ID
JOIN BOARD_CATEGORY BC ON B.BOARD_CATEGORY_ID = BC.BOARD_CATEGORY_ID
JOIN POST_LABEL PL ON P.POST_LABEL_ID = PL.POST_LABEL_ID
JOIN USER_CODE UC ON P.USER_CODE = UC.USER_CODE
JOIN NICKNAME_LOG NL ON NL.USER_CODE = UC.USER_CODE
    AND NL.LAST_UPDATED_DATE = (
        SELECT MAX(LAST_UPDATED_DATE)
        FROM NICKNAME_LOG
        WHERE USER_CODE = UC.USER_CODE
    );





--○ '게시판 카테고리 관리' 뷰 
-- 뷰 이름 : VW_BOARD_CATEGORY_MANAGEMENT
CREATE OR REPLACE VIEW VW_BOARD_CATEGORY_MANAGEMENT AS
SELECT
    BC.BOARD_CATEGORY_ID,
    BC.BOARD_CATEGORY_NAME,
    B.BOARD_ID,
    B.BOARD_NAME,
    PL.POST_LABEL_ID,
    PL.POST_LABEL_NAME
FROM BOARD_CATEGORY BC
JOIN BOARD B ON BC.BOARD_CATEGORY_ID = B.BOARD_CATEGORY_ID
JOIN POST_LABEL PL ON B.BOARD_ID = PL.BOARD_ID;



